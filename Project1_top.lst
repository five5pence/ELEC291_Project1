                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 020532      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014             45   
0014 3000        46   state0:     db '0', 0
0016 3100        47   state1:     db '1', 0
0018 3200        48   state2:     db '2', 0
001A 3300        49   state3:     db '3', 0
001C 3400        50   state4:     db '4', 0
001E 3500        51   state5:     db '5', 0
0020             52   
0020             53   cseg
0020             54   
0020             55   ; SYMBOLIC CONSTANTS
0020             56   
0020             57   ; INPUTS
0020             58   tempsensor_in equ P3.0
0020             59   thermocouple_in equ P1.1
0020             60   
0020             61   ; OUTPUTS
0020             62   oven_out equ P1.2
0020             63   speaker_out equ P1.6
0020             64   
0020             65   CSEG
0020             66   ; LCD
0020             67   LCD_RS equ P1.3
0020             68   LCD_E equ P1.4
0020             69   LCD_D4 equ P0.0
0020             70   LCD_D5 equ P0.1
0020             71   LCD_D6 equ P0.2
0020             72   LCD_D7 equ P0.3
0020             73   
                 75   	$LIST
00D4             77   
00D4             78   ; Flash instructions
00D4             79   PAGE_ERASE_AP   EQU 00100010b
00D4             80   BYTE_PROGRAM_AP EQU 00100001b
00D4             81   
00D4             82   ; These register definitions needed by 'math32.inc'
0030             83   DSEG at 30H
0030             84   x:   ds 4
0034             85   y:   ds 4
0038             86   amb_temp: ds 4 ; ambient temperature read by LM335
003C             87   bcd: ds 5
0041             88   
0041             89   DSEG
0041             90   pwm: ds 1
0042             91   state: ds 1
0043             92   temp_soak: ds 1
0044             93   Time_soak: ds 1
0045             94   Temp_refl: ds 1
0046             95   Time_refl: ds 1
0047             96   
0047             97   sec: ds 1
0048             98   temp: ds 2
004A             99   
004A            100   
004A            101   FSM1_state: ds 1
004B            102   
0000            103   BSEG
0000            104   reflow_flag: dbit 1
0001            105   soak_flag: dbit 1
0002            106   mf: dbit 1
0003            107   
0003            108   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            109   PB0: dbit 1
0004            110   PB1: dbit 1
0005            111   PB2: dbit 1
0006            112   PB3: dbit 1
0007            113   PB4: dbit 1
0008            114   PB5: dbit 1
0009            115   PB6: dbit 1
000A            116   PB7: dbit 1
000B            117   
000B            118   ; MATH32
                546   $LIST
                120   $LIST
0344            122   
0344            123   ; Blank Macro
                124   Left_blank mac
                125   	mov a, %0
                126   	anl a, #0xf0
                127   	swap a
                128   	jz Left_blank_%M_a
                129   	ljmp %1
                130   Left_blank_%M_a:
                131   	Display_char(#' ')
                132   	mov a, %0
                133   	anl a, #0x0f
                134   	jz Left_blank_%M_b
                135   	ljmp %1
                136   Left_blank_%M_b:
                137   	Display_char(#' ')
                138   endmac
0344            139   
0344            140   ; Formatting to display thermocouple temperature
0344            141   ; Display: 0000.00
0344            142   Display_formated_BCD_To:
0344 C000       143            push ar0
0346 A83F       143            mov r0, bcd+3
0348 1200BE     143            lcall ?Display_BCD
034B D000       143            pop ar0
034D C000       144            push ar0
034F A83E       144            mov r0, bcd+2
0351 1200BE     144            lcall ?Display_BCD
0354 D000       144            pop ar0
0356 C0E0       145            push acc
0358 742E       145            mov a, #'.'
035A 12006F     145            lcall ?WriteData
035D D0E0       145            pop acc
035F C000       146            push ar0
0361 A83D       146            mov r0, bcd+1
0363 1200BE     146            lcall ?Display_BCD
0366 D000       146            pop ar0
0368            147   
0368            148   
0368 22         149            ret
0369            150            
0369            151   ; Formatting to display ambient temperature
0369            152   ; Display: 00.00
0369            153   Display_formated_BCD_Tj:
0369 C000       154            push ar0
036B A83E       154            mov r0, bcd+2
036D 1200BE     154            lcall ?Display_BCD
0370 D000       154            pop ar0
0372 C0E0       155            push acc
0374 742E       155            mov a, #'.'
0376 12006F     155            lcall ?WriteData
0379 D0E0       155            pop acc
037B C000       156            push ar0
037D A83D       156            mov r0, bcd+1
037F 1200BE     156            lcall ?Display_BCD
0382 D000       156            pop ar0
0384 22         157            ret
0385            158   
0385            159   
0385            160   ; INITIALIZATION SUBROUTINES
0385            161   Init_All:
0385            162            ; Configure all the pins for biderectional I/O
0385 75AC00     163            mov     P3M1, #0x00
0388 75AD00     164            mov     P3M2, #0x00
038B 75B300     165            mov     P1M1, #0x00
038E 75B400     166            mov     P1M2, #0x00
0391 75B100     167            mov     P0M1, #0x00
0394 75B200     168            mov     P0M2, #0x00
0397            169   
0397 438E10     170            orl     CKCON, #0x10 ; CLK is the input for timer 1
039A 438780     171            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
039D 759852     172            mov     SCON, #0x52
03A0 53C4DF     173            anl     T3CON, #0b11011111
03A3 53890F     174            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03A6 438920     175            orl     TMOD, #0x20 ; Timer 1 Mode 2
03A9 758DF7     176            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03AC D28E       177            setb TR1
03AE            178            
03AE            179            ; Using timer 0 for delay functions.  Initialize here:
03AE C28C       180            clr     TR0 ; Stop timer 0
03B0 438E08     181            orl     CKCON,#0x08 ; CLK is the input for timer 0
03B3 5389F0     182            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03B6 438901     183            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03B9            184            
03B9            185            ; Initialize the pin used by the ADC (P1.1) as input.
03B9 43B302     186            orl     P1M1, #0b00000010
03BC 53B4FD     187            anl     P1M2, #0b11111101
03BF            188   
03BF            189            ; Initialize the pin used by the ADC (P3.0) as input.
03BF 43AC01     190            orl     P3M1, #0b00000001
03C2 53ADFE     191            anl     P3M2, #0b11111110
03C5            192            
03C5            193            ; Initialize and start the ADC:
03C5 53E8F0     194            anl ADCCON0, #0xF0
03C8 43E807     195            orl ADCCON0, #0x07 ; Select channel 7
03CB            196   
03CB 53E2F0     197            anl ADCCON2, #0xF0
03CE 43E201     198            orl ADCCON2, #0x01 ; Select channel 1
03D1            199   
03D1            200            ; AINDIDS select if some pins are analog inputs or digital I/O:
03D1 75F600     201            mov AINDIDS, #0x00 ; Disable all analog inputs
03D4 43F680     202            orl AINDIDS, #0b10000000 ; P1.1 is analog input
03D7 43F601     203            orl AINDIDS, #0b00000001 ; P3.0 is analog input
03DA 43E101     204            orl ADCCON1, #0x01 ; Enable ADC
03DD            205            
03DD 22         206            ret
03DE            207   
03DE            208   ; Flash Memory Subroutines
03DE            209   ;******************************************************************************
03DE            210   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
03DE            211   ; Data Flash when user code is executed in APROM.
03DE            212   ; (The base of this code is listed in the N76E003 user manual)
03DE            213   ;******************************************************************************
03DE            214   
03DE            215   Save_Variables:
03DE C2AF       216            CLR EA  ; MUST disable interrupts for this to work!
03E0            217            
03E0 75C7AA     218            MOV TA, #0aah ; CHPCON is TA protected
03E3 75C755     219            MOV TA, #55h
03E6 439F01     220            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
03E9            221            
03E9 75C7AA     222            MOV TA, #0aah ; IAPUEN is TA protected
03EC 75C755     223            MOV TA, #55h
03EF 43A501     224            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
03F2            225            
03F2 75AF22     226            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
03F5 75A73F     227            MOV IAPAH, #3fh ; Address high byte
03F8 75A680     228            MOV IAPAL, #80h ; Address low byte
03FB 75AEFF     229            MOV IAPFD, #0FFh ; Data to load into the address byte
03FE 75C7AA     230            MOV TA, #0aah ; IAPTRG is TA protected
0401 75C755     231            MOV TA, #55h
0404 43A401     232            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0407            233            
0407 75AF21     234            MOV IAPCN, #BYTE_PROGRAM_AP
040A 75A73F     235            MOV IAPAH, #3fh
040D            236            
040D            237            ;Load 3f80h with temp_soak
040D 75A680     238            MOV IAPAL, #80h
0410 8543AE     239            MOV IAPFD, temp_soak
0413 75C7AA     240            MOV TA, #0aah
0416 75C755     241            MOV TA, #55h
0419 43A401     242            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
041C            243            
041C            244            ;Load 3f81h with Time_soak
041C 75A681     245            MOV IAPAL, #81h
041F 8544AE     246            MOV IAPFD, Time_soak
0422 75C7AA     247            MOV TA, #0aah
0425 75C755     248            MOV TA, #55h
0428 43A401     249            ORL IAPTRG,#00000001b
042B            250            
042B            251            ;Load 3f82h with Temp_refl
042B 75A682     252            MOV IAPAL, #82h
042E 8545AE     253            MOV IAPFD, Temp_refl
0431 75C7AA     254            MOV TA, #0aah
0434 75C755     255            MOV TA, #55h
0437 43A401     256            ORL IAPTRG,#00000001b
043A            257            
043A            258            ;Load 3f83h with Time_refl
043A 75A683     259            MOV IAPAL, #83h
043D 8546AE     260            MOV IAPFD, Time_refl
0440 75C7AA     261            MOV TA, #0aah
0443 75C755     262            MOV TA, #55h
0446 43A401     263            ORL IAPTRG,#00000001b
0449            264   
0449            265            ;Load 3f84h with 55h
0449 75A684     266            MOV IAPAL,#84h
044C 75AE55     267            MOV IAPFD, #55h
044F 75C7AA     268            MOV TA, #0aah
0452 75C755     269            MOV TA, #55h
0455 43A401     270            ORL IAPTRG, #00000001b
0458            271   
0458            272            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
0458 75A685     273            MOV IAPAL, #85h
045B 75AEAA     274            MOV IAPFD, #0aah
045E 75C7AA     275            MOV TA, #0aah
0461 75C755     276            MOV TA, #55h
0464 43A401     277            ORL IAPTRG, #00000001b
0467            278   
0467 75C7AA     279            MOV TA, #0aah
046A 75C755     280            MOV TA, #55h
046D 53A5FE     281            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0470 75C7AA     282            MOV TA, #0aah
0473 75C755     283            MOV TA, #55h
0476 539FFE     284            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0479            285            
0479 D2AF       286            setb EA  ; Re-enable interrupts
047B            287   
047B 22         288            ret
047C            289   
047C            290   Load_Variables:
047C 903F84     291            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
047F E4         292            clr a
0480 93         293            movc a, @a+dptr
0481 B4551D     294            cjne a, #0x55, Load_Defaults
0484 A3         295            inc dptr      ; Second key value location.  Must be 0xaa
0485 E4         296            clr a
0486 93         297            movc a, @a+dptr
0487 B4AA17     298            cjne a, #0xaa, Load_Defaults
048A            299            
048A 903F80     300            mov dptr, #0x3f80
048D E4         301            clr a
048E 93         302            movc a, @a+dptr
048F F543       303            mov temp_soak, a
0491            304            
0491 A3         305            inc dptr
0492 E4         306            clr a
0493 93         307            movc a, @a+dptr
0494 F544       308            mov Time_soak, a
0496            309            
0496 A3         310            inc dptr
0497 E4         311            clr a
0498 93         312            movc a, @a+dptr
0499 F545       313            mov Temp_refl, a
049B            314            
049B A3         315            inc dptr
049C E4         316            clr a
049D 93         317            movc a, @a+dptr
049E F546       318            mov Time_refl, a
04A0 22         319            ret
04A1            320   
04A1            321   Load_Defaults:
04A1 754301     322            mov temp_soak, #1
04A4 754402     323            mov Time_soak, #2
04A7 754503     324            mov Temp_refl, #3
04AA 754604     325            mov Time_refl, #4
04AD 22         326            ret
04AE            327   
04AE            328   wait_1ms:
04AE C28C       329            clr     TR0 ; Stop timer 0
04B0 C28D       330            clr     TF0 ; Clear overflow flag
04B2 758CBF     331            mov     TH0, #high(TIMER0_RELOAD_1MS)
04B5 758A28     332            mov     TL0,#low(TIMER0_RELOAD_1MS)
04B8 D28C       333            setb TR0
04BA 308DFD     334            jnb     TF0, $ ; Wait for overflow
04BD 22         335            ret
04BE            336   
04BE            337   ; Wait the number of miliseconds in R2
04BE            338   waitms:
04BE 1204AE     339            lcall wait_1ms
04C1 DAFB       340            djnz R2, waitms
04C3 22         341            ret
04C4            342   
04C4            343   ADC_to_PB:
04C4 53E8F0     344            anl ADCCON0, #0xF0
04C7 43E800     345            orl ADCCON0, #0x00 ; Select AIN0
04CA            346            
04CA C2EF       347            clr ADCF
04CC D2EE       348            setb ADCS   ; ADC start trigger signal
04CE 30EFFD     349       jnb ADCF, $ ; Wait for conversion complete
04D1            350   
04D1 D20A       351            setb PB7
04D3 D209       352            setb PB6
04D5 D208       353            setb PB5
04D7 D207       354            setb PB4
04D9 D206       355            setb PB3
04DB D205       356            setb PB2
04DD D204       357            setb PB1
04DF D203       358            setb PB0
04E1            359            
04E1            360            ; Check PB7
04E1            361   ADC_to_PB_L7:
04E1 C3         362            clr c
04E2 E5C3       363            mov a, ADCRH
04E4 94F0       364            subb a, #0xf0
04E6 4003       365            jc ADC_to_PB_L6
04E8 C20A       366            clr PB7
04EA 22         367            ret
04EB            368   
04EB            369            ; Check PB6
04EB            370   ADC_to_PB_L6:
04EB C3         371            clr c
04EC E5C3       372            mov a, ADCRH
04EE 94D0       373            subb a, #0xd0
04F0 4003       374            jc ADC_to_PB_L5
04F2 C209       375            clr PB6
04F4 22         376            ret
04F5            377   
04F5            378            ; Check PB5
04F5            379   ADC_to_PB_L5:
04F5 C3         380            clr c
04F6 E5C3       381            mov a, ADCRH
04F8 94B0       382            subb a, #0xb0
04FA 4003       383            jc ADC_to_PB_L4
04FC C208       384            clr PB5
04FE 22         385            ret
04FF            386   
04FF            387            ; Check PB4
04FF            388   ADC_to_PB_L4:
04FF C3         389            clr c
0500 E5C3       390            mov a, ADCRH
0502 9490       391            subb a, #0x90
0504 4003       392            jc ADC_to_PB_L3
0506 C207       393            clr PB4
0508 22         394            ret
0509            395   
0509            396            ; Check PB3
0509            397   ADC_to_PB_L3:
0509 C3         398            clr c
050A E5C3       399            mov a, ADCRH
050C 9470       400            subb a, #0x70
050E 4003       401            jc ADC_to_PB_L2
0510 C206       402            clr PB3
0512 22         403            ret
0513            404   
0513            405            ; Check PB2
0513            406   ADC_to_PB_L2:
0513 C3         407            clr c
0514 E5C3       408            mov a, ADCRH
0516 9450       409            subb a, #0x50
0518 4003       410            jc ADC_to_PB_L1
051A C205       411            clr PB2
051C 22         412            ret
051D            413   
051D            414            ; Check PB1
051D            415   ADC_to_PB_L1:
051D C3         416            clr c
051E E5C3       417            mov a, ADCRH
0520 9430       418            subb a, #0x30
0522 4003       419            jc ADC_to_PB_L0
0524 C204       420            clr PB1
0526 22         421            ret
0527            422   
0527            423            ; Check PB0
0527            424   ADC_to_PB_L0:
0527 C3         425            clr c
0528 E5C3       426            mov a, ADCRH
052A 9410       427            subb a, #0x10
052C 4003       428            jc ADC_to_PB_Done
052E C203       429            clr PB0
0530 22         430            ret
0531            431            
0531            432   ADC_to_PB_Done:
0531            433            ; No puhsbutton pressed         
0531 22         434            ret
0532            435   
0532            436   ; MAIN 
0532            437   main:
0532 75817F     438            mov sp, #0x7f
0535 120385     439       lcall Init_All
0538 120079     440       lcall LCD_4BIT
053B            441       ; initial messages in LCD
053B C0E0       442            push acc
053D 7401       442            mov a, #1
053F 14         442            dec a
0540 1200B9     442            lcall ?Set_Cursor_1 ; Select column and row
0543 D0E0       442            pop acc
0545 C083       443            push dph
0547 C082       443            push dpl
0549 C0E0       443            push acc
054B 900003     443            mov dptr, #temperature_message
054E 1200AC     443            lcall ?Send_Constant_String
0551 D0E0       443            pop acc
0553 D082       443            pop dpl
0555 D083       443            pop dph
0557            444   
0557 754A00     445            mov FSM1_state, #0
055A 754332     446       mov Temp_soak, #50
055D 75443C     447            mov Time_soak, #60
0560 754500     448            mov Temp_refl, #0
0563 75462D     449            mov Time_refl, #45
0566 754700     450            mov sec, #0
0569            451   
0569 C200       452            clr reflow_flag ; start on temp
056B C201       453            clr soak_flag ; start on temp
056D            454   
056D            455   Forever:
056D            456   
056D            457   
056D            458   ; Example branch for decreasing any given value 
056D            459   ; This set of code will increase the ones columnn of any given 
056D            460   ; variable. ie. reflow_temp_ones, reflow_time_ones
056D            461   ; the 10s and 100s column will update in response to increasing 
056D            462   ; the ones column beyond 9.
056D            463   
056D            464   ; REFLOW ;
056D            465   reflow_toggle:
056D 200A02     466            jb PB7, check_reflow_toggle
0570 B200       467            cpl reflow_flag ; if button is pressed, change flag
0572            468   
0572            469   check_reflow_toggle: 
0572 200000     470            jb reflow_flag, turn_reflow_to_time
0575            471   
0575            472   turn_reflow_to_temp:
0575            473            ; will use the same logic for the other pushbuttons
0575            474   ; This example will use temp_soak for this example
0575            475   
0575            476   
0575            477   
0575            478   turn_reflow_to_time:
0575            479            
0575            480            decrease:
0575 200919     481       jb PB6, increase
0578 E546       482       mov a, Time_refl
057A 9401       483       subb a, #1
057C 500D       484       jnc no_carry ; If there's no carry, skip the adjustment
057E 2406       485       add a, #6 ; Adjust the units place to 9
0580 F546       486       mov Time_refl, a
0582 E547       487       mov a, Time_refl+1
0584 9401       488       subb a, #1 ; Decrease the tens place by 1
0586 F547       489       mov Time_refl+1, a
0588 02059E     490       ljmp continue1
058B            491            
058B            492   no_carry:
058B D4         493       da a ; Adjust for BCD
058C F546       494       mov Time_refl, a
058E 02059E     495       ljmp continue1
0591            496   
0591            497   increase:
0591 20080A     498            jb PB5, continue1 
0594 E546       499            mov a, Time_refl
0596 2401       500            add a, #1
0598 D4         501            da a 
0599 F546       502            mov Time_refl, a
059B 02059E     503            ljmp continue1
059E            504   
059E            505   ; SOAK ;
059E            506   
059E            507   
059E            508   continue1:
059E C0E0       509            push acc
05A0 7406       509            mov a, #6
05A2 14         509            dec a
05A3 1200B7     509            lcall ?Set_Cursor_2 ; Select column and row
05A6 D0E0       509            pop acc
05A8 C000       510            push ar0
05AA A846       510            mov r0, Time_refl
05AC 1200BE     510            lcall ?Display_BCD
05AF D000       510            pop ar0
05B1 20030F     511            jb PB0, continue
05B4            512   
05B4            513   turn_on:
05B4 E54A       514            mov a, FSM1_state
05B6 B40005     515            cjne a, #0, turn_off
05B9 754A01     516            mov FSM1_state, #1
05BC 8005       517            sjmp continue
05BE            518   
05BE            519   turn_off:
05BE 754A00     520            mov FSM1_state, #0
05C1 8000       521            sjmp continue
05C3            522   
05C3            523   
05C3            524   continue:
05C3 1204C4     525            lcall ADC_to_PB
05C6            526            ;lcall Display_PushButtons_ADC
05C6            527            
05C6 75E807     528            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
05C9 C2EF       529            clr ADCF
05CB D2EE       530            setb ADCS ;  ADC start trigger signal
05CD 30EFFD     531       jnb ADCF, $ ; Wait for conversion complete
05D0            532       
05D0            533       ; Read the ADC result and store in [R1, R0]
05D0 E5C3       534       mov a, ADCRH   
05D2 C4         535       swap a
05D3 C0E0       536       push acc
05D5 540F       537       anl a, #0x0f
05D7 F9         538       mov R1, a
05D8 D0E0       539       pop acc
05DA 54F0       540       anl a, #0xf0
05DC 45C2       541       orl a, ADCRL
05DE F8         542       mov R0, A
05DF            543       
05DF 75E801     544       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
05E2 C2EF       545            clr ADCF
05E4 D2EE       546            setb ADCS ;  ADC start trigger signal
05E6 30EFFD     547       jnb ADCF, $ ; Wait for conversion complete
05E9            548       
05E9            549       ; Read the ADC result and store in [R4, R3]
05E9 E5C3       550       mov a, ADCRH   
05EB C4         551       swap a
05EC C0E0       552       push acc
05EE 540F       553       anl a, #0x0f
05F0 FC         554       mov R4, a
05F1 D0E0       555       pop acc
05F3 54F0       556       anl a, #0xf0
05F5 45C2       557       orl a, ADCRL
05F7 FB         558       mov R3, A
05F8            559       
05F8            560            ; Convert to LM335 temperature to voltage
05F8 8B30       561            mov x+0, R3
05FA 8C31       562            mov x+1, R4
05FC 753200     563            mov x+2, #0
05FF 753300     564            mov x+3, #0
0602 75347C     565            mov y+0, #low (50300 % 0x10000) 
0605 7535C4     565            mov y+1, #high(50300 % 0x10000) 
0608 753600     565            mov y+2, #low (50300 / 0x10000) 
060B 753700     565            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
060E 12024E     566            lcall mul32
0611 7534FF     567            mov y+0, #low (4095 % 0x10000) 
0614 75350F     567            mov y+1, #high(4095 % 0x10000) 
0617 753600     567            mov y+2, #low (4095 / 0x10000) 
061A 753700     567            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
061D 1202DB     568            lcall div32
0620 7534D0     569            mov y+0, #low (27600 % 0x10000) 
0623 75356B     569            mov y+1, #high(27600 % 0x10000) 
0626 753600     569            mov y+2, #low (27600 / 0x10000) 
0629 753700     569            mov y+3, #high(27600 / 0x10000) 
062C 1201BA     570            lcall sub32
062F 753464     571            mov y+0, #low (100 % 0x10000) 
0632 753500     571            mov y+1, #high(100 % 0x10000) 
0635 753600     571            mov y+2, #low (100 / 0x10000) 
0638 753700     571            mov y+3, #high(100 / 0x10000) 
063B 12024E     572            lcall mul32
063E            573            
063E            574            ; Convert to BCD and display
063E 1200D4     575            lcall hex2bcd
0641 C0E0       576            push acc
0643 740C       576            mov a, #12
0645 14         576            dec a
0646 1200B9     576            lcall ?Set_Cursor_1 ; Select column and row
0649 D0E0       576            pop acc
064B 120369     577            lcall Display_formated_BCD_Tj
064E            578   
064E            579            ; Convert value back to hex to use for calculations
064E 12015D     580            lcall bcd2hex
0651            581   
0651            582            ; Storing the ambient temperature
0651 853038     583            mov amb_temp+0, x+0
0654 853139     584            mov amb_temp+1, x+1
0657 85323A     585            mov amb_temp+2, x+2
065A 85333B     586            mov amb_temp+3, x+3
065D            587   
065D            588            ; Convert to thermocouple voltage to temperature
065D 8830       589            mov x+0, R0
065F 8931       590            mov x+1, R1
0661 753200     591            mov x+2, #0
0664 753300     592            mov x+3, #0
0667 75347C     593            mov y+0, #low (50300 % 0x10000) 
066A 7535C4     593            mov y+1, #high(50300 % 0x10000) 
066D 753600     593            mov y+2, #low (50300 / 0x10000) 
0670 753700     593            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0673 12024E     594            lcall mul32
0676 7534FF     595            mov y+0, #low (4095 % 0x10000) 
0679 75350F     595            mov y+1, #high(4095 % 0x10000) 
067C 753600     595            mov y+2, #low (4095 / 0x10000) 
067F 753700     595            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0682 1202DB     596            lcall div32
0685 753464     597            mov y+0, #low (100 % 0x10000) 
0688 753500     597            mov y+1, #high(100 % 0x10000) 
068B 753600     597            mov y+2, #low (100 / 0x10000) 
068E 753700     597            mov y+3, #high(100 / 0x10000) 
0691 1202DB     598            lcall div32
0694 753445     599            mov y+0, #low (5189 % 0x10000) 
0697 753514     599            mov y+1, #high(5189 % 0x10000) 
069A 753600     599            mov y+2, #low (5189 / 0x10000) 
069D 753700     599            mov y+3, #high(5189 / 0x10000) 
06A0 12024E     600            lcall mul32
06A3            601   
06A3            602            ; Adding the ambient temperature to oven temperature
06A3 853834     603            mov y+0, amb_temp+0
06A6 853935     604            mov y+1, amb_temp+1
06A9 853A36     605            mov y+2, amb_temp+2
06AC 853B37     606            mov y+3, amb_temp+3
06AF 120199     607            lcall add32
06B2            608            
06B2            609            ; Convert to BCD and display
06B2 1200D4     610            lcall hex2bcd
06B5 C0E0       611            push acc
06B7 7403       611            mov a, #3
06B9 14         611            dec a
06BA 1200B9     611            lcall ?Set_Cursor_1 ; Select column and row
06BD D0E0       611            pop acc
06BF 120344     612            lcall Display_formated_BCD_To
06C2            613   
06C2            614            ; Storing the thermocouple temperature into var temp 
06C2 753410     615            mov y+0, #low (10000 % 0x10000) 
06C5 753527     615            mov y+1, #high(10000 % 0x10000) 
06C8 753600     615            mov y+2, #low (10000 / 0x10000) 
06CB 753700     615            mov y+3, #high(10000 / 0x10000) 
06CE 1202DB     616            lcall div32
06D1 853048     617            mov temp+0, x+0
06D4 853149     618            mov temp+1, x+1
06D7            619            
06D7            620            ; Wait 100 ms between readings
06D7 7A64       621            mov R2, #100
06D9 1204BE     622            lcall waitms
06DC            623            
06DC            624   ; STATE MACHINE  
06DC            625   FSM1:
06DC E54A       626            mov a, FSM1_state
06DE            627   
06DE            628   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
06DE            629   FSM1_state0:
06DE B40022     630            cjne a, #0, FSM1_state1
06E1 C0E0       631            push acc
06E3 7410       631            mov a, #16
06E5 14         631            dec a
06E6 1200B7     631            lcall ?Set_Cursor_2 ; Select column and row
06E9 D0E0       631            pop acc
06EB C083       632            push dph
06ED C082       632            push dpl
06EF C0E0       632            push acc
06F1 900014     632            mov dptr, #state0
06F4 1200AC     632            lcall ?Send_Constant_String
06F7 D0E0       632            pop acc
06F9 D082       632            pop dpl
06FB D083       632            pop dph
06FD 754100     633            mov pwm, #0
0700            634            ;jb PB0, FSM1_state0_done
0700            635            ;mov FSM1_state, #1
0700            636   FSM1_state0_done:
0700 02056D     637            ljmp Forever
0703            638   
0703            639   ; pre-heat state. Should go to state two when temp reaches temp_soak     
0703            640   FSM1_state1:
0703 B40134     641            cjne a, #1, FSM1_state2
0706 C0E0       642            push acc
0708 7410       642            mov a, #16
070A 14         642            dec a
070B 1200B7     642            lcall ?Set_Cursor_2 ; Select column and row
070E D0E0       642            pop acc
0710 C083       643            push dph
0712 C082       643            push dpl
0714 C0E0       643            push acc
0716 900016     643            mov dptr, #state1
0719 1200AC     643            lcall ?Send_Constant_String
071C D0E0       643            pop acc
071E D082       643            pop dpl
0720 D083       643            pop dph
0722            644            
0722 C296       645            clr P1.6
0724            646            
0724 754164     647            mov pwm, #100
0727 754700     648            mov sec, #0
072A            649            
072A            650            ; These two lines are temporary. temp should be read from the thermocouple wire
072A 754364     651            mov temp_soak, #100
072D            652            
072D E543       653            mov a, temp_soak
072F D3         654            setb c
0730 9548       655            subb a, temp
0732 5003       656            jnc FSM1_state1_done
0734 754A02     657            mov FSM1_state, #2
0737            658   FSM1_state1_done:
0737 02056D     659            ljmp Forever
073A            660   
073A            661   ; State 2
073A            662   FSM1_state2:
073A D296       663            setb P1.6 ;speaker
073C B4023A     664            cjne a, #2, FSM1_state3
073F C0E0       665            push acc
0741 7410       665            mov a, #16
0743 14         665            dec a
0744 1200B7     665            lcall ?Set_Cursor_2 ; Select column and row
0747 D0E0       665            pop acc
0749 C083       666            push dph
074B C082       666            push dpl
074D C0E0       666            push acc
074F 900018     666            mov dptr, #state2
0752 1200AC     666            lcall ?Send_Constant_String
0755 D0E0       666            pop acc
0757 D082       666            pop dpl
0759 D083       666            pop dph
075B 754114     667            mov pwm, #20
075E            668            
075E E547       669            mov a, sec
0760 2401       670            add a, #1
0762 F547       671            mov sec, a
0764            672   
0764 7A32       673            mov R2, #50
0766 1204BE     674            lcall waitms
0769            675   
0769 E544       676            mov a, Time_soak
076B C3         677            clr c
076C 9547       678            subb a, sec
076E 5003       679            jnc FSM1_state2_done
0770 754A03     680            mov FSM1_state, #3
0773            681   FSM1_state2_done:
0773 02056D     682            ljmp Forever
0776            683   
0776            684   ;DELETE
0776            685   jump:
0776 0206DE     686   ljmp FSM1_state0         
0779            687   
0779            688   ;State 3
0779            689   FSM1_state3:
0779 B4032F     690            cjne a, #3, FSM1_state4
077C C0E0       691            push acc
077E 7410       691            mov a, #16
0780 14         691            dec a
0781 1200B7     691            lcall ?Set_Cursor_2 ; Select column and row
0784 D0E0       691            pop acc
0786 C083       692            push dph
0788 C082       692            push dpl
078A C0E0       692            push acc
078C 90001A     692            mov dptr, #state3
078F 1200AC     692            lcall ?Send_Constant_String
0792 D0E0       692            pop acc
0794 D082       692            pop dpl
0796 D083       692            pop dph
0798 754164     693            mov pwm, #100
079B 754700     694            mov sec, #0
079E            695            
079E            696            
079E E545       697            mov a, Temp_refl
07A0 C3         698            clr c
07A1 9548       699            subb a, temp
07A3 5003       700            jnc FSM1_state3_done
07A5 754A04     701            mov FSM1_state, #4
07A8            702   FSM1_state3_done:
07A8 02056D     703            ljmp Forever
07AB            704   
07AB            705   
07AB            706   ;State 4
07AB            707   FSM1_state4:
07AB B40437     708            cjne a, #4, FSM1_state5
07AE C0E0       709            push acc
07B0 7410       709            mov a, #16
07B2 14         709            dec a
07B3 1200B7     709            lcall ?Set_Cursor_2 ; Select column and row
07B6 D0E0       709            pop acc
07B8 C083       710            push dph
07BA C082       710            push dpl
07BC C0E0       710            push acc
07BE 90001C     710            mov dptr, #state4
07C1 1200AC     710            lcall ?Send_Constant_String
07C4 D0E0       710            pop acc
07C6 D082       710            pop dpl
07C8 D083       710            pop dph
07CA 754114     711            mov pwm, #20
07CD            712            
07CD E547       713            mov a, sec
07CF 2401       714            add a, #1
07D1 F547       715            mov sec, a
07D3            716   
07D3 7A32       717            mov R2, #50
07D5 1204BE     718            lcall waitms
07D8            719            
07D8 E546       720            mov a, Time_refl
07DA C3         721            clr c
07DB 9547       722            subb a,sec
07DD 5003       723            jnc FSM1_state4_done
07DF 754A05     724            mov FSM1_state, #5
07E2            725   FSM1_state4_done:
07E2 02056D     726            ljmp Forever
07E5            727            
07E5            728   FSM1_state5:
07E5 B4058E     729            cjne a, #5, jump
07E8 C0E0       730            push acc
07EA 7410       730            mov a, #16
07EC 14         730            dec a
07ED 1200B7     730            lcall ?Set_Cursor_2 ; Select column and row
07F0 D0E0       730            pop acc
07F2 C083       731            push dph
07F4 C082       731            push dpl
07F6 C0E0       731            push acc
07F8 90001E     731            mov dptr, #state5
07FB 1200AC     731            lcall ?Send_Constant_String
07FE D0E0       731            pop acc
0800 D082       731            pop dpl
0802 D083       731            pop dph
0804 754100     732            mov pwm, #0
0807            733            
0807            734            
0807 743C       735            mov a, #60
0809 C3         736            clr c
080A 9548       737            subb a, temp
080C 4003       738            jc FSM1_state5_done
080E 754A00     739            mov FSM1_state,#0
0811            740   FSM1_state5_done:
0811 1203DE     741            lcall Save_Variables ; Save variables in flash memory
0814 02056D     742            ljmp Forever
0817            743            
0817            744   
0817            745   
0817            746   ;Any additions to be checked
0817            747   EN
