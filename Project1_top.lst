                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   TIMER2_RATE         EQU 100      ; 100Hz or 10ms
0000             41   TIMER2_RELOAD       EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             42   
0000             43   
0000             44   ;pwn
0000             45   PWM_OUT    EQU P1.2 ; Logic 1=oven on
0000             46   
0000             47   ORG 0x0000
0000 0205D5      48       ljmp main
002B             49   ORG 0x002B
002B 020458      50            ljmp Timer2_ISR
002E             51   ; Initialization Messages
002E 4F3D2020    52   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
003F 2C00        53   comma              :     db ','               , 0
0041 7300        54   soak_message       :     db 's'               , 0
0043 7200        55   reflow_message     :     db 'r'               , 0
0045             56   
0045 3000        57   state0:     db '0', 0
0047 3100        58   state1:     db '1', 0
0049 3200        59   state2:     db '2', 0
004B 3300        60   state3:     db '3', 0
004D 3400        61   state4:     db '4', 0
004F 3500        62   state5:     db '5', 0
0051             63   
0051             64   cseg
0051             65   
0051             66   ; SYMBOLIC CONSTANTS
0051             67   
0051             68   ; INPUTS
0051             69   tempsensor_in equ P3.0
0051             70   thermocouple_in equ P1.1
0051             71   
0051             72   ; OUTPUTS
0051             73   oven_out equ P1.2
0051             74   speaker_out equ P1.6
0051             75   
0051             76   CSEG
0051             77   ; LCD
0051             78   LCD_RS equ P1.3
0051             79   LCD_E equ P1.4
0051             80   LCD_D4 equ P0.0
0051             81   LCD_D5 equ P0.1
0051             82   LCD_D6 equ P0.2
0051             83   LCD_D7 equ P0.3
0051             84   
                 86   	$LIST
0105             88   
0105             89   ; Flash instructions
0105             90   PAGE_ERASE_AP   EQU 00100010b
0105             91   BYTE_PROGRAM_AP EQU 00100001b
0105             92   
0105             93   ; These register definitions needed by 'math32.inc'
0030             94   DSEG at 30H
0030             95   x:   ds 4
0034             96   y:   ds 4
0038             97   amb_temp: ds 4 ; ambient temperature read by LM335
003C             98   bcd: ds 5
0041             99   
0041            100   DSEG
0041            101   pwm: ds 1
0042            102   state: ds 1
0043            103   Temp_soak: ds 1
0044            104   Time_soak: ds 1
0045            105   Temp_refl: ds 1
0046            106   Time_refl: ds 1
0047            107   
0047            108   sec: ds 1
0048            109   loop_ten_times: ds 1
0049            110   temp: ds 2
004B            111   
004B            112   
004B            113   FSM1_state: ds 1
004C            114   
004C            115   
004C            116   ;for pwm
004C            117   pwm_counter:  ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
004D            118   
004D            119   seconds:      ds 1 ; a seconds counter attached to Timer 2 ISR
004E            120   
004E            121   
0000            122   BSEG
0000            123   reflow_flag: dbit 1
0001            124   soak_flag: dbit 1
0002            125   mf: dbit 1
0003            126   
0003            127   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            128   PB0: dbit 1
0004            129   PB1: dbit 1
0005            130   PB2: dbit 1
0006            131   PB3: dbit 1
0007            132   PB4: dbit 1
0008            133   PB5: dbit 1
0009            134   PB6: dbit 1
000A            135   PB7: dbit 1
000B            136   
000B            137   
000B            138   BSEG
000B            139   s_flag: dbit 1 ; set to 1 every time a second has passed
000C            140   
000C            141   
000C            142   ; MATH32
                546   $LIST
                144   $LIST
0375            146   
0375            147   ; Blank Macro
                148   Left_blank mac
                149   	mov a, %0
                150   	anl a, #0xf0
                151   	swap a
                152   	jz Left_blank_%M_a
                153   	ljmp %1
                154   Left_blank_%M_a:
                155   	Display_char(#' ')
                156   	mov a, %0
                157   	anl a, #0x0f
                158   	jz Left_blank_%M_b
                159   	ljmp %1
                160   Left_blank_%M_b:
                161   	Display_char(#' ')
                162   endmac
0375            163   
0375            164   
0375            165   ;binary to display 3 digits on lcd screen
0375            166   
0375            167   SendToLCD:
0375 75F064     168            mov b, #100
0378 84         169            div ab
0379 4430       170            orl a, #0x30
037B 1200A0     171            lcall ?WriteData
037E E5F0       172            mov a,b
0380 75F00A     173            mov b,#10
0383 84         174            div ab
0384 4430       175            orl a, #0x30
0386 1200A0     176            lcall ?WriteData
0389 E5F0       177            mov a, b
038B 4430       178            orl a, #0x30
038D 1200A0     179            lcall ?WriteData
0390 22         180            ret
0391            181   ; Send 2 digits to LCD
0391            182   Send2ToLCD:
0391 75F00A     183            mov b,#10
0394 84         184            div ab
0395 4430       185            orl a, #0x30
0397 1200A0     186            lcall ?WriteData
039A E5F0       187            mov a, b
039C 4430       188            orl a, #0x30
039E 1200A0     189            lcall ?WriteData
03A1 22         190            ret
03A2            191   
03A2            192   ; Formatting to display thermocouple temperature
03A2            193   ; Display: 0000.00
03A2            194   Display_formated_BCD_To:
03A2 C000       195            push ar0
03A4 A83F       195            mov r0, bcd+3
03A6 1200EF     195            lcall ?Display_BCD
03A9 D000       195            pop ar0
03AB C000       196            push ar0
03AD A83E       196            mov r0, bcd+2
03AF 1200EF     196            lcall ?Display_BCD
03B2 D000       196            pop ar0
03B4 C0E0       197            push acc
03B6 742E       197            mov a, #'.'
03B8 1200A0     197            lcall ?WriteData
03BB D0E0       197            pop acc
03BD C000       198            push ar0
03BF A83D       198            mov r0, bcd+1
03C1 1200EF     198            lcall ?Display_BCD
03C4 D000       198            pop ar0
03C6            199   
03C6            200   
03C6 22         201            ret
03C7            202            
03C7            203   ; Formatting to display ambient temperature
03C7            204   ; Display: 00.00
03C7            205   Display_formated_BCD_Tj:
03C7 C000       206            push ar0
03C9 A83E       206            mov r0, bcd+2
03CB 1200EF     206            lcall ?Display_BCD
03CE D000       206            pop ar0
03D0 C0E0       207            push acc
03D2 742E       207            mov a, #'.'
03D4 1200A0     207            lcall ?WriteData
03D7 D0E0       207            pop acc
03D9 C000       208            push ar0
03DB A83D       208            mov r0, bcd+1
03DD 1200EF     208            lcall ?Display_BCD
03E0 D000       208            pop ar0
03E2 22         209            ret
03E3            210   
03E3            211   
03E3            212   ; INITIALIZATION SUBROUTINES
03E3            213   Init_All:
03E3            214            ; Configure all the pins for biderectional I/O
03E3 75AC00     215            mov     P3M1, #0x00
03E6 75AD00     216            mov     P3M2, #0x00
03E9 75B300     217            mov     P1M1, #0x00
03EC 75B400     218            mov     P1M2, #0x00
03EF 75B100     219            mov     P0M1, #0x00
03F2 75B200     220            mov     P0M2, #0x00
03F5            221   
03F5 438E10     222            orl     CKCON, #0x10 ; CLK is the input for timer 1
03F8 438780     223            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03FB 759852     224            mov     SCON, #0x52
03FE 53C4DF     225            anl     T3CON, #0b11011111
0401 53890F     226            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0404 438920     227            orl     TMOD, #0x20 ; Timer 1 Mode 2
0407 758DF7     228            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
040A D28E       229            setb TR1
040C            230            
040C            231            ; Using timer 0 for delay functions.  Initialize here:
040C C28C       232            clr     TR0 ; Stop timer 0
040E 438E08     233            orl     CKCON,#0x08 ; CLK is the input for timer 0
0411 5389F0     234            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0414 438901     235            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0417            236            
0417            237            
0417            238            ;Timer 2 for pulse
0417            239            ; Initialize timer 2 for periodic interrupts
0417 75C800     240            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
041A 75CDD7     241            mov TH2, #high(TIMER2_RELOAD)
041D 75CC79     242            mov TL2, #low(TIMER2_RELOAD)
0420            243            ; Set the reload value
0420 75C9A0     244            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0423 75CBD7     245            mov RCMP2H, #high(TIMER2_RELOAD)
0426 75CA79     246            mov RCMP2L, #low(TIMER2_RELOAD)
0429            247            ; Init the free running 10 ms counter to zero
0429 754C00     248            mov pwm_counter, #0
042C            249            ; Enable the timer and interrupts
042C 439B80     250            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
042F D2CA       251       setb TR2  ; Enable timer 2
0431            252   
0431 D2AF       253            setb EA ; Enable global interrupts
0433            254            
0433            255            
0433            256            
0433            257            ; Initialize the pin used by the ADC (P1.1) as input.
0433 43B302     258            orl     P1M1, #0b00000010
0436 53B4FD     259            anl     P1M2, #0b11111101
0439            260   
0439            261            ; Initialize the pin used by the ADC (P3.0) as input.
0439 43AC01     262            orl     P3M1, #0b00000001
043C 53ADFE     263            anl     P3M2, #0b11111110
043F            264            
043F            265            ; Initialize and start the ADC:
043F 53E8F0     266            anl ADCCON0, #0xF0
0442 43E807     267            orl ADCCON0, #0x07 ; Select channel 7
0445            268   
0445 53E2F0     269            anl ADCCON2, #0xF0
0448 43E201     270            orl ADCCON2, #0x01 ; Select channel 1
044B            271   
044B            272            ; AINDIDS select if some pins are analog inputs or digital I/O:
044B 75F600     273            mov AINDIDS, #0x00 ; Disable all analog inputs
044E 43F680     274            orl AINDIDS, #0b10000000 ; P1.1 is analog input
0451 43F601     275            orl AINDIDS, #0b00000001 ; P3.0 is analog input
0454 43E101     276            orl ADCCON1, #0x01 ; Enable ADC
0457            277            
0457 22         278            ret
0458            279            
0458            280            
0458            281   ;---------------------------------;
0458            282   ; ISR for timer 2                 ;
0458            283   ;---------------------------------;
0458            284   Timer2_ISR:
0458 C2CF       285            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
045A C0D0       286            push psw
045C C0E0       287            push acc
045E            288            
045E 054C       289            inc pwm_counter
0460 C3         290            clr c
0461 E541       291            mov a, pwm
0463 954C       292            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0465 B3         293            cpl c
0466 9292       294            mov PWM_OUT, c
0468            295            
0468 E54C       296            mov a, pwm_counter
046A B46407     297            cjne a, #100, Timer2_ISR_done
046D 754C00     298            mov pwm_counter, #0
0470 054D       299            inc seconds ; It is super easy to keep a seconds count here
0472 D20B       300            setb s_flag
0474            301   
0474            302   Timer2_ISR_done:
0474 D0E0       303            pop acc
0476 D0D0       304            pop psw
0478 32         305            reti
0479            306   
0479            307   ; Flash Memory Subroutines
0479            308   ;******************************************************************************
0479            309   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0479            310   ; Data Flash when user code is executed in APROM.
0479            311   ; (The base of this code is listed in the N76E003 user manual)
0479            312   ;******************************************************************************
0479            313   
0479            314   Save_Variables:
0479 C2AF       315            CLR EA  ; MUST disable interrupts for this to work!
047B            316            
047B 75C7AA     317            MOV TA, #0aah ; CHPCON is TA protected
047E 75C755     318            MOV TA, #55h
0481 439F01     319            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
0484            320            
0484 75C7AA     321            MOV TA, #0aah ; IAPUEN is TA protected
0487 75C755     322            MOV TA, #55h
048A 43A501     323            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
048D            324            
048D 75AF22     325            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
0490 75A73F     326            MOV IAPAH, #3fh ; Address high byte of flash page
0493 75A680     327            MOV IAPAL, #80h ; Address low byte
0496 75AEFF     328            MOV IAPFD, #0FFh ; Data to load into the address byte
0499 75C7AA     329            MOV TA, #0aah ; IAPTRG is TA protected
049C 75C755     330            MOV TA, #55h
049F 43A401     331            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
04A2            332            
04A2 75AF21     333            MOV IAPCN, #BYTE_PROGRAM_AP
04A5 75A73F     334            MOV IAPAH, #3fh
04A8            335            
04A8            336            ;Load 3f80h with Temp_soak
04A8 75A680     337            MOV IAPAL, #80h
04AB 8543AE     338            MOV IAPFD, Temp_soak
04AE 75C7AA     339            MOV TA, #0aah
04B1 75C755     340            MOV TA, #55h
04B4 43A401     341            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
04B7            342            
04B7            343            ;Load 3f81h with Time_soak
04B7 75A681     344            MOV IAPAL, #81h
04BA 8544AE     345            MOV IAPFD, Time_soak
04BD 75C7AA     346            MOV TA, #0aah
04C0 75C755     347            MOV TA, #55h
04C3 43A401     348            ORL IAPTRG,#00000001b
04C6            349            
04C6            350            ;Load 3f82h with Temp_refl
04C6 75A682     351            MOV IAPAL, #82h
04C9 8545AE     352            MOV IAPFD, Temp_refl
04CC 75C7AA     353            MOV TA, #0aah
04CF 75C755     354            MOV TA, #55h
04D2 43A401     355            ORL IAPTRG,#00000001b
04D5            356            
04D5            357            ;Load 3f83h with Time_refl
04D5 75A683     358            MOV IAPAL, #83h
04D8 8546AE     359            MOV IAPFD, Time_refl
04DB 75C7AA     360            MOV TA, #0aah
04DE 75C755     361            MOV TA, #55h
04E1 43A401     362            ORL IAPTRG,#00000001b
04E4            363   
04E4            364            ;Load 3f84h with 55h
04E4 75A684     365            MOV IAPAL,#84h
04E7 75AE55     366            MOV IAPFD, #55h
04EA 75C7AA     367            MOV TA, #0aah
04ED 75C755     368            MOV TA, #55h
04F0 43A401     369            ORL IAPTRG, #00000001b
04F3            370   
04F3            371            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
04F3 75A685     372            MOV IAPAL, #85h
04F6 75AEAA     373            MOV IAPFD, #0aah
04F9 75C7AA     374            MOV TA, #0aah
04FC 75C755     375            MOV TA, #55h
04FF 43A401     376            ORL IAPTRG, #00000001b
0502            377   
0502 75C7AA     378            MOV TA, #0aah
0505 75C755     379            MOV TA, #55h
0508 53A5FE     380            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
050B 75C7AA     381            MOV TA, #0aah
050E 75C755     382            MOV TA, #55h
0511 539FFE     383            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0514            384            
0514 D2AF       385            setb EA  ; Re-enable interrupts
0516            386   
0516 22         387            ret
0517            388   
0517            389   Load_Variables:
0517 903F84     390            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
051A E4         391            clr a
051B 93         392            movc a, @a+dptr
051C B4551D     393            cjne a, #0x55, Load_Defaults
051F A3         394            inc dptr      ; Second key value location.  Must be 0xaa
0520 E4         395            clr a
0521 93         396            movc a, @a+dptr
0522 B4AA17     397            cjne a, #0xaa, Load_Defaults
0525            398            
0525 903F80     399            mov dptr, #0x3f80
0528 E4         400            clr a
0529 93         401            movc a, @a+dptr
052A F543       402            mov Temp_soak, a
052C            403            
052C A3         404            inc dptr
052D E4         405            clr a
052E 93         406            movc a, @a+dptr
052F F544       407            mov Time_soak, a
0531            408            
0531 A3         409            inc dptr
0532 E4         410            clr a
0533 93         411            movc a, @a+dptr
0534 F545       412            mov Temp_refl, a
0536            413            
0536 A3         414            inc dptr
0537 E4         415            clr a
0538 93         416            movc a, @a+dptr
0539 F546       417            mov Time_refl, a
053B 22         418            ret
053C            419   
053C            420   Load_Defaults:
053C 7543C8     421            mov Temp_soak, #200
053F 75443C     422            mov Time_soak, #60
0542 7545EB     423            mov Temp_refl, #235
0545 75462D     424            mov Time_refl, #45
0548 22         425            ret
0549            426   
0549            427   putchar:
0549 3099FD     428       jnb TI, putchar
054C C299       429       clr TI
054E F599       430       mov SBUF, a
0550 22         431       ret
0551            432            
0551            433   
0551            434   wait_1ms:
0551 C28C       435            clr     TR0 ; Stop timer 0
0553 C28D       436            clr     TF0 ; Clear overflow flag
0555 758CBF     437            mov     TH0, #high(TIMER0_RELOAD_1MS)
0558 758A28     438            mov     TL0,#low(TIMER0_RELOAD_1MS)
055B D28C       439            setb TR0
055D 308DFD     440            jnb     TF0, $ ; Wait for overflow
0560 22         441            ret
0561            442   
0561            443   ; Wait the number of miliseconds in R2
0561            444   waitms:
0561 120551     445            lcall wait_1ms
0564 DAFB       446            djnz R2, waitms
0566 22         447            ret
0567            448   
0567            449   ADC_to_PB:
0567 53E8F0     450            anl ADCCON0, #0xF0
056A 43E800     451            orl ADCCON0, #0x00 ; Select AIN0
056D            452            
056D C2EF       453            clr ADCF
056F D2EE       454            setb ADCS   ; ADC start trigger signal
0571 30EFFD     455       jnb ADCF, $ ; Wait for conversion complete
0574            456   
0574 D20A       457            setb PB7
0576 D209       458            setb PB6
0578 D208       459            setb PB5
057A D207       460            setb PB4
057C D206       461            setb PB3
057E D205       462            setb PB2
0580 D204       463            setb PB1
0582 D203       464            setb PB0
0584            465            
0584            466            ; Check PB7
0584            467   ADC_to_PB_L7:
0584 C3         468            clr c
0585 E5C3       469            mov a, ADCRH
0587 94F0       470            subb a, #0xf0
0589 4003       471            jc ADC_to_PB_L6
058B C20A       472            clr PB7
058D 22         473            ret
058E            474   
058E            475            ; Check PB6
058E            476   ADC_to_PB_L6:
058E C3         477            clr c
058F E5C3       478            mov a, ADCRH
0591 94D0       479            subb a, #0xd0
0593 4003       480            jc ADC_to_PB_L5
0595 C209       481            clr PB6
0597 22         482            ret
0598            483   
0598            484            ; Check PB5
0598            485   ADC_to_PB_L5:
0598 C3         486            clr c
0599 E5C3       487            mov a, ADCRH
059B 94B0       488            subb a, #0xb0
059D 4003       489            jc ADC_to_PB_L4
059F C208       490            clr PB5
05A1 22         491            ret
05A2            492   
05A2            493            ; Check PB4
05A2            494   ADC_to_PB_L4:
05A2 C3         495            clr c
05A3 E5C3       496            mov a, ADCRH
05A5 9490       497            subb a, #0x90
05A7 4003       498            jc ADC_to_PB_L3
05A9 C207       499            clr PB4
05AB 22         500            ret
05AC            501   
05AC            502            ; Check PB3
05AC            503   ADC_to_PB_L3:
05AC C3         504            clr c
05AD E5C3       505            mov a, ADCRH
05AF 9470       506            subb a, #0x70
05B1 4003       507            jc ADC_to_PB_L2
05B3 C206       508            clr PB3
05B5 22         509            ret
05B6            510   
05B6            511            ; Check PB2
05B6            512   ADC_to_PB_L2:
05B6 C3         513            clr c
05B7 E5C3       514            mov a, ADCRH
05B9 9450       515            subb a, #0x50
05BB 4003       516            jc ADC_to_PB_L1
05BD C205       517            clr PB2
05BF 22         518            ret
05C0            519   
05C0            520            ; Check PB1
05C0            521   ADC_to_PB_L1:
05C0 C3         522            clr c
05C1 E5C3       523            mov a, ADCRH
05C3 9430       524            subb a, #0x30
05C5 4003       525            jc ADC_to_PB_L0
05C7 C204       526            clr PB1
05C9 22         527            ret
05CA            528   
05CA            529            ; Check PB0
05CA            530   ADC_to_PB_L0:
05CA C3         531            clr c
05CB E5C3       532            mov a, ADCRH
05CD 9410       533            subb a, #0x10
05CF 4003       534            jc ADC_to_PB_Done
05D1 C203       535            clr PB0
05D3 22         536            ret
05D4            537            
05D4            538   ADC_to_PB_Done:
05D4            539            ; No puhsbutton pressed         
05D4 22         540            ret
05D5            541   
05D5            542   ; MAIN 
05D5            543   main:
05D5 75817F     544            mov sp, #0x7f
05D8 1203E3     545       lcall Init_All
05DB 1200AA     546       lcall LCD_4BIT
05DE            547       ; initial messages in LCD
05DE C0E0       548            push acc
05E0 7401       548            mov a, #1
05E2 14         548            dec a
05E3 1200EA     548            lcall ?Set_Cursor_1 ; Select column and row
05E6 D0E0       548            pop acc
05E8 C083       549            push dph
05EA C082       549            push dpl
05EC C0E0       549            push acc
05EE 90002E     549            mov dptr, #temperature_message
05F1 1200DD     549            lcall ?Send_Constant_String
05F4 D0E0       549            pop acc
05F6 D082       549            pop dpl
05F8 D083       549            pop dph
05FA C0E0       550            push acc
05FC 7401       550            mov a, #1
05FE 14         550            dec a
05FF 1200E8     550            lcall ?Set_Cursor_2 ; Select column and row
0602 D0E0       550            pop acc
0604 C083       551            push dph
0606 C082       551            push dpl
0608 C0E0       551            push acc
060A 900043     551            mov dptr, #reflow_message
060D 1200DD     551            lcall ?Send_Constant_String
0610 D0E0       551            pop acc
0612 D082       551            pop dpl
0614 D083       551            pop dph
0616 C0E0       552            push acc
0618 7405       552            mov a, #5
061A 14         552            dec a
061B 1200E8     552            lcall ?Set_Cursor_2 ; Select column and row
061E D0E0       552            pop acc
0620 C083       553            push dph
0622 C082       553            push dpl
0624 C0E0       553            push acc
0626 90003F     553            mov dptr, #comma
0629 1200DD     553            lcall ?Send_Constant_String
062C D0E0       553            pop acc
062E D082       553            pop dpl
0630 D083       553            pop dph
0632 C0E0       554            push acc
0634 7408       554            mov a, #8
0636 14         554            dec a
0637 1200E8     554            lcall ?Set_Cursor_2 ; Select column and row
063A D0E0       554            pop acc
063C C083       555            push dph
063E C082       555            push dpl
0640 C0E0       555            push acc
0642 900041     555            mov dptr, #soak_message
0645 1200DD     555            lcall ?Send_Constant_String
0648 D0E0       555            pop acc
064A D082       555            pop dpl
064C D083       555            pop dph
064E C0E0       556            push acc
0650 740C       556            mov a, #12
0652 14         556            dec a
0653 1200E8     556            lcall ?Set_Cursor_2 ; Select column and row
0656 D0E0       556            pop acc
0658            556   
0658 C083       557            push dph
065A C082       557            push dpl
065C C0E0       557            push acc
065E 90003F     557            mov dptr, #comma
0661 1200DD     557            lcall ?Send_Constant_String
0664 D0E0       557            pop acc
0666 D082       557            pop dpl
0668 D083       557            pop dph
066A            558   
066A 754B00     559            mov FSM1_state, #0
066D            560   
066D 120517     561            lcall Load_Variables ; Load variables from flash memory
0670            562   
0670 754700     563            mov sec, #0
0673 754800     564            mov loop_ten_times, #0
0676            565   
0676 C200       566            clr reflow_flag ; start on temp
0678 C201       567            clr soak_flag ; start on temp
067A            568   
067A            569   Forever:
067A            570   
067A            571   
067A            572   ; Example branch for decreasing any given value 
067A            573   ; This set of code will increase the ones columnn of any given 
067A            574   ; variable. ie. reflow_temp_ones, reflow_time_ones
067A            575   ; the 10s and 100s column will update in response to increasing 
067A            576   ; the ones column beyond 9.
067A            577   
067A            578   ; SOAK ;
067A            579   soak_toggle:
067A 200702     580            jb PB4, check_soak_toggle
067D B201       581            cpl soak_flag ; if button is pressed, change flag
067F            582   
067F            583   check_soak_toggle: 
067F 200110     584            jb soak_flag, turn_soak_to_time
0682            585   
0682            586   turn_soak_to_temp:
0682            587            ; will use the same logic for the other pushbuttons
0682            588   ; This example will use Temp_soak for this example
0682            589            decrease_soak_temp:
0682 200405     590            jb PB1, increase_soak_temp
0685 1543       591       dec Temp_soak
0687 0206AC     592            ljmp reflow_toggle
068A            593            
068A            594            increase_soak_temp:
068A 20051F     595            jb PB2, reflow_toggle 
068D 0543       596            inc Temp_soak
068F 0206AC     597            ljmp reflow_toggle
0692            598   
0692            599   turn_soak_to_time:
0692            600            decrease_soak_time:
0692 20040A     601            jb PB1, increase_soak_time
0695 E544       602            mov a, Time_soak
0697 2499       603       add a, #0x99
0699 D4         604            da a
069A F544       605       mov Time_soak, a
069C 0206AC     606            ljmp reflow_toggle
069F            607            
069F            608            increase_soak_time:
069F 20050A     609            jb PB2, reflow_toggle
06A2 E544       610            mov a, Time_soak
06A4 2401       611            add a, #1
06A6 D4         612            da a 
06A7 F544       613            mov Time_soak, a
06A9 0206AC     614            ljmp reflow_toggle
06AC            615   
06AC            616   ; REFLOW ;
06AC            617   reflow_toggle:
06AC 200A02     618            jb PB7, check_reflow_toggle
06AF B200       619            cpl reflow_flag ; if button is pressed, change flag
06B1            620   
06B1            621   check_reflow_toggle: 
06B1 200010     622            jb reflow_flag, turn_reflow_to_time
06B4            623   
06B4            624   turn_reflow_to_temp:
06B4            625            ; will use the same logic for the other pushbuttons
06B4            626   ; This example will use Temp_soak for this example
06B4            627   
06B4            628            decrease_reflow_temp:
06B4 200905     629            jb PB6, increase_reflow_temp
06B7 1545       630       dec Temp_refl
06B9 0206DE     631            ljmp start_stop
06BC            632            
06BC            633            increase_reflow_temp:
06BC 20081F     634            jb PB5, start_stop
06BF 0545       635            inc Temp_refl
06C1 0206DE     636            ljmp start_stop
06C4            637   
06C4            638   
06C4            639   turn_reflow_to_time:
06C4            640            
06C4            641            decrease_reflow_time:
06C4 20090A     642            jb PB6, increase_reflow_time
06C7 E546       643            mov a, Time_refl
06C9 2499       644       add a, #0x99
06CB D4         645            da a
06CC F546       646       mov Time_refl, a
06CE 0206DE     647            ljmp start_stop
06D1            648            
06D1            649            increase_reflow_time:
06D1 20080A     650            jb PB5, start_stop 
06D4 E546       651            mov a, Time_refl
06D6 2401       652            add a, #1
06D8 D4         653            da a 
06D9 F546       654            mov Time_refl, a
06DB 0206DE     655            ljmp start_stop
06DE            656   
06DE            657   
06DE            658   start_stop:
06DE E545       659            mov a, Temp_refl
06E0 C0E0       660            push acc
06E2 7402       660            mov a, #2
06E4 14         660            dec a
06E5 1200E8     660            lcall ?Set_Cursor_2 ; Select column and row
06E8 D0E0       660            pop acc
06EA 120375     661            lcall SendToLCD
06ED E4         662            clr a
06EE E543       663            mov a, Temp_soak
06F0 C0E0       664            push acc
06F2 7409       664            mov a, #9
06F4 14         664            dec a
06F5 1200E8     664            lcall ?Set_Cursor_2 ; Select column and row
06F8 D0E0       664            pop acc
06FA 120375     665            lcall SendToLCD
06FD E4         666            clr a
06FE E546       667            mov a, Time_refl
0700 C0E0       668            push acc
0702 7406       668            mov a, #6
0704 14         668            dec a
0705 1200E8     668            lcall ?Set_Cursor_2 ; Select column and row
0708 D0E0       668            pop acc
070A 120391     669            lcall Send2ToLCD ; Call subroutine to display 2 digit binary as ASCII on LCD
070D E4         670            clr a
070E E544       671            mov a, Time_soak
0710 C0E0       672            push acc
0712 740D       672            mov a, #13
0714 14         672            dec a
0715 1200E8     672            lcall ?Set_Cursor_2 ; Select column and row
0718 D0E0       672            pop acc
071A 120391     673            lcall Send2ToLCD
071D 20030F     674            jb PB0, continue
0720            675   
0720            676   turn_on:
0720 E54B       677            mov a, FSM1_state
0722 B40005     678            cjne a, #0, turn_off
0725 754B01     679            mov FSM1_state, #1
0728 8005       680            sjmp continue
072A            681   
072A            682   turn_off:
072A 754B00     683            mov FSM1_state, #0
072D 8000       684            sjmp continue
072F            685   
072F            686   
072F            687   continue:
072F 120567     688            lcall ADC_to_PB
0732            689            ;lcall Display_PushButtons_ADC
0732            690            
0732 75E807     691            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
0735 C2EF       692            clr ADCF
0737 D2EE       693            setb ADCS ;  ADC start trigger signal
0739 30EFFD     694       jnb ADCF, $ ; Wait for conversion complete
073C            695       
073C            696       ; Read the ADC result and store in [R1, R0]
073C E5C3       697       mov a, ADCRH   
073E C4         698       swap a
073F C0E0       699       push acc
0741 540F       700       anl a, #0x0f
0743 F9         701       mov R1, a
0744 D0E0       702       pop acc
0746 54F0       703       anl a, #0xf0
0748 45C2       704       orl a, ADCRL
074A F8         705       mov R0, A
074B            706       
074B 75E801     707       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
074E C2EF       708            clr ADCF
0750 D2EE       709            setb ADCS ;  ADC start trigger signal
0752 30EFFD     710       jnb ADCF, $ ; Wait for conversion complete
0755            711       
0755            712       ; Read the ADC result and store in [R4, R3]
0755 E5C3       713       mov a, ADCRH   
0757 C4         714       swap a
0758 C0E0       715       push acc
075A 540F       716       anl a, #0x0f
075C FC         717       mov R4, a
075D D0E0       718       pop acc
075F 54F0       719       anl a, #0xf0
0761 45C2       720       orl a, ADCRL
0763 FB         721       mov R3, A
0764            722       
0764            723            ; Convert to LM335 temperature to voltage
0764 8B30       724            mov x+0, R3
0766 8C31       725            mov x+1, R4
0768 753200     726            mov x+2, #0
076B 753300     727            mov x+3, #0
076E 75347C     728            mov y+0, #low (50300 % 0x10000) 
0771 7535C4     728            mov y+1, #high(50300 % 0x10000) 
0774 753600     728            mov y+2, #low (50300 / 0x10000) 
0777 753700     728            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
077A 12027F     729            lcall mul32
077D 7534FF     730            mov y+0, #low (4095 % 0x10000) 
0780 75350F     730            mov y+1, #high(4095 % 0x10000) 
0783 753600     730            mov y+2, #low (4095 / 0x10000) 
0786 753700     730            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0789 12030C     731            lcall div32
078C 7534D0     732            mov y+0, #low (27600 % 0x10000) 
078F 75356B     732            mov y+1, #high(27600 % 0x10000) 
0792 753600     732            mov y+2, #low (27600 / 0x10000) 
0795 753700     732            mov y+3, #high(27600 / 0x10000) 
0798 1201EB     733            lcall sub32
079B 753464     734            mov y+0, #low (100 % 0x10000) 
079E 753500     734            mov y+1, #high(100 % 0x10000) 
07A1 753600     734            mov y+2, #low (100 / 0x10000) 
07A4 753700     734            mov y+3, #high(100 / 0x10000) 
07A7 12027F     735            lcall mul32
07AA            736            
07AA            737            ; Convert to BCD and display
07AA 120105     738            lcall hex2bcd
07AD C0E0       739            push acc
07AF 740C       739            mov a, #12
07B1 14         739            dec a
07B2 1200EA     739            lcall ?Set_Cursor_1 ; Select column and row
07B5 D0E0       739            pop acc
07B7 1203C7     740            lcall Display_formated_BCD_Tj
07BA            741   
07BA            742            ; Convert value back to hex to use for calculations
07BA 12018E     743            lcall bcd2hex
07BD            744   
07BD            745            ; Storing the ambient temperature
07BD 853038     746            mov amb_temp+0, x+0
07C0 853139     747            mov amb_temp+1, x+1
07C3 85323A     748            mov amb_temp+2, x+2
07C6 85333B     749            mov amb_temp+3, x+3
07C9            750   
07C9            751            ; Convert to thermocouple voltage to temperature
07C9 8830       752            mov x+0, R0
07CB 8931       753            mov x+1, R1
07CD 753200     754            mov x+2, #0
07D0 753300     755            mov x+3, #0
07D3 75347C     756            mov y+0, #low (50300 % 0x10000) 
07D6 7535C4     756            mov y+1, #high(50300 % 0x10000) 
07D9 753600     756            mov y+2, #low (50300 / 0x10000) 
07DC 753700     756            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07DF 12027F     757            lcall mul32
07E2 7534FF     758            mov y+0, #low (4095 % 0x10000) 
07E5 75350F     758            mov y+1, #high(4095 % 0x10000) 
07E8 753600     758            mov y+2, #low (4095 / 0x10000) 
07EB 753700     758            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07EE 12030C     759            lcall div32
07F1 753464     760            mov y+0, #low (100 % 0x10000) 
07F4 753500     760            mov y+1, #high(100 % 0x10000) 
07F7 753600     760            mov y+2, #low (100 / 0x10000) 
07FA 753700     760            mov y+3, #high(100 / 0x10000) 
07FD 12030C     761            lcall div32
0800 753445     762            mov y+0, #low (5189 % 0x10000) 
0803 753514     762            mov y+1, #high(5189 % 0x10000) 
0806 753600     762            mov y+2, #low (5189 / 0x10000) 
0809 753700     762            mov y+3, #high(5189 / 0x10000) 
080C 12027F     763            lcall mul32
080F            764   
080F            765            ; Adding the ambient temperature to oven temperature
080F 853834     766            mov y+0, amb_temp+0
0812 853935     767            mov y+1, amb_temp+1
0815 853A36     768            mov y+2, amb_temp+2
0818 853B37     769            mov y+3, amb_temp+3
081B 1201CA     770            lcall add32
081E            771            
081E            772            ; Convert to BCD and display
081E 120105     773            lcall hex2bcd
0821 C0E0       774            push acc
0823 7403       774            mov a, #3
0825 14         774            dec a
0826 1200EA     774            lcall ?Set_Cursor_1 ; Select column and row
0829 D0E0       774            pop acc
082B 1203A2     775            lcall Display_formated_BCD_To
082E            776            ;---------------------------------;
082E            777            ; Send a BCD number to PuTTY      ;
082E            778            ;---------------------------------
                779   	Send_BCD mac
                780   		push ar0
                781   		mov r0, %0
                782   		lcall ?Send_BCD
                783   		pop ar0
                784   	endmac
082E            785            
082E            786            ?Send_BCD:
082E C0E0       787                    push acc
0830            788                    ; Write most significant digit
0830 E53F       789                    mov a, bcd+3
0832 C4         790                    swap a
0833 540F       791                    anl a, #0fh
0835 4430       792                    orl a, #30h
0837 120549     793                    lcall putchar
083A            794                    ; write least significant digit
083A E53F       795                    mov a, bcd+3
083C 540F       796                    anl a, #0fh
083E 4430       797                    orl a, #30h
0840 120549     798                    lcall putchar
0843            799                    
0843            800                    ; Write most significant digit
0843 E53E       801                    mov a, bcd+2
0845 C4         802                    swap a
0846 540F       803                    anl a, #0fh
0848 4430       804                    orl a, #30h
084A 120549     805                    lcall putchar
084D            806                    ; write least significant digit
084D E53E       807                    mov a, bcd+2
084F 540F       808                    anl a, #0fh
0851 4430       809                    orl a, #30h
0853 120549     810                    lcall putchar
0856 D0E0       811                    pop acc
0858            812            ; Write most significant digit
0858 E53D       813                    mov a, bcd+1
085A C4         814                    swap a
085B 540F       815                    anl a, #0fh
085D 4430       816                    orl a, #30h
085F 120549     817                    lcall putchar
0862            818   
0862            819                    ; Write most significant digit
0862            820   
0862            821            
0862            822            ; Storing the thermocouple temperature into var temp 
0862 753410     823            mov y+0, #low (10000 % 0x10000) 
0865 753527     823            mov y+1, #high(10000 % 0x10000) 
0868 753600     823            mov y+2, #low (10000 / 0x10000) 
086B 753700     823            mov y+3, #high(10000 / 0x10000) 
086E 12030C     824            lcall div32
0871 853049     825            mov temp+0, x+0
0874 85314A     826            mov temp+1, x+1
0877            827            
0877            828   
0877            829   
0877            830            ; Wait 100 ms between readings
0877 7A64       831            mov R2, #100
0879 120561     832            lcall waitms
087C            833            
087C            834   ; STATE MACHINE  
087C            835   FSM1:
087C E54B       836            mov a, FSM1_state
087E            837   
087E            838   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
087E            839   FSM1_state0:
087E B40028     840            cjne a, #0, FSM1_state1_save
0881 C0E0       841            push acc
0883 7410       841            mov a, #16
0885 14         841            dec a
0886 1200E8     841            lcall ?Set_Cursor_2 ; Select column and row
0889 D0E0       841            pop acc
088B C083       842            push dph
088D C082       842            push dpl
088F C0E0       842            push acc
0891 900045     842            mov dptr, #state0
0894 1200DD     842            lcall ?Send_Constant_String
0897 D0E0       842            pop acc
0899 D082       842            pop dpl
089B D083       842            pop dph
089D 754100     843            mov pwm, #0
08A0 754700     844            mov sec, #0
08A3 754800     845            mov loop_ten_times, #0
08A6            846            ;jb PB0, FSM1_state0_done
08A6            847            ;mov FSM1_state, #1
08A6            848   FSM1_state0_done:
08A6 02067A     849            ljmp Forever
08A9            850   
08A9            851   FSM1_state1_save:
08A9 120479     852            lcall Save_Variables ; Save oven settings when heating process starts
08AC 0208AF     853            ljmp FSM1_state1
08AF            854   
08AF            855   ; pre-heat state. Should go to state two when temp reaches Temp_soak     
08AF            856   FSM1_state1:
08AF B40154     857            cjne a, #1, FSM1_state2
08B2 C0E0       858            push acc
08B4 7410       858            mov a, #16
08B6 14         858            dec a
08B7 1200E8     858            lcall ?Set_Cursor_2 ; Select column and row
08BA D0E0       858            pop acc
08BC C083       859            push dph
08BE C082       859            push dpl
08C0 C0E0       859            push acc
08C2 900047     859            mov dptr, #state1
08C5 1200DD     859            lcall ?Send_Constant_String
08C8 D0E0       859            pop acc
08CA D082       859            pop dpl
08CC D083       859            pop dph
08CE            860            
08CE C296       861            clr P1.6
08D0            862            
08D0 754164     863            mov pwm, #100
08D3            864            
08D3            865            ;Failsafe. Returns to state 0 if temperature is not reached in 6 seconds (should be 60 idk how to do it)
08D3 E547       866            mov a, sec
08D5 2401       867            add a, #1
08D7 F547       868            mov sec, a
08D9            869   
08D9 743C       870            mov a, #60
08DB C3         871            clr c
08DC 9547       872            subb a, sec
08DE 5016       873            jnc FSM1_state1_continue
08E0            874   
08E0 E548       875            mov a, loop_ten_times
08E2 2401       876            add a, #1
08E4 F548       877            mov loop_ten_times, a 
08E6 754700     878            mov sec, #0
08E9 7408       879            mov a, #8
08EB C3         880            clr c 
08EC 9548       881            subb a, loop_ten_times
08EE 5006       882            jnc FSM1_state1_continue
08F0            883   
08F0 754B00     884            mov FSM1_state, #0
08F3 02067A     885            ljmp Forever
08F6            886   
08F6            887   FSM1_state1_continue:
08F6            888            ; These two lines are temporary. temp should be read from the thermocouple wire
08F6            889            ;mov Temp_soak, #100
08F6            890            
08F6 E543       891            mov a, Temp_soak
08F8 D3         892            setb c
08F9 9549       893            subb a, temp
08FB 5006       894            jnc FSM1_state1_done
08FD 754800     895            mov loop_ten_times, #0
0900 754B02     896            mov FSM1_state, #2
0903            897   FSM1_state1_done:
0903 02067A     898            ljmp Forever
0906            899   
0906            900   ; State 2
0906            901   FSM1_state2:
0906 D296       902            setb P1.6 ;speaker
0908 B40245     903            cjne a, #2, FSM1_state3
090B C0E0       904            push acc
090D 7410       904            mov a, #16
090F 14         904            dec a
0910 1200E8     904            lcall ?Set_Cursor_2 ; Select column and row
0913 D0E0       904            pop acc
0915 C083       905            push dph
0917 C082       905            push dpl
0919 C0E0       905            push acc
091B 900049     905            mov dptr, #state2
091E 1200DD     905            lcall ?Send_Constant_String
0921 D0E0       905            pop acc
0923 D082       905            pop dpl
0925 D083       905            pop dph
0927 754114     906            mov pwm, #20
092A            907            
092A E547       908            mov a, sec
092C 2401       909            add a, #1
092E F547       910            mov sec, a
0930            911   
0930 E544       912            mov a, Time_soak
0932 C3         913            clr c
0933 9547       914            subb a, sec
0935 5013       915            jnc FSM1_state2_done
0937            916   
0937 E548       917            mov a, loop_ten_times
0939 2401       918            add a, #1
093B F548       919            mov loop_ten_times, a 
093D 754700     920            mov sec, #0
0940 7405       921            mov a, #5
0942 C3         922            clr c 
0943 9548       923            subb a, loop_ten_times
0945 5003       924            jnc FSM1_state2_done
0947            925   
0947 754B03     926            mov FSM1_state, #3
094A            927   FSM1_state2_done:
094A 02067A     928            ljmp Forever
094D            929   
094D            930   ;DELETE
094D            931   jump:
094D 02087E     932   ljmp FSM1_state0         
0950            933   
0950            934   ;State 3
0950            935   FSM1_state3:
0950 B40332     936            cjne a, #3, FSM1_state4
0953 C0E0       937            push acc
0955 7410       937            mov a, #16
0957 14         937            dec a
0958 1200E8     937            lcall ?Set_Cursor_2 ; Select column and row
095B D0E0       937            pop acc
095D C083       938            push dph
095F C082       938            push dpl
0961 C0E0       938            push acc
0963 90004B     938            mov dptr, #state3
0966 1200DD     938            lcall ?Send_Constant_String
0969 D0E0       938            pop acc
096B D082       938            pop dpl
096D D083       938            pop dph
096F 754164     939            mov pwm, #100
0972 754700     940            mov sec, #0
0975 754800     941            mov loop_ten_times, #0
0978            942            
0978            943            
0978 E545       944            mov a, Temp_refl
097A C3         945            clr c
097B 9549       946            subb a, temp
097D 5003       947            jnc FSM1_state3_done
097F 754B04     948            mov FSM1_state, #4
0982            949   FSM1_state3_done:
0982 02067A     950            ljmp Forever
0985            951   
0985            952   
0985            953   ;State 4
0985            954   FSM1_state4:
0985 B40442     955            cjne a, #4, FSM1_state5
0988 C0E0       956            push acc
098A 7410       956            mov a, #16
098C 14         956            dec a
098D 1200E8     956            lcall ?Set_Cursor_2 ; Select column and row
0990 D0E0       956            pop acc
0992 C083       957            push dph
0994 C082       957            push dpl
0996 C0E0       957            push acc
0998 90004D     957            mov dptr, #state4
099B 1200DD     957            lcall ?Send_Constant_String
099E D0E0       957            pop acc
09A0 D082       957            pop dpl
09A2 D083       957            pop dph
09A4 754114     958            mov pwm, #20
09A7            959            
09A7 E547       960            mov a, sec
09A9 2401       961            add a, #1
09AB F547       962            mov sec, a
09AD            963            
09AD E546       964            mov a, Time_refl
09AF C3         965            clr c
09B0 9547       966            subb a,sec
09B2 5013       967            jnc FSM1_state4_done
09B4            968   
09B4 E548       969            mov a, loop_ten_times
09B6 2401       970            add a, #1
09B8 F548       971            mov loop_ten_times, a 
09BA 754700     972            mov sec, #0
09BD 7405       973            mov a, #5
09BF C3         974            clr c 
09C0 9548       975            subb a, loop_ten_times
09C2 5003       976            jnc FSM1_state4_done
09C4            977   
09C4 754B05     978            mov FSM1_state, #5
09C7            979   FSM1_state4_done:
09C7 02067A     980            ljmp Forever
09CA            981            
09CA            982   FSM1_state5:
09CA B40580     983            cjne a, #5, jump
09CD C0E0       984            push acc
09CF 7410       984            mov a, #16
09D1 14         984            dec a
09D2 1200E8     984            lcall ?Set_Cursor_2 ; Select column and row
09D5 D0E0       984            pop acc
09D7 C083       985            push dph
09D9 C082       985            push dpl
09DB C0E0       985            push acc
09DD 90004F     985            mov dptr, #state5
09E0 1200DD     985            lcall ?Send_Constant_String
09E3 D0E0       985            pop acc
09E5 D082       985            pop dpl
09E7 D083       985            pop dph
09E9 754100     986            mov pwm, #0
09EC            987            
09EC            988            
09EC 743C       989            mov a, #60
09EE C3         990            clr c
09EF 9549       991            subb a, temp
09F1 4003       992            jc FSM1_state5_done
09F3 754B00     993            mov FSM1_state,#0
09F6            994   FSM1_state5_done:
09F6 120479     995            lcall Save_Variables ; Save variables in flash memory
09F9 02067A     996            ljmp Forever
09FC            997            
09FC            998   
09FC            999   
09FC           1000   ;Any additions to be checked
09FC           1001   EN
