                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 020532      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014             45   
0014 3000        46   state0:     db '0', 0
0016 3100        47   state1:     db '1', 0
0018 3200        48   state2:     db '2', 0
001A 3300        49   state3:     db '3', 0
001C 3400        50   state4:     db '4', 0
001E 3500        51   state5:     db '5', 0
0020             52   
0020             53   cseg
0020             54   
0020             55   ; SYMBOLIC CONSTANTS
0020             56   
0020             57   ; INPUTS
0020             58   tempsensor_in equ P3.0
0020             59   thermocouple_in equ P1.1
0020             60   
0020             61   ; OUTPUTS
0020             62   oven_out equ P1.2
0020             63   speaker_out equ P1.6
0020             64   
0020             65   CSEG
0020             66   ; LCD
0020             67   LCD_RS equ P1.3
0020             68   LCD_E equ P1.4
0020             69   LCD_D4 equ P0.0
0020             70   LCD_D5 equ P0.1
0020             71   LCD_D6 equ P0.2
0020             72   LCD_D7 equ P0.3
0020             73   
                 75   	$LIST
00D4             77   
00D4             78   ; Flash instructions
00D4             79   PAGE_ERASE_AP   EQU 00100010b
00D4             80   BYTE_PROGRAM_AP EQU 00100001b
00D4             81   
00D4             82   ; These register definitions needed by 'math32.inc'
0030             83   DSEG at 30H
0030             84   x:   ds 4
0034             85   y:   ds 4
0038             86   amb_temp: ds 4 ; ambient temperature read by LM335
003C             87   bcd: ds 5
0041             88   
0041             89   DSEG
0041             90   pwm: ds 1
0042             91   state: ds 1
0043             92   temp_soak: ds 1
0044             93   Time_soak: ds 1
0045             94   Temp_refl: ds 1
0046             95   Time_refl: ds 1
0047             96   
0047             97   sec: ds 1
0048             98   temp: ds 2
004A             99   
004A            100   
004A            101   FSM1_state: ds 1
004B            102   
0000            103   BSEG
0000            104   mf: dbit 1
0001            105   
0001            106   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0001            107   PB0: dbit 1
0002            108   PB1: dbit 1
0003            109   PB2: dbit 1
0004            110   PB3: dbit 1
0005            111   PB4: dbit 1
0006            112   PB5: dbit 1
0007            113   PB6: dbit 1
0008            114   PB7: dbit 1
0009            115   
0009            116   ; MATH32
                546   $LIST
                118   $LIST
0344            120   
0344            121   ; Blank Macro
                122   Left_blank mac
                123   	mov a, %0
                124   	anl a, #0xf0
                125   	swap a
                126   	jz Left_blank_%M_a
                127   	ljmp %1
                128   Left_blank_%M_a:
                129   	Display_char(#' ')
                130   	mov a, %0
                131   	anl a, #0x0f
                132   	jz Left_blank_%M_b
                133   	ljmp %1
                134   Left_blank_%M_b:
                135   	Display_char(#' ')
                136   endmac
0344            137   
0344            138   ; Formatting to display thermocouple temperature
0344            139   ; Display: 0000.00
0344            140   Display_formated_BCD_To:
0344 C000       141            push ar0
0346 A83F       141            mov r0, bcd+3
0348 1200BE     141            lcall ?Display_BCD
034B D000       141            pop ar0
034D C000       142            push ar0
034F A83E       142            mov r0, bcd+2
0351 1200BE     142            lcall ?Display_BCD
0354 D000       142            pop ar0
0356 C0E0       143            push acc
0358 742E       143            mov a, #'.'
035A 12006F     143            lcall ?WriteData
035D D0E0       143            pop acc
035F C000       144            push ar0
0361 A83D       144            mov r0, bcd+1
0363 1200BE     144            lcall ?Display_BCD
0366 D000       144            pop ar0
0368            145   
0368            146   
0368 22         147            ret
0369            148            
0369            149   ; Formatting to display ambient temperature
0369            150   ; Display: 00.00
0369            151   Display_formated_BCD_Tj:
0369 C000       152            push ar0
036B A83E       152            mov r0, bcd+2
036D 1200BE     152            lcall ?Display_BCD
0370 D000       152            pop ar0
0372 C0E0       153            push acc
0374 742E       153            mov a, #'.'
0376 12006F     153            lcall ?WriteData
0379 D0E0       153            pop acc
037B C000       154            push ar0
037D A83D       154            mov r0, bcd+1
037F 1200BE     154            lcall ?Display_BCD
0382 D000       154            pop ar0
0384 22         155            ret
0385            156   
0385            157   
0385            158   ; INITIALIZATION SUBROUTINES
0385            159   Init_All:
0385            160            ; Configure all the pins for biderectional I/O
0385 75AC00     161            mov     P3M1, #0x00
0388 75AD00     162            mov     P3M2, #0x00
038B 75B300     163            mov     P1M1, #0x00
038E 75B400     164            mov     P1M2, #0x00
0391 75B100     165            mov     P0M1, #0x00
0394 75B200     166            mov     P0M2, #0x00
0397            167   
0397 438E10     168            orl     CKCON, #0x10 ; CLK is the input for timer 1
039A 438780     169            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
039D 759852     170            mov     SCON, #0x52
03A0 53C4DF     171            anl     T3CON, #0b11011111
03A3 53890F     172            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03A6 438920     173            orl     TMOD, #0x20 ; Timer 1 Mode 2
03A9 758DF7     174            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03AC D28E       175            setb TR1
03AE            176            
03AE            177            ; Using timer 0 for delay functions.  Initialize here:
03AE C28C       178            clr     TR0 ; Stop timer 0
03B0 438E08     179            orl     CKCON,#0x08 ; CLK is the input for timer 0
03B3 5389F0     180            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03B6 438901     181            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03B9            182            
03B9            183            ; Initialize the pin used by the ADC (P1.1) as input.
03B9 43B302     184            orl     P1M1, #0b00000010
03BC 53B4FD     185            anl     P1M2, #0b11111101
03BF            186   
03BF            187            ; Initialize the pin used by the ADC (P3.0) as input.
03BF 43AC01     188            orl     P3M1, #0b00000001
03C2 53ADFE     189            anl     P3M2, #0b11111110
03C5            190            
03C5            191            ; Initialize and start the ADC:
03C5 53E8F0     192            anl ADCCON0, #0xF0
03C8 43E807     193            orl ADCCON0, #0x07 ; Select channel 7
03CB            194   
03CB 53E2F0     195            anl ADCCON2, #0xF0
03CE 43E201     196            orl ADCCON2, #0x01 ; Select channel 1
03D1            197   
03D1            198            ; AINDIDS select if some pins are analog inputs or digital I/O:
03D1 75F600     199            mov AINDIDS, #0x00 ; Disable all analog inputs
03D4 43F680     200            orl AINDIDS, #0b10000000 ; P1.1 is analog input
03D7 43F601     201            orl AINDIDS, #0b00000001 ; P3.0 is analog input
03DA 43E101     202            orl ADCCON1, #0x01 ; Enable ADC
03DD            203            
03DD 22         204            ret
03DE            205   
03DE            206   ; Flash Memory Subroutines
03DE            207   ;******************************************************************************
03DE            208   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
03DE            209   ; Data Flash when user code is executed in APROM.
03DE            210   ; (The base of this code is listed in the N76E003 user manual)
03DE            211   ;******************************************************************************
03DE            212   
03DE            213   Save_Variables:
03DE C2AF       214            CLR EA  ; MUST disable interrupts for this to work!
03E0            215            
03E0 75C7AA     216            MOV TA, #0aah ; CHPCON is TA protected
03E3 75C755     217            MOV TA, #55h
03E6 439F01     218            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
03E9            219            
03E9 75C7AA     220            MOV TA, #0aah ; IAPUEN is TA protected
03EC 75C755     221            MOV TA, #55h
03EF 43A501     222            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
03F2            223            
03F2 75AF22     224            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
03F5 75A73F     225            MOV IAPAH, #3fh ; Address high byte
03F8 75A680     226            MOV IAPAL, #80h ; Address low byte
03FB 75AEFF     227            MOV IAPFD, #0FFh ; Data to load into the address byte
03FE 75C7AA     228            MOV TA, #0aah ; IAPTRG is TA protected
0401 75C755     229            MOV TA, #55h
0404 43A401     230            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0407            231            
0407 75AF21     232            MOV IAPCN, #BYTE_PROGRAM_AP
040A 75A73F     233            MOV IAPAH, #3fh
040D            234            
040D            235            ;Load 3f80h with temp_soak
040D 75A680     236            MOV IAPAL, #80h
0410 8543AE     237            MOV IAPFD, temp_soak
0413 75C7AA     238            MOV TA, #0aah
0416 75C755     239            MOV TA, #55h
0419 43A401     240            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
041C            241            
041C            242            ;Load 3f81h with Time_soak
041C 75A681     243            MOV IAPAL, #81h
041F 8544AE     244            MOV IAPFD, Time_soak
0422 75C7AA     245            MOV TA, #0aah
0425 75C755     246            MOV TA, #55h
0428 43A401     247            ORL IAPTRG,#00000001b
042B            248            
042B            249            ;Load 3f82h with Temp_refl
042B 75A682     250            MOV IAPAL, #82h
042E 8545AE     251            MOV IAPFD, Temp_refl
0431 75C7AA     252            MOV TA, #0aah
0434 75C755     253            MOV TA, #55h
0437 43A401     254            ORL IAPTRG,#00000001b
043A            255            
043A            256            ;Load 3f83h with Time_refl
043A 75A683     257            MOV IAPAL, #83h
043D 8546AE     258            MOV IAPFD, Time_refl
0440 75C7AA     259            MOV TA, #0aah
0443 75C755     260            MOV TA, #55h
0446 43A401     261            ORL IAPTRG,#00000001b
0449            262   
0449            263            ;Load 3f84h with 55h
0449 75A684     264            MOV IAPAL,#84h
044C 75AE55     265            MOV IAPFD, #55h
044F 75C7AA     266            MOV TA, #0aah
0452 75C755     267            MOV TA, #55h
0455 43A401     268            ORL IAPTRG, #00000001b
0458            269   
0458            270            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
0458 75A685     271            MOV IAPAL, #85h
045B 75AEAA     272            MOV IAPFD, #0aah
045E 75C7AA     273            MOV TA, #0aah
0461 75C755     274            MOV TA, #55h
0464 43A401     275            ORL IAPTRG, #00000001b
0467            276   
0467 75C7AA     277            MOV TA, #0aah
046A 75C755     278            MOV TA, #55h
046D 53A5FE     279            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0470 75C7AA     280            MOV TA, #0aah
0473 75C755     281            MOV TA, #55h
0476 539FFE     282            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0479            283            
0479 D2AF       284            setb EA  ; Re-enable interrupts
047B            285   
047B 22         286            ret
047C            287   
047C            288   Load_Variables:
047C 903F84     289            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
047F E4         290            clr a
0480 93         291            movc a, @a+dptr
0481 B4551D     292            cjne a, #0x55, Load_Defaults
0484 A3         293            inc dptr      ; Second key value location.  Must be 0xaa
0485 E4         294            clr a
0486 93         295            movc a, @a+dptr
0487 B4AA17     296            cjne a, #0xaa, Load_Defaults
048A            297            
048A 903F80     298            mov dptr, #0x3f80
048D E4         299            clr a
048E 93         300            movc a, @a+dptr
048F F543       301            mov temp_soak, a
0491            302            
0491 A3         303            inc dptr
0492 E4         304            clr a
0493 93         305            movc a, @a+dptr
0494 F544       306            mov Time_soak, a
0496            307            
0496 A3         308            inc dptr
0497 E4         309            clr a
0498 93         310            movc a, @a+dptr
0499 F545       311            mov Temp_refl, a
049B            312            
049B A3         313            inc dptr
049C E4         314            clr a
049D 93         315            movc a, @a+dptr
049E F546       316            mov Time_refl, a
04A0 22         317            ret
04A1            318   
04A1            319   Load_Defaults:
04A1 754301     320            mov temp_soak, #1
04A4 754402     321            mov Time_soak, #2
04A7 754503     322            mov Temp_refl, #3
04AA 754604     323            mov Time_refl, #4
04AD 22         324            ret
04AE            325   
04AE            326   wait_1ms:
04AE C28C       327            clr     TR0 ; Stop timer 0
04B0 C28D       328            clr     TF0 ; Clear overflow flag
04B2 758CBF     329            mov     TH0, #high(TIMER0_RELOAD_1MS)
04B5 758A28     330            mov     TL0,#low(TIMER0_RELOAD_1MS)
04B8 D28C       331            setb TR0
04BA 308DFD     332            jnb     TF0, $ ; Wait for overflow
04BD 22         333            ret
04BE            334   
04BE            335   ; Wait the number of miliseconds in R2
04BE            336   waitms:
04BE 1204AE     337            lcall wait_1ms
04C1 DAFB       338            djnz R2, waitms
04C3 22         339            ret
04C4            340   
04C4            341   ADC_to_PB:
04C4 53E8F0     342            anl ADCCON0, #0xF0
04C7 43E800     343            orl ADCCON0, #0x00 ; Select AIN0
04CA            344            
04CA C2EF       345            clr ADCF
04CC D2EE       346            setb ADCS   ; ADC start trigger signal
04CE 30EFFD     347       jnb ADCF, $ ; Wait for conversion complete
04D1            348   
04D1 D208       349            setb PB7
04D3 D207       350            setb PB6
04D5 D206       351            setb PB5
04D7 D205       352            setb PB4
04D9 D204       353            setb PB3
04DB D203       354            setb PB2
04DD D202       355            setb PB1
04DF D201       356            setb PB0
04E1            357            
04E1            358            ; Check PB7
04E1            359   ADC_to_PB_L7:
04E1 C3         360            clr c
04E2 E5C3       361            mov a, ADCRH
04E4 94F0       362            subb a, #0xf0
04E6 4003       363            jc ADC_to_PB_L6
04E8 C208       364            clr PB7
04EA 22         365            ret
04EB            366   
04EB            367            ; Check PB6
04EB            368   ADC_to_PB_L6:
04EB C3         369            clr c
04EC E5C3       370            mov a, ADCRH
04EE 94D0       371            subb a, #0xd0
04F0 4003       372            jc ADC_to_PB_L5
04F2 C207       373            clr PB6
04F4 22         374            ret
04F5            375   
04F5            376            ; Check PB5
04F5            377   ADC_to_PB_L5:
04F5 C3         378            clr c
04F6 E5C3       379            mov a, ADCRH
04F8 94B0       380            subb a, #0xb0
04FA 4003       381            jc ADC_to_PB_L4
04FC C206       382            clr PB5
04FE 22         383            ret
04FF            384   
04FF            385            ; Check PB4
04FF            386   ADC_to_PB_L4:
04FF C3         387            clr c
0500 E5C3       388            mov a, ADCRH
0502 9490       389            subb a, #0x90
0504 4003       390            jc ADC_to_PB_L3
0506 C205       391            clr PB4
0508 22         392            ret
0509            393   
0509            394            ; Check PB3
0509            395   ADC_to_PB_L3:
0509 C3         396            clr c
050A E5C3       397            mov a, ADCRH
050C 9470       398            subb a, #0x70
050E 4003       399            jc ADC_to_PB_L2
0510 C204       400            clr PB3
0512 22         401            ret
0513            402   
0513            403            ; Check PB2
0513            404   ADC_to_PB_L2:
0513 C3         405            clr c
0514 E5C3       406            mov a, ADCRH
0516 9450       407            subb a, #0x50
0518 4003       408            jc ADC_to_PB_L1
051A C203       409            clr PB2
051C 22         410            ret
051D            411   
051D            412            ; Check PB1
051D            413   ADC_to_PB_L1:
051D C3         414            clr c
051E E5C3       415            mov a, ADCRH
0520 9430       416            subb a, #0x30
0522 4003       417            jc ADC_to_PB_L0
0524 C202       418            clr PB1
0526 22         419            ret
0527            420   
0527            421            ; Check PB0
0527            422   ADC_to_PB_L0:
0527 C3         423            clr c
0528 E5C3       424            mov a, ADCRH
052A 9410       425            subb a, #0x10
052C 4003       426            jc ADC_to_PB_Done
052E C201       427            clr PB0
0530 22         428            ret
0531            429            
0531            430   ADC_to_PB_Done:
0531            431            ; No puhsbutton pressed         
0531 22         432            ret
0532            433   
0532            434   ; MAIN 
0532            435   main:
0532 75817F     436            mov sp, #0x7f
0535 120385     437       lcall Init_All
0538 120079     438       lcall LCD_4BIT
053B            439       ; initial messages in LCD
053B C0E0       440            push acc
053D 7401       440            mov a, #1
053F 14         440            dec a
0540 1200B9     440            lcall ?Set_Cursor_1 ; Select column and row
0543 D0E0       440            pop acc
0545 C083       441            push dph
0547 C082       441            push dpl
0549 C0E0       441            push acc
054B 900003     441            mov dptr, #temperature_message
054E 1200AC     441            lcall ?Send_Constant_String
0551 D0E0       441            pop acc
0553 D082       441            pop dpl
0555 D083       441            pop dph
0557            442   
0557 754A00     443            mov FSM1_state, #0
055A 754332     444       mov Temp_soak, #50
055D 75443C     445            mov Time_soak, #60
0560 754500     446            mov Temp_refl, #0
0563 75462D     447            mov Time_refl, #45
0566 754700     448            mov sec, #0
0569            449   
0569            450   Forever:
0569 20070D     451            jb PB6, increase
056C            452   
056C            453   ; Example branch for decreasing any given value 
056C            454   ; This set of code will increase the ones columnn of any given 
056C            455   ; variable. ie. reflow_temp_ones, reflow_time_ones
056C            456   ; the 10s and 100s column will update in response to increasing 
056C            457   ; the ones column beyond 9.
056C            458   
056C            459   ; will use the same logic for the other pushbuttons
056C            460   ; This example will use temp_soak for this example
056C            461   decrease:
056C 200617     462            jb PB5, continue1
056F E545       463            mov a, Temp_refl
0571 9401       464       subb a, #1
0573 D4         465            da a
0574 F545       466       mov Temp_refl, a
0576 020586     467            ljmp continue1
0579            468   increase:
0579 20060A     469   jb PB5, continue1
057C E545       470            mov a, Temp_refl
057E 9401       471       subb a, #1
0580 D4         472            da a
0581 F545       473       mov Temp_refl, a
0583 020586     474            ljmp continue1
0586            475   
0586            476   continue1:
0586 C0E0       477            push acc
0588 7401       477            mov a, #1
058A 14         477            dec a
058B 1200B7     477            lcall ?Set_Cursor_2 ; Select column and row
058E D0E0       477            pop acc
0590 C000       478            push ar0
0592 A845       478            mov r0, Temp_refl
0594 1200BE     478            lcall ?Display_BCD
0597 D000       478            pop ar0
0599 20010F     479            jb PB0, continue
059C            480   
059C            481   turn_on:
059C E54A       482            mov a, FSM1_state
059E B40005     483            cjne a, #0, turn_off
05A1 754A01     484            mov FSM1_state, #1
05A4 8005       485            sjmp continue
05A6            486   
05A6            487   turn_off:
05A6 754A00     488            mov FSM1_state, #0
05A9 8000       489            sjmp continue
05AB            490   
05AB            491   continue:
05AB 1204C4     492            lcall ADC_to_PB
05AE            493            ;lcall Display_PushButtons_ADC
05AE            494            
05AE 75E807     495            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
05B1 C2EF       496            clr ADCF
05B3 D2EE       497            setb ADCS ;  ADC start trigger signal
05B5 30EFFD     498       jnb ADCF, $ ; Wait for conversion complete
05B8            499       
05B8            500       ; Read the ADC result and store in [R1, R0]
05B8 E5C3       501       mov a, ADCRH   
05BA C4         502       swap a
05BB C0E0       503       push acc
05BD 540F       504       anl a, #0x0f
05BF F9         505       mov R1, a
05C0 D0E0       506       pop acc
05C2 54F0       507       anl a, #0xf0
05C4 45C2       508       orl a, ADCRL
05C6 F8         509       mov R0, A
05C7            510       
05C7 75E801     511       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
05CA C2EF       512            clr ADCF
05CC D2EE       513            setb ADCS ;  ADC start trigger signal
05CE 30EFFD     514       jnb ADCF, $ ; Wait for conversion complete
05D1            515       
05D1            516       ; Read the ADC result and store in [R4, R3]
05D1 E5C3       517       mov a, ADCRH   
05D3 C4         518       swap a
05D4 C0E0       519       push acc
05D6 540F       520       anl a, #0x0f
05D8 FC         521       mov R4, a
05D9 D0E0       522       pop acc
05DB 54F0       523       anl a, #0xf0
05DD 45C2       524       orl a, ADCRL
05DF FB         525       mov R3, A
05E0            526       
05E0            527            ; Convert to LM335 temperature to voltage
05E0 8B30       528            mov x+0, R3
05E2 8C31       529            mov x+1, R4
05E4 753200     530            mov x+2, #0
05E7 753300     531            mov x+3, #0
05EA 75347C     532            mov y+0, #low (50300 % 0x10000) 
05ED 7535C4     532            mov y+1, #high(50300 % 0x10000) 
05F0 753600     532            mov y+2, #low (50300 / 0x10000) 
05F3 753700     532            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
05F6 12024E     533            lcall mul32
05F9 7534FF     534            mov y+0, #low (4095 % 0x10000) 
05FC 75350F     534            mov y+1, #high(4095 % 0x10000) 
05FF 753600     534            mov y+2, #low (4095 / 0x10000) 
0602 753700     534            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0605 1202DB     535            lcall div32
0608 7534D0     536            mov y+0, #low (27600 % 0x10000) 
060B 75356B     536            mov y+1, #high(27600 % 0x10000) 
060E 753600     536            mov y+2, #low (27600 / 0x10000) 
0611 753700     536            mov y+3, #high(27600 / 0x10000) 
0614 1201BA     537            lcall sub32
0617 753464     538            mov y+0, #low (100 % 0x10000) 
061A 753500     538            mov y+1, #high(100 % 0x10000) 
061D 753600     538            mov y+2, #low (100 / 0x10000) 
0620 753700     538            mov y+3, #high(100 / 0x10000) 
0623 12024E     539            lcall mul32
0626            540            
0626            541            ; Convert to BCD and display
0626 1200D4     542            lcall hex2bcd
0629 C0E0       543            push acc
062B 740C       543            mov a, #12
062D 14         543            dec a
062E 1200B9     543            lcall ?Set_Cursor_1 ; Select column and row
0631 D0E0       543            pop acc
0633 120369     544            lcall Display_formated_BCD_Tj
0636            545   
0636            546            ; Convert value back to hex to use for calculations
0636 12015D     547            lcall bcd2hex
0639            548   
0639            549            ; Storing the ambient temperature
0639 853038     550            mov amb_temp+0, x+0
063C 853139     551            mov amb_temp+1, x+1
063F 85323A     552            mov amb_temp+2, x+2
0642 85333B     553            mov amb_temp+3, x+3
0645            554   
0645            555            ; Convert to thermocouple voltage to temperature
0645 8830       556            mov x+0, R0
0647 8931       557            mov x+1, R1
0649 753200     558            mov x+2, #0
064C 753300     559            mov x+3, #0
064F 75347C     560            mov y+0, #low (50300 % 0x10000) 
0652 7535C4     560            mov y+1, #high(50300 % 0x10000) 
0655 753600     560            mov y+2, #low (50300 / 0x10000) 
0658 753700     560            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
065B 12024E     561            lcall mul32
065E 7534FF     562            mov y+0, #low (4095 % 0x10000) 
0661 75350F     562            mov y+1, #high(4095 % 0x10000) 
0664 753600     562            mov y+2, #low (4095 / 0x10000) 
0667 753700     562            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
066A 1202DB     563            lcall div32
066D 753464     564            mov y+0, #low (100 % 0x10000) 
0670 753500     564            mov y+1, #high(100 % 0x10000) 
0673 753600     564            mov y+2, #low (100 / 0x10000) 
0676 753700     564            mov y+3, #high(100 / 0x10000) 
0679 1202DB     565            lcall div32
067C 753445     566            mov y+0, #low (5189 % 0x10000) 
067F 753514     566            mov y+1, #high(5189 % 0x10000) 
0682 753600     566            mov y+2, #low (5189 / 0x10000) 
0685 753700     566            mov y+3, #high(5189 / 0x10000) 
0688 12024E     567            lcall mul32
068B            568   
068B            569            ; Adding the ambient temperature to oven temperature
068B 853834     570            mov y+0, amb_temp+0
068E 853935     571            mov y+1, amb_temp+1
0691 853A36     572            mov y+2, amb_temp+2
0694 853B37     573            mov y+3, amb_temp+3
0697 120199     574            lcall add32
069A            575            
069A            576            ; Convert to BCD and display
069A 1200D4     577            lcall hex2bcd
069D C0E0       578            push acc
069F 7403       578            mov a, #3
06A1 14         578            dec a
06A2 1200B9     578            lcall ?Set_Cursor_1 ; Select column and row
06A5 D0E0       578            pop acc
06A7 120344     579            lcall Display_formated_BCD_To
06AA            580   
06AA            581            ; Storing the thermocouple temperature into var temp 
06AA 753410     582            mov y+0, #low (10000 % 0x10000) 
06AD 753527     582            mov y+1, #high(10000 % 0x10000) 
06B0 753600     582            mov y+2, #low (10000 / 0x10000) 
06B3 753700     582            mov y+3, #high(10000 / 0x10000) 
06B6 1202DB     583            lcall div32
06B9 853048     584            mov temp+0, x+0
06BC 853149     585            mov temp+1, x+1
06BF            586            
06BF            587            ; Wait 100 ms between readings
06BF 7A64       588            mov R2, #100
06C1 1204BE     589            lcall waitms
06C4            590            
06C4            591   ; STATE MACHINE  
06C4            592   FSM1:
06C4 E54A       593            mov a, FSM1_state
06C6            594   
06C6            595   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
06C6            596   FSM1_state0:
06C6 B40022     597            cjne a, #0, FSM1_state1
06C9 C0E0       598            push acc
06CB 7410       598            mov a, #16
06CD 14         598            dec a
06CE 1200B7     598            lcall ?Set_Cursor_2 ; Select column and row
06D1 D0E0       598            pop acc
06D3 C083       599            push dph
06D5 C082       599            push dpl
06D7 C0E0       599            push acc
06D9 900014     599            mov dptr, #state0
06DC 1200AC     599            lcall ?Send_Constant_String
06DF D0E0       599            pop acc
06E1 D082       599            pop dpl
06E3 D083       599            pop dph
06E5 754100     600            mov pwm, #0
06E8            601            ;jb PB0, FSM1_state0_done
06E8            602            ;mov FSM1_state, #1
06E8            603   FSM1_state0_done:
06E8 020569     604            ljmp Forever
06EB            605   
06EB            606   ; pre-heat state. Should go to state two when temp reaches temp_soak     
06EB            607   FSM1_state1:
06EB B40134     608            cjne a, #1, FSM1_state2
06EE C0E0       609            push acc
06F0 7410       609            mov a, #16
06F2 14         609            dec a
06F3 1200B7     609            lcall ?Set_Cursor_2 ; Select column and row
06F6 D0E0       609            pop acc
06F8 C083       610            push dph
06FA C082       610            push dpl
06FC C0E0       610            push acc
06FE 900016     610            mov dptr, #state1
0701 1200AC     610            lcall ?Send_Constant_String
0704 D0E0       610            pop acc
0706 D082       610            pop dpl
0708 D083       610            pop dph
070A            611            
070A C296       612            clr P1.6
070C            613            
070C 754164     614            mov pwm, #100
070F 754700     615            mov sec, #0
0712            616            
0712            617            ; These two lines are temporary. temp should be read from the thermocouple wire
0712 754364     618            mov temp_soak, #100
0715            619            
0715 E543       620            mov a, temp_soak
0717 D3         621            setb c
0718 9548       622            subb a, temp
071A 5003       623            jnc FSM1_state1_done
071C 754A02     624            mov FSM1_state, #2
071F            625   FSM1_state1_done:
071F 020569     626            ljmp Forever
0722            627   
0722            628   ; State 2
0722            629   FSM1_state2:
0722 D296       630            setb P1.6 ;speaker
0724 B4023A     631            cjne a, #2, FSM1_state3
0727 C0E0       632            push acc
0729 7410       632            mov a, #16
072B 14         632            dec a
072C 1200B7     632            lcall ?Set_Cursor_2 ; Select column and row
072F D0E0       632            pop acc
0731 C083       633            push dph
0733 C082       633            push dpl
0735 C0E0       633            push acc
0737 900018     633            mov dptr, #state2
073A 1200AC     633            lcall ?Send_Constant_String
073D D0E0       633            pop acc
073F D082       633            pop dpl
0741 D083       633            pop dph
0743 754114     634            mov pwm, #20
0746            635            
0746 E547       636            mov a, sec
0748 2401       637            add a, #1
074A F547       638            mov sec, a
074C            639   
074C 7A32       640            mov R2, #50
074E 1204BE     641            lcall waitms
0751            642   
0751 E544       643            mov a, Time_soak
0753 C3         644            clr c
0754 9547       645            subb a, sec
0756 5003       646            jnc FSM1_state2_done
0758 754A03     647            mov FSM1_state, #3
075B            648   FSM1_state2_done:
075B 020569     649            ljmp Forever
075E            650   
075E            651   ;DELETE
075E            652   jump:
075E 0206C6     653   ljmp FSM1_state0         
0761            654   
0761            655   ;State 3
0761            656   FSM1_state3:
0761 B4032F     657            cjne a, #3, FSM1_state4
0764 C0E0       658            push acc
0766 7410       658            mov a, #16
0768 14         658            dec a
0769 1200B7     658            lcall ?Set_Cursor_2 ; Select column and row
076C D0E0       658            pop acc
076E C083       659            push dph
0770 C082       659            push dpl
0772 C0E0       659            push acc
0774 90001A     659            mov dptr, #state3
0777 1200AC     659            lcall ?Send_Constant_String
077A D0E0       659            pop acc
077C D082       659            pop dpl
077E D083       659            pop dph
0780 754164     660            mov pwm, #100
0783 754700     661            mov sec, #0
0786            662            
0786            663            
0786 E545       664            mov a, Temp_refl
0788 C3         665            clr c
0789 9548       666            subb a, temp
078B 5003       667            jnc FSM1_state3_done
078D 754A04     668            mov FSM1_state, #4
0790            669   FSM1_state3_done:
0790 020569     670            ljmp Forever
0793            671   
0793            672   
0793            673   ;State 4
0793            674   FSM1_state4:
0793 B40437     675            cjne a, #4, FSM1_state5
0796 C0E0       676            push acc
0798 7410       676            mov a, #16
079A 14         676            dec a
079B 1200B7     676            lcall ?Set_Cursor_2 ; Select column and row
079E D0E0       676            pop acc
07A0 C083       677            push dph
07A2 C082       677            push dpl
07A4 C0E0       677            push acc
07A6 90001C     677            mov dptr, #state4
07A9 1200AC     677            lcall ?Send_Constant_String
07AC D0E0       677            pop acc
07AE D082       677            pop dpl
07B0 D083       677            pop dph
07B2 754114     678            mov pwm, #20
07B5            679            
07B5 E547       680            mov a, sec
07B7 2401       681            add a, #1
07B9 F547       682            mov sec, a
07BB            683   
07BB 7A32       684            mov R2, #50
07BD 1204BE     685            lcall waitms
07C0            686            
07C0 E546       687            mov a, Time_refl
07C2 C3         688            clr c
07C3 9547       689            subb a,sec
07C5 5003       690            jnc FSM1_state4_done
07C7 754A05     691            mov FSM1_state, #5
07CA            692   FSM1_state4_done:
07CA 020569     693            ljmp Forever
07CD            694            
07CD            695   FSM1_state5:
07CD B4058E     696            cjne a, #5, jump
07D0 C0E0       697            push acc
07D2 7410       697            mov a, #16
07D4 14         697            dec a
07D5 1200B7     697            lcall ?Set_Cursor_2 ; Select column and row
07D8 D0E0       697            pop acc
07DA C083       698            push dph
07DC C082       698            push dpl
07DE C0E0       698            push acc
07E0 90001E     698            mov dptr, #state5
07E3 1200AC     698            lcall ?Send_Constant_String
07E6 D0E0       698            pop acc
07E8 D082       698            pop dpl
07EA D083       698            pop dph
07EC 754100     699            mov pwm, #0
07EF            700            
07EF            701            
07EF 743C       702            mov a, #60
07F1 C3         703            clr c
07F2 9548       704            subb a, temp
07F4 4003       705            jc FSM1_state5_done
07F6 754A00     706            mov FSM1_state,#0
07F9            707   FSM1_state5_done:
07F9 1203DE     708            lcall Save_Variables ; Save variables in flash memory
07FC 020569     709            ljmp Forever
07FF            710            
07FF            711   
07FF            712   
07FF            713   ;Any additions to be checked
07FF            714   EN
