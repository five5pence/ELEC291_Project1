                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   TIMER2_RATE         EQU 100      ; 100Hz or 10ms
0000             41   TIMER2_RELOAD       EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             42   
0000             43   
0000             44   ;pwn
0000             45   PWM_OUT    EQU P1.2 ; Logic 1=oven on
0000             46   
0000             47   ORG 0x0000
0000 0205D5      48       ljmp main
002B             49   ORG 0x002B
002B 020458      50            ljmp Timer2_ISR
002E             51   ; Initialization Messages
002E 4F3D2020    52   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
003F 2C00        53   comma              :     db ','               , 0
0041 7300        54   soak_message       :     db 's'               , 0
0043 7200        55   reflow_message     :     db 'r'               , 0
0045             56   
0045 3000        57   state0:     db '0', 0
0047 3100        58   state1:     db '1', 0
0049 3200        59   state2:     db '2', 0
004B 3300        60   state3:     db '3', 0
004D 3400        61   state4:     db '4', 0
004F 3500        62   state5:     db '5', 0
0051             63   
0051             64   cseg
0051             65   
0051             66   ; SYMBOLIC CONSTANTS
0051             67   
0051             68   ; INPUTS
0051             69   tempsensor_in equ P3.0
0051             70   thermocouple_in equ P1.1
0051             71   
0051             72   ; OUTPUTS
0051             73   oven_out equ P1.2
0051             74   speaker_out equ P1.6
0051             75   
0051             76   CSEG
0051             77   ; LCD
0051             78   LCD_RS equ P1.3
0051             79   LCD_E equ P1.4
0051             80   LCD_D4 equ P0.0
0051             81   LCD_D5 equ P0.1
0051             82   LCD_D6 equ P0.2
0051             83   LCD_D7 equ P0.3
0051             84   
                 86   	$LIST
0105             88   
0105             89   ; Flash instructions
0105             90   PAGE_ERASE_AP   EQU 00100010b
0105             91   BYTE_PROGRAM_AP EQU 00100001b
0105             92   
0105             93   ; These register definitions needed by 'math32.inc'
0030             94   DSEG at 30H
0030             95   x:   ds 4
0034             96   y:   ds 4
0038             97   amb_temp: ds 4 ; ambient temperature read by LM335
003C             98   bcd: ds 5
0041             99   
0041            100   DSEG
0041            101   pwm: ds 1
0042            102   state: ds 1
0043            103   temp_soak: ds 1
0044            104   Time_soak: ds 1
0045            105   Temp_refl: ds 1
0046            106   Time_refl: ds 1
0047            107   
0047            108   sec: ds 1
0048            109   loop_ten_times: ds 1
0049            110   temp: ds 2
004B            111   
004B            112   
004B            113   FSM1_state: ds 1
004C            114   
004C            115   
004C            116   ;for pwm
004C            117   pwm_counter:  ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
004D            118   
004D            119   seconds:      ds 1 ; a seconds counter attached to Timer 2 ISR
004E            120   
004E            121   
0000            122   BSEG
0000            123   reflow_flag: dbit 1
0001            124   soak_flag: dbit 1
0002            125   mf: dbit 1
0003            126   
0003            127   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            128   PB0: dbit 1
0004            129   PB1: dbit 1
0005            130   PB2: dbit 1
0006            131   PB3: dbit 1
0007            132   PB4: dbit 1
0008            133   PB5: dbit 1
0009            134   PB6: dbit 1
000A            135   PB7: dbit 1
000B            136   
000B            137   
000B            138   BSEG
000B            139   s_flag: dbit 1 ; set to 1 every time a second has passed
000C            140   
000C            141   
000C            142   ; MATH32
                546   $LIST
                144   $LIST
0375            146   
0375            147   ; Blank Macro
                148   Left_blank mac
                149   	mov a, %0
                150   	anl a, #0xf0
                151   	swap a
                152   	jz Left_blank_%M_a
                153   	ljmp %1
                154   Left_blank_%M_a:
                155   	Display_char(#' ')
                156   	mov a, %0
                157   	anl a, #0x0f
                158   	jz Left_blank_%M_b
                159   	ljmp %1
                160   Left_blank_%M_b:
                161   	Display_char(#' ')
                162   endmac
0375            163   
0375            164   
0375            165   ;binary to display 3 digits on lcd screen
0375            166   
0375            167   SendToLCD:
0375 75F064     168            mov b, #100
0378 84         169            div ab
0379 4430       170            orl a, #0x30
037B 1200A0     171            lcall ?WriteData
037E E5F0       172            mov a,b
0380 75F00A     173            mov b,#10
0383 84         174            div ab
0384 4430       175            orl a, #0x30
0386 1200A0     176            lcall ?WriteData
0389 E5F0       177            mov a, b
038B 4430       178            orl a, #0x30
038D 1200A0     179            lcall ?WriteData
0390 22         180            ret
0391            181   ; Send 2 digits to LCD
0391            182   Send2ToLCD:
0391 75F00A     183            mov b,#10
0394 84         184            div ab
0395 4430       185            orl a, #0x30
0397 1200A0     186            lcall ?WriteData
039A E5F0       187            mov a, b
039C 4430       188            orl a, #0x30
039E 1200A0     189            lcall ?WriteData
03A1 22         190            ret
03A2            191   
03A2            192   ; Formatting to display thermocouple temperature
03A2            193   ; Display: 0000.00
03A2            194   Display_formated_BCD_To:
03A2 C000       195            push ar0
03A4 A83F       195            mov r0, bcd+3
03A6 1200EF     195            lcall ?Display_BCD
03A9 D000       195            pop ar0
03AB C000       196            push ar0
03AD A83E       196            mov r0, bcd+2
03AF 1200EF     196            lcall ?Display_BCD
03B2 D000       196            pop ar0
03B4 C0E0       197            push acc
03B6 742E       197            mov a, #'.'
03B8 1200A0     197            lcall ?WriteData
03BB D0E0       197            pop acc
03BD C000       198            push ar0
03BF A83D       198            mov r0, bcd+1
03C1 1200EF     198            lcall ?Display_BCD
03C4 D000       198            pop ar0
03C6            199   
03C6            200   
03C6 22         201            ret
03C7            202            
03C7            203   ; Formatting to display ambient temperature
03C7            204   ; Display: 00.00
03C7            205   Display_formated_BCD_Tj:
03C7 C000       206            push ar0
03C9 A83E       206            mov r0, bcd+2
03CB 1200EF     206            lcall ?Display_BCD
03CE D000       206            pop ar0
03D0 C0E0       207            push acc
03D2 742E       207            mov a, #'.'
03D4 1200A0     207            lcall ?WriteData
03D7 D0E0       207            pop acc
03D9 C000       208            push ar0
03DB A83D       208            mov r0, bcd+1
03DD 1200EF     208            lcall ?Display_BCD
03E0 D000       208            pop ar0
03E2 22         209            ret
03E3            210   
03E3            211   
03E3            212   ; INITIALIZATION SUBROUTINES
03E3            213   Init_All:
03E3            214            ; Configure all the pins for biderectional I/O
03E3 75AC00     215            mov     P3M1, #0x00
03E6 75AD00     216            mov     P3M2, #0x00
03E9 75B300     217            mov     P1M1, #0x00
03EC 75B400     218            mov     P1M2, #0x00
03EF 75B100     219            mov     P0M1, #0x00
03F2 75B200     220            mov     P0M2, #0x00
03F5            221   
03F5 438E10     222            orl     CKCON, #0x10 ; CLK is the input for timer 1
03F8 438780     223            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03FB 759852     224            mov     SCON, #0x52
03FE 53C4DF     225            anl     T3CON, #0b11011111
0401 53890F     226            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0404 438920     227            orl     TMOD, #0x20 ; Timer 1 Mode 2
0407 758DF7     228            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
040A D28E       229            setb TR1
040C            230            
040C            231            ; Using timer 0 for delay functions.  Initialize here:
040C C28C       232            clr     TR0 ; Stop timer 0
040E 438E08     233            orl     CKCON,#0x08 ; CLK is the input for timer 0
0411 5389F0     234            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0414 438901     235            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0417            236            
0417            237            
0417            238            ;Timer 2 for pulse
0417            239            ; Initialize timer 2 for periodic interrupts
0417 75C800     240            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
041A 75CDD7     241            mov TH2, #high(TIMER2_RELOAD)
041D 75CC79     242            mov TL2, #low(TIMER2_RELOAD)
0420            243            ; Set the reload value
0420 75C9A0     244            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0423 75CBD7     245            mov RCMP2H, #high(TIMER2_RELOAD)
0426 75CA79     246            mov RCMP2L, #low(TIMER2_RELOAD)
0429            247            ; Init the free running 10 ms counter to zero
0429 754C00     248            mov pwm_counter, #0
042C            249            ; Enable the timer and interrupts
042C 439B80     250            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
042F D2CA       251       setb TR2  ; Enable timer 2
0431            252   
0431 D2AF       253            setb EA ; Enable global interrupts
0433            254            
0433            255            
0433            256            
0433            257            ; Initialize the pin used by the ADC (P1.1) as input.
0433 43B302     258            orl     P1M1, #0b00000010
0436 53B4FD     259            anl     P1M2, #0b11111101
0439            260   
0439            261            ; Initialize the pin used by the ADC (P3.0) as input.
0439 43AC01     262            orl     P3M1, #0b00000001
043C 53ADFE     263            anl     P3M2, #0b11111110
043F            264            
043F            265            ; Initialize and start the ADC:
043F 53E8F0     266            anl ADCCON0, #0xF0
0442 43E807     267            orl ADCCON0, #0x07 ; Select channel 7
0445            268   
0445 53E2F0     269            anl ADCCON2, #0xF0
0448 43E201     270            orl ADCCON2, #0x01 ; Select channel 1
044B            271   
044B            272            ; AINDIDS select if some pins are analog inputs or digital I/O:
044B 75F600     273            mov AINDIDS, #0x00 ; Disable all analog inputs
044E 43F680     274            orl AINDIDS, #0b10000000 ; P1.1 is analog input
0451 43F601     275            orl AINDIDS, #0b00000001 ; P3.0 is analog input
0454 43E101     276            orl ADCCON1, #0x01 ; Enable ADC
0457            277            
0457 22         278            ret
0458            279            
0458            280            
0458            281   ;---------------------------------;
0458            282   ; ISR for timer 2                 ;
0458            283   ;---------------------------------;
0458            284   Timer2_ISR:
0458 C2CF       285            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
045A C0D0       286            push psw
045C C0E0       287            push acc
045E            288            
045E 054C       289            inc pwm_counter
0460 C3         290            clr c
0461 E541       291            mov a, pwm
0463 954C       292            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0465 B3         293            cpl c
0466 9292       294            mov PWM_OUT, c
0468            295            
0468 E54C       296            mov a, pwm_counter
046A B46407     297            cjne a, #100, Timer2_ISR_done
046D 754C00     298            mov pwm_counter, #0
0470 054D       299            inc seconds ; It is super easy to keep a seconds count here
0472 D20B       300            setb s_flag
0474            301   
0474            302   Timer2_ISR_done:
0474 D0E0       303            pop acc
0476 D0D0       304            pop psw
0478 32         305            reti
0479            306   
0479            307   ; Flash Memory Subroutines
0479            308   ;******************************************************************************
0479            309   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0479            310   ; Data Flash when user code is executed in APROM.
0479            311   ; (The base of this code is listed in the N76E003 user manual)
0479            312   ;******************************************************************************
0479            313   
0479            314   Save_Variables:
0479 C2AF       315            CLR EA  ; MUST disable interrupts for this to work!
047B            316            
047B 75C7AA     317            MOV TA, #0aah ; CHPCON is TA protected
047E 75C755     318            MOV TA, #55h
0481 439F01     319            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
0484            320            
0484 75C7AA     321            MOV TA, #0aah ; IAPUEN is TA protected
0487 75C755     322            MOV TA, #55h
048A 43A501     323            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
048D            324            
048D 75AF22     325            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
0490 75A73F     326            MOV IAPAH, #3fh ; Address high byte of flash page
0493 75A680     327            MOV IAPAL, #80h ; Address low byte
0496 75AEFF     328            MOV IAPFD, #0FFh ; Data to load into the address byte
0499 75C7AA     329            MOV TA, #0aah ; IAPTRG is TA protected
049C 75C755     330            MOV TA, #55h
049F 43A401     331            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
04A2            332            
04A2 75AF21     333            MOV IAPCN, #BYTE_PROGRAM_AP
04A5 75A73F     334            MOV IAPAH, #3fh
04A8            335            
04A8            336            ;Load 3f80h with temp_soak
04A8 75A680     337            MOV IAPAL, #80h
04AB 8543AE     338            MOV IAPFD, temp_soak
04AE 75C7AA     339            MOV TA, #0aah
04B1 75C755     340            MOV TA, #55h
04B4 43A401     341            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
04B7            342            
04B7            343            ;Load 3f81h with Time_soak
04B7 75A681     344            MOV IAPAL, #81h
04BA 8544AE     345            MOV IAPFD, Time_soak
04BD 75C7AA     346            MOV TA, #0aah
04C0 75C755     347            MOV TA, #55h
04C3 43A401     348            ORL IAPTRG,#00000001b
04C6            349            
04C6            350            ;Load 3f82h with Temp_refl
04C6 75A682     351            MOV IAPAL, #82h
04C9 8545AE     352            MOV IAPFD, Temp_refl
04CC 75C7AA     353            MOV TA, #0aah
04CF 75C755     354            MOV TA, #55h
04D2 43A401     355            ORL IAPTRG,#00000001b
04D5            356            
04D5            357            ;Load 3f83h with Time_refl
04D5 75A683     358            MOV IAPAL, #83h
04D8 8546AE     359            MOV IAPFD, Time_refl
04DB 75C7AA     360            MOV TA, #0aah
04DE 75C755     361            MOV TA, #55h
04E1 43A401     362            ORL IAPTRG,#00000001b
04E4            363   
04E4            364            ;Load 3f84h with 55h
04E4 75A684     365            MOV IAPAL,#84h
04E7 75AE55     366            MOV IAPFD, #55h
04EA 75C7AA     367            MOV TA, #0aah
04ED 75C755     368            MOV TA, #55h
04F0 43A401     369            ORL IAPTRG, #00000001b
04F3            370   
04F3            371            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
04F3 75A685     372            MOV IAPAL, #85h
04F6 75AEAA     373            MOV IAPFD, #0aah
04F9 75C7AA     374            MOV TA, #0aah
04FC 75C755     375            MOV TA, #55h
04FF 43A401     376            ORL IAPTRG, #00000001b
0502            377   
0502 75C7AA     378            MOV TA, #0aah
0505 75C755     379            MOV TA, #55h
0508 53A5FE     380            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
050B 75C7AA     381            MOV TA, #0aah
050E 75C755     382            MOV TA, #55h
0511 539FFE     383            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0514            384            
0514 D2AF       385            setb EA  ; Re-enable interrupts
0516            386   
0516 22         387            ret
0517            388   
0517            389   Load_Variables:
0517 903F84     390            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
051A E4         391            clr a
051B 93         392            movc a, @a+dptr
051C B4551D     393            cjne a, #0x55, Load_Defaults
051F A3         394            inc dptr      ; Second key value location.  Must be 0xaa
0520 E4         395            clr a
0521 93         396            movc a, @a+dptr
0522 B4AA17     397            cjne a, #0xaa, Load_Defaults
0525            398            
0525 903F80     399            mov dptr, #0x3f80
0528 E4         400            clr a
0529 93         401            movc a, @a+dptr
052A F543       402            mov temp_soak, a
052C            403            
052C A3         404            inc dptr
052D E4         405            clr a
052E 93         406            movc a, @a+dptr
052F F544       407            mov Time_soak, a
0531            408            
0531 A3         409            inc dptr
0532 E4         410            clr a
0533 93         411            movc a, @a+dptr
0534 F545       412            mov Temp_refl, a
0536            413            
0536 A3         414            inc dptr
0537 E4         415            clr a
0538 93         416            movc a, @a+dptr
0539 F546       417            mov Time_refl, a
053B 22         418            ret
053C            419   
053C            420   Load_Defaults:
053C 754301     421            mov temp_soak, #1
053F 754402     422            mov Time_soak, #2
0542 754503     423            mov Temp_refl, #3
0545 754604     424            mov Time_refl, #4
0548 22         425            ret
0549            426   
0549            427   putchar:
0549 3099FD     428       jnb TI, putchar
054C C299       429       clr TI
054E F599       430       mov SBUF, a
0550 22         431       ret
0551            432            
0551            433   
0551            434   wait_1ms:
0551 C28C       435            clr     TR0 ; Stop timer 0
0553 C28D       436            clr     TF0 ; Clear overflow flag
0555 758CBF     437            mov     TH0, #high(TIMER0_RELOAD_1MS)
0558 758A28     438            mov     TL0,#low(TIMER0_RELOAD_1MS)
055B D28C       439            setb TR0
055D 308DFD     440            jnb     TF0, $ ; Wait for overflow
0560 22         441            ret
0561            442   
0561            443   ; Wait the number of miliseconds in R2
0561            444   waitms:
0561 120551     445            lcall wait_1ms
0564 DAFB       446            djnz R2, waitms
0566 22         447            ret
0567            448   
0567            449   ADC_to_PB:
0567 53E8F0     450            anl ADCCON0, #0xF0
056A 43E800     451            orl ADCCON0, #0x00 ; Select AIN0
056D            452            
056D C2EF       453            clr ADCF
056F D2EE       454            setb ADCS   ; ADC start trigger signal
0571 30EFFD     455       jnb ADCF, $ ; Wait for conversion complete
0574            456   
0574 D20A       457            setb PB7
0576 D209       458            setb PB6
0578 D208       459            setb PB5
057A D207       460            setb PB4
057C D206       461            setb PB3
057E D205       462            setb PB2
0580 D204       463            setb PB1
0582 D203       464            setb PB0
0584            465            
0584            466            ; Check PB7
0584            467   ADC_to_PB_L7:
0584 C3         468            clr c
0585 E5C3       469            mov a, ADCRH
0587 94F0       470            subb a, #0xf0
0589 4003       471            jc ADC_to_PB_L6
058B C20A       472            clr PB7
058D 22         473            ret
058E            474   
058E            475            ; Check PB6
058E            476   ADC_to_PB_L6:
058E C3         477            clr c
058F E5C3       478            mov a, ADCRH
0591 94D0       479            subb a, #0xd0
0593 4003       480            jc ADC_to_PB_L5
0595 C209       481            clr PB6
0597 22         482            ret
0598            483   
0598            484            ; Check PB5
0598            485   ADC_to_PB_L5:
0598 C3         486            clr c
0599 E5C3       487            mov a, ADCRH
059B 94B0       488            subb a, #0xb0
059D 4003       489            jc ADC_to_PB_L4
059F C208       490            clr PB5
05A1 22         491            ret
05A2            492   
05A2            493            ; Check PB4
05A2            494   ADC_to_PB_L4:
05A2 C3         495            clr c
05A3 E5C3       496            mov a, ADCRH
05A5 9490       497            subb a, #0x90
05A7 4003       498            jc ADC_to_PB_L3
05A9 C207       499            clr PB4
05AB 22         500            ret
05AC            501   
05AC            502            ; Check PB3
05AC            503   ADC_to_PB_L3:
05AC C3         504            clr c
05AD E5C3       505            mov a, ADCRH
05AF 9470       506            subb a, #0x70
05B1 4003       507            jc ADC_to_PB_L2
05B3 C206       508            clr PB3
05B5 22         509            ret
05B6            510   
05B6            511            ; Check PB2
05B6            512   ADC_to_PB_L2:
05B6 C3         513            clr c
05B7 E5C3       514            mov a, ADCRH
05B9 9450       515            subb a, #0x50
05BB 4003       516            jc ADC_to_PB_L1
05BD C205       517            clr PB2
05BF 22         518            ret
05C0            519   
05C0            520            ; Check PB1
05C0            521   ADC_to_PB_L1:
05C0 C3         522            clr c
05C1 E5C3       523            mov a, ADCRH
05C3 9430       524            subb a, #0x30
05C5 4003       525            jc ADC_to_PB_L0
05C7 C204       526            clr PB1
05C9 22         527            ret
05CA            528   
05CA            529            ; Check PB0
05CA            530   ADC_to_PB_L0:
05CA C3         531            clr c
05CB E5C3       532            mov a, ADCRH
05CD 9410       533            subb a, #0x10
05CF 4003       534            jc ADC_to_PB_Done
05D1 C203       535            clr PB0
05D3 22         536            ret
05D4            537            
05D4            538   ADC_to_PB_Done:
05D4            539            ; No puhsbutton pressed         
05D4 22         540            ret
05D5            541   
05D5            542   ; MAIN 
05D5            543   main:
05D5 75817F     544            mov sp, #0x7f
05D8 1203E3     545       lcall Init_All
05DB 1200AA     546       lcall LCD_4BIT
05DE            547       ; initial messages in LCD
05DE C0E0       548            push acc
05E0 7401       548            mov a, #1
05E2 14         548            dec a
05E3 1200EA     548            lcall ?Set_Cursor_1 ; Select column and row
05E6 D0E0       548            pop acc
05E8 C083       549            push dph
05EA C082       549            push dpl
05EC C0E0       549            push acc
05EE 90002E     549            mov dptr, #temperature_message
05F1 1200DD     549            lcall ?Send_Constant_String
05F4 D0E0       549            pop acc
05F6 D082       549            pop dpl
05F8 D083       549            pop dph
05FA C0E0       550            push acc
05FC 7401       550            mov a, #1
05FE 14         550            dec a
05FF 1200E8     550            lcall ?Set_Cursor_2 ; Select column and row
0602 D0E0       550            pop acc
0604 C083       551            push dph
0606 C082       551            push dpl
0608 C0E0       551            push acc
060A 900043     551            mov dptr, #reflow_message
060D 1200DD     551            lcall ?Send_Constant_String
0610 D0E0       551            pop acc
0612 D082       551            pop dpl
0614 D083       551            pop dph
0616 C0E0       552            push acc
0618 7405       552            mov a, #5
061A 14         552            dec a
061B 1200E8     552            lcall ?Set_Cursor_2 ; Select column and row
061E D0E0       552            pop acc
0620 C083       553            push dph
0622 C082       553            push dpl
0624 C0E0       553            push acc
0626 90003F     553            mov dptr, #comma
0629 1200DD     553            lcall ?Send_Constant_String
062C D0E0       553            pop acc
062E D082       553            pop dpl
0630 D083       553            pop dph
0632 C0E0       554            push acc
0634 7408       554            mov a, #8
0636 14         554            dec a
0637 1200E8     554            lcall ?Set_Cursor_2 ; Select column and row
063A D0E0       554            pop acc
063C C083       555            push dph
063E C082       555            push dpl
0640 C0E0       555            push acc
0642 900041     555            mov dptr, #soak_message
0645 1200DD     555            lcall ?Send_Constant_String
0648 D0E0       555            pop acc
064A D082       555            pop dpl
064C D083       555            pop dph
064E C0E0       556            push acc
0650 740C       556            mov a, #12
0652 14         556            dec a
0653 1200E8     556            lcall ?Set_Cursor_2 ; Select column and row
0656 D0E0       556            pop acc
0658            556   
0658 C083       557            push dph
065A C082       557            push dpl
065C C0E0       557            push acc
065E 90003F     557            mov dptr, #comma
0661 1200DD     557            lcall ?Send_Constant_String
0664 D0E0       557            pop acc
0666 D082       557            pop dpl
0668 D083       557            pop dph
066A            558   
066A 754B00     559            mov FSM1_state, #0
066D 7543C8     560       mov Temp_soak, #200
0670 75443C     561            mov Time_soak, #60
0673 7545EB     562            mov Temp_refl, #235
0676 75462D     563            mov Time_refl, #45
0679            564            ; lcall Load_Variables
0679            565       ; mov Temp_soak, #200
0679            566            ; mov Time_soak, #0x60
0679            567            ; mov Temp_refl, #200
0679            568            ; mov Time_refl, #0x45
0679 754700     569            mov sec, #0
067C 754800     570            mov loop_ten_times, #0
067F            571   
067F C200       572            clr reflow_flag ; start on temp
0681 C201       573            clr soak_flag ; start on temp
0683            574   
0683            575   Forever:
0683            576   
0683            577   
0683            578   ; Example branch for decreasing any given value 
0683            579   ; This set of code will increase the ones columnn of any given 
0683            580   ; variable. ie. reflow_temp_ones, reflow_time_ones
0683            581   ; the 10s and 100s column will update in response to increasing 
0683            582   ; the ones column beyond 9.
0683            583   
0683            584   ; SOAK ;
0683            585   soak_toggle:
0683 200702     586            jb PB4, check_soak_toggle
0686 B201       587            cpl soak_flag ; if button is pressed, change flag
0688            588   
0688            589   check_soak_toggle: 
0688 200110     590            jb soak_flag, turn_soak_to_time
068B            591   
068B            592   turn_soak_to_temp:
068B            593            ; will use the same logic for the other pushbuttons
068B            594   ; This example will use Temp_soak for this example
068B            595            decrease_soak_temp:
068B 200405     596            jb PB1, increase_soak_temp
068E 1543       597       dec Temp_soak
0690 0206B5     598            ljmp reflow_toggle
0693            599            
0693            600            increase_soak_temp:
0693 20051F     601            jb PB2, reflow_toggle 
0696 0543       602            inc Temp_soak
0698 0206B5     603            ljmp reflow_toggle
069B            604   
069B            605   turn_soak_to_time:
069B            606            decrease_soak_time:
069B 20040A     607            jb PB1, increase_soak_time
069E E544       608            mov a, Time_soak
06A0 2499       609       add a, #0x99
06A2 D4         610            da a
06A3 F544       611       mov Time_soak, a
06A5 0206B5     612            ljmp reflow_toggle
06A8            613            
06A8            614            increase_soak_time:
06A8 20050A     615            jb PB2, reflow_toggle
06AB E544       616            mov a, Time_soak
06AD 2401       617            add a, #1
06AF D4         618            da a 
06B0 F544       619            mov Time_soak, a
06B2 0206B5     620            ljmp reflow_toggle
06B5            621   
06B5            622   ; REFLOW ;
06B5            623   reflow_toggle:
06B5 200A02     624            jb PB7, check_reflow_toggle
06B8 B200       625            cpl reflow_flag ; if button is pressed, change flag
06BA            626   
06BA            627   check_reflow_toggle: 
06BA 200010     628            jb reflow_flag, turn_reflow_to_time
06BD            629   
06BD            630   turn_reflow_to_temp:
06BD            631            ; will use the same logic for the other pushbuttons
06BD            632   ; This example will use temp_soak for this example
06BD            633   
06BD            634            decrease_reflow_temp:
06BD 200905     635            jb PB6, increase_reflow_temp
06C0 1545       636       dec Temp_refl
06C2 0206E7     637            ljmp start_stop
06C5            638            
06C5            639            increase_reflow_temp:
06C5 20081F     640            jb PB5, start_stop
06C8 0545       641            inc Temp_refl
06CA 0206E7     642            ljmp start_stop
06CD            643   
06CD            644   
06CD            645   turn_reflow_to_time:
06CD            646            
06CD            647            decrease_reflow_time:
06CD 20090A     648            jb PB6, increase_reflow_time
06D0 E546       649            mov a, Time_refl
06D2 2499       650       add a, #0x99
06D4 D4         651            da a
06D5 F546       652       mov Time_refl, a
06D7 0206E7     653            ljmp start_stop
06DA            654            
06DA            655            increase_reflow_time:
06DA 20080A     656            jb PB5, start_stop 
06DD E546       657            mov a, Time_refl
06DF 2401       658            add a, #1
06E1 D4         659            da a 
06E2 F546       660            mov Time_refl, a
06E4 0206E7     661            ljmp start_stop
06E7            662   
06E7            663   
06E7            664   start_stop:
06E7 E545       665            mov a, Temp_refl
06E9 C0E0       666            push acc
06EB 7402       666            mov a, #2
06ED 14         666            dec a
06EE 1200E8     666            lcall ?Set_Cursor_2 ; Select column and row
06F1 D0E0       666            pop acc
06F3 120375     667            lcall SendToLCD
06F6 E4         668            clr a
06F7 E543       669            mov a, Temp_soak
06F9 C0E0       670            push acc
06FB 7409       670            mov a, #9
06FD 14         670            dec a
06FE 1200E8     670            lcall ?Set_Cursor_2 ; Select column and row
0701 D0E0       670            pop acc
0703 120375     671            lcall SendToLCD
0706 E4         672            clr a
0707 E546       673            mov a, Time_refl
0709 C0E0       674            push acc
070B 7406       674            mov a, #6
070D 14         674            dec a
070E 1200E8     674            lcall ?Set_Cursor_2 ; Select column and row
0711 D0E0       674            pop acc
0713 120391     675            lcall Send2ToLCD ; Call subroutine to display 2 digit binary as ASCII on LCD
0716 E4         676            clr a
0717 E544       677            mov a, Time_soak
0719 C0E0       678            push acc
071B 740D       678            mov a, #13
071D 14         678            dec a
071E 1200E8     678            lcall ?Set_Cursor_2 ; Select column and row
0721 D0E0       678            pop acc
0723 120391     679            lcall Send2ToLCD
0726 20030F     680            jb PB0, continue
0729            681   
0729            682   turn_on:
0729 E54B       683            mov a, FSM1_state
072B B40005     684            cjne a, #0, turn_off
072E 754B01     685            mov FSM1_state, #1
0731 8005       686            sjmp continue
0733            687   
0733            688   turn_off:
0733 754B00     689            mov FSM1_state, #0
0736 8000       690            sjmp continue
0738            691   
0738            692   
0738            693   continue:
0738 120567     694            lcall ADC_to_PB
073B            695            ;lcall Display_PushButtons_ADC
073B            696            
073B 75E807     697            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
073E C2EF       698            clr ADCF
0740 D2EE       699            setb ADCS ;  ADC start trigger signal
0742 30EFFD     700       jnb ADCF, $ ; Wait for conversion complete
0745            701       
0745            702       ; Read the ADC result and store in [R1, R0]
0745 E5C3       703       mov a, ADCRH   
0747 C4         704       swap a
0748 C0E0       705       push acc
074A 540F       706       anl a, #0x0f
074C F9         707       mov R1, a
074D D0E0       708       pop acc
074F 54F0       709       anl a, #0xf0
0751 45C2       710       orl a, ADCRL
0753 F8         711       mov R0, A
0754            712       
0754 75E801     713       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
0757 C2EF       714            clr ADCF
0759 D2EE       715            setb ADCS ;  ADC start trigger signal
075B 30EFFD     716       jnb ADCF, $ ; Wait for conversion complete
075E            717       
075E            718       ; Read the ADC result and store in [R4, R3]
075E E5C3       719       mov a, ADCRH   
0760 C4         720       swap a
0761 C0E0       721       push acc
0763 540F       722       anl a, #0x0f
0765 FC         723       mov R4, a
0766 D0E0       724       pop acc
0768 54F0       725       anl a, #0xf0
076A 45C2       726       orl a, ADCRL
076C FB         727       mov R3, A
076D            728       
076D            729            ; Convert to LM335 temperature to voltage
076D 8B30       730            mov x+0, R3
076F 8C31       731            mov x+1, R4
0771 753200     732            mov x+2, #0
0774 753300     733            mov x+3, #0
0777 75347C     734            mov y+0, #low (50300 % 0x10000) 
077A 7535C4     734            mov y+1, #high(50300 % 0x10000) 
077D 753600     734            mov y+2, #low (50300 / 0x10000) 
0780 753700     734            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0783 12027F     735            lcall mul32
0786 7534FF     736            mov y+0, #low (4095 % 0x10000) 
0789 75350F     736            mov y+1, #high(4095 % 0x10000) 
078C 753600     736            mov y+2, #low (4095 / 0x10000) 
078F 753700     736            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0792 12030C     737            lcall div32
0795 7534D0     738            mov y+0, #low (27600 % 0x10000) 
0798 75356B     738            mov y+1, #high(27600 % 0x10000) 
079B 753600     738            mov y+2, #low (27600 / 0x10000) 
079E 753700     738            mov y+3, #high(27600 / 0x10000) 
07A1 1201EB     739            lcall sub32
07A4 753464     740            mov y+0, #low (100 % 0x10000) 
07A7 753500     740            mov y+1, #high(100 % 0x10000) 
07AA 753600     740            mov y+2, #low (100 / 0x10000) 
07AD 753700     740            mov y+3, #high(100 / 0x10000) 
07B0 12027F     741            lcall mul32
07B3            742            
07B3            743            ; Convert to BCD and display
07B3 120105     744            lcall hex2bcd
07B6 C0E0       745            push acc
07B8 740C       745            mov a, #12
07BA 14         745            dec a
07BB 1200EA     745            lcall ?Set_Cursor_1 ; Select column and row
07BE D0E0       745            pop acc
07C0 1203C7     746            lcall Display_formated_BCD_Tj
07C3            747   
07C3            748            ; Convert value back to hex to use for calculations
07C3 12018E     749            lcall bcd2hex
07C6            750   
07C6            751            ; Storing the ambient temperature
07C6 853038     752            mov amb_temp+0, x+0
07C9 853139     753            mov amb_temp+1, x+1
07CC 85323A     754            mov amb_temp+2, x+2
07CF 85333B     755            mov amb_temp+3, x+3
07D2            756   
07D2            757            ; Convert to thermocouple voltage to temperature
07D2 8830       758            mov x+0, R0
07D4 8931       759            mov x+1, R1
07D6 753200     760            mov x+2, #0
07D9 753300     761            mov x+3, #0
07DC 75347C     762            mov y+0, #low (50300 % 0x10000) 
07DF 7535C4     762            mov y+1, #high(50300 % 0x10000) 
07E2 753600     762            mov y+2, #low (50300 / 0x10000) 
07E5 753700     762            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07E8 12027F     763            lcall mul32
07EB 7534FF     764            mov y+0, #low (4095 % 0x10000) 
07EE 75350F     764            mov y+1, #high(4095 % 0x10000) 
07F1 753600     764            mov y+2, #low (4095 / 0x10000) 
07F4 753700     764            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07F7 12030C     765            lcall div32
07FA 753464     766            mov y+0, #low (100 % 0x10000) 
07FD 753500     766            mov y+1, #high(100 % 0x10000) 
0800 753600     766            mov y+2, #low (100 / 0x10000) 
0803 753700     766            mov y+3, #high(100 / 0x10000) 
0806 12030C     767            lcall div32
0809 753445     768            mov y+0, #low (5189 % 0x10000) 
080C 753514     768            mov y+1, #high(5189 % 0x10000) 
080F 753600     768            mov y+2, #low (5189 / 0x10000) 
0812 753700     768            mov y+3, #high(5189 / 0x10000) 
0815 12027F     769            lcall mul32
0818            770   
0818            771            ; Adding the ambient temperature to oven temperature
0818 853834     772            mov y+0, amb_temp+0
081B 853935     773            mov y+1, amb_temp+1
081E 853A36     774            mov y+2, amb_temp+2
0821 853B37     775            mov y+3, amb_temp+3
0824 1201CA     776            lcall add32
0827            777            
0827            778            ; Convert to BCD and display
0827 120105     779            lcall hex2bcd
082A C0E0       780            push acc
082C 7403       780            mov a, #3
082E 14         780            dec a
082F 1200EA     780            lcall ?Set_Cursor_1 ; Select column and row
0832 D0E0       780            pop acc
0834 1203A2     781            lcall Display_formated_BCD_To
0837            782            ;---------------------------------;
0837            783            ; Send a BCD number to PuTTY      ;
0837            784            ;---------------------------------
                785   	Send_BCD mac
                786   		push ar0
                787   		mov r0, %0
                788   		lcall ?Send_BCD
                789   		pop ar0
                790   	endmac
0837            791            
0837            792            ?Send_BCD:
0837 C0E0       793                    push acc
0839            794                    ; Write most significant digit
0839 E53F       795                    mov a, bcd+3
083B C4         796                    swap a
083C 540F       797                    anl a, #0fh
083E 4430       798                    orl a, #30h
0840 120549     799                    lcall putchar
0843            800                    ; write least significant digit
0843 E53F       801                    mov a, bcd+3
0845 540F       802                    anl a, #0fh
0847 4430       803                    orl a, #30h
0849 120549     804                    lcall putchar
084C            805                    
084C            806                    ; Write most significant digit
084C E53E       807                    mov a, bcd+2
084E C4         808                    swap a
084F 540F       809                    anl a, #0fh
0851 4430       810                    orl a, #30h
0853 120549     811                    lcall putchar
0856            812                    ; write least significant digit
0856 E53E       813                    mov a, bcd+2
0858 540F       814                    anl a, #0fh
085A 4430       815                    orl a, #30h
085C 120549     816                    lcall putchar
085F D0E0       817                    pop acc
0861            818            ; Write most significant digit
0861 E53D       819                    mov a, bcd+1
0863 C4         820                    swap a
0864 540F       821                    anl a, #0fh
0866 4430       822                    orl a, #30h
0868 120549     823                    lcall putchar
086B            824   
086B            825                    ; Write most significant digit
086B            826   
086B            827            
086B            828            ; Storing the thermocouple temperature into var temp 
086B 753410     829            mov y+0, #low (10000 % 0x10000) 
086E 753527     829            mov y+1, #high(10000 % 0x10000) 
0871 753600     829            mov y+2, #low (10000 / 0x10000) 
0874 753700     829            mov y+3, #high(10000 / 0x10000) 
0877 12030C     830            lcall div32
087A 853049     831            mov temp+0, x+0
087D 85314A     832            mov temp+1, x+1
0880            833            
0880            834   
0880            835   
0880            836            ; Wait 100 ms between readings
0880 7A64       837            mov R2, #100
0882 120561     838            lcall waitms
0885            839            
0885            840   ; STATE MACHINE  
0885            841   FSM1:
0885 E54B       842            mov a, FSM1_state
0887            843   
0887            844   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
0887            845   FSM1_state0:
0887 B40028     846            cjne a, #0, FSM1_state1_save
088A C0E0       847            push acc
088C 7410       847            mov a, #16
088E 14         847            dec a
088F 1200E8     847            lcall ?Set_Cursor_2 ; Select column and row
0892 D0E0       847            pop acc
0894 C083       848            push dph
0896 C082       848            push dpl
0898 C0E0       848            push acc
089A 900045     848            mov dptr, #state0
089D 1200DD     848            lcall ?Send_Constant_String
08A0 D0E0       848            pop acc
08A2 D082       848            pop dpl
08A4 D083       848            pop dph
08A6 754100     849            mov pwm, #0
08A9 754700     850            mov sec, #0
08AC 754800     851            mov loop_ten_times, #0
08AF            852            ;jb PB0, FSM1_state0_done
08AF            853            ;mov FSM1_state, #1
08AF            854   FSM1_state0_done:
08AF 020683     855            ljmp Forever
08B2            856   
08B2            857   FSM1_state1_save:
08B2 120479     858            lcall Save_Variables ; Save oven settings when heating process starts
08B5 0208B8     859            ljmp FSM1_state1
08B8            860   
08B8            861   ; pre-heat state. Should go to state two when temp reaches Temp_soak     
08B8            862   FSM1_state1:
08B8 B40154     863            cjne a, #1, FSM1_state2
08BB C0E0       864            push acc
08BD 7410       864            mov a, #16
08BF 14         864            dec a
08C0 1200E8     864            lcall ?Set_Cursor_2 ; Select column and row
08C3 D0E0       864            pop acc
08C5 C083       865            push dph
08C7 C082       865            push dpl
08C9 C0E0       865            push acc
08CB 900047     865            mov dptr, #state1
08CE 1200DD     865            lcall ?Send_Constant_String
08D1 D0E0       865            pop acc
08D3 D082       865            pop dpl
08D5 D083       865            pop dph
08D7            866            
08D7 C296       867            clr P1.6
08D9            868            
08D9 754164     869            mov pwm, #100
08DC            870            
08DC            871            ;Failsafe. Returns to state 0 if temperature is not reached in 6 seconds (should be 60 idk how to do it)
08DC E547       872            mov a, sec
08DE 2401       873            add a, #1
08E0 F547       874            mov sec, a
08E2            875   
08E2 743C       876            mov a, #60
08E4 C3         877            clr c
08E5 9547       878            subb a, sec
08E7 5016       879            jnc FSM1_state1_continue
08E9            880   
08E9 E548       881            mov a, loop_ten_times
08EB 2401       882            add a, #1
08ED F548       883            mov loop_ten_times, a 
08EF 754700     884            mov sec, #0
08F2 7408       885            mov a, #8
08F4 C3         886            clr c 
08F5 9548       887            subb a, loop_ten_times
08F7 5006       888            jnc FSM1_state1_continue
08F9            889   
08F9 754B00     890            mov FSM1_state, #0
08FC 020683     891            ljmp Forever
08FF            892   
08FF            893   FSM1_state1_continue:
08FF            894            ; These two lines are temporary. temp should be read from the thermocouple wire
08FF            895            ;mov Temp_soak, #100
08FF            896            
08FF E543       897            mov a, Temp_soak
0901 D3         898            setb c
0902 9549       899            subb a, temp
0904 5006       900            jnc FSM1_state1_done
0906 754800     901            mov loop_ten_times, #0
0909 754B02     902            mov FSM1_state, #2
090C            903   FSM1_state1_done:
090C 020683     904            ljmp Forever
090F            905   
090F            906   ; State 2
090F            907   FSM1_state2:
090F D296       908            setb P1.6 ;speaker
0911 B40245     909            cjne a, #2, FSM1_state3
0914 C0E0       910            push acc
0916 7410       910            mov a, #16
0918 14         910            dec a
0919 1200E8     910            lcall ?Set_Cursor_2 ; Select column and row
091C D0E0       910            pop acc
091E C083       911            push dph
0920 C082       911            push dpl
0922 C0E0       911            push acc
0924 900049     911            mov dptr, #state2
0927 1200DD     911            lcall ?Send_Constant_String
092A D0E0       911            pop acc
092C D082       911            pop dpl
092E D083       911            pop dph
0930 754114     912            mov pwm, #20
0933            913            
0933 E547       914            mov a, sec
0935 2401       915            add a, #1
0937 F547       916            mov sec, a
0939            917   
0939 E544       918            mov a, Time_soak
093B C3         919            clr c
093C 9547       920            subb a, sec
093E 5013       921            jnc FSM1_state2_done
0940            922   
0940 E548       923            mov a, loop_ten_times
0942 2401       924            add a, #1
0944 F548       925            mov loop_ten_times, a 
0946 754700     926            mov sec, #0
0949 7405       927            mov a, #5
094B C3         928            clr c 
094C 9548       929            subb a, loop_ten_times
094E 5003       930            jnc FSM1_state2_done
0950            931   
0950 754B03     932            mov FSM1_state, #3
0953            933   FSM1_state2_done:
0953 020683     934            ljmp Forever
0956            935   
0956            936   ;DELETE
0956            937   jump:
0956 020887     938   ljmp FSM1_state0         
0959            939   
0959            940   ;State 3
0959            941   FSM1_state3:
0959 B40332     942            cjne a, #3, FSM1_state4
095C C0E0       943            push acc
095E 7410       943            mov a, #16
0960 14         943            dec a
0961 1200E8     943            lcall ?Set_Cursor_2 ; Select column and row
0964 D0E0       943            pop acc
0966 C083       944            push dph
0968 C082       944            push dpl
096A C0E0       944            push acc
096C 90004B     944            mov dptr, #state3
096F 1200DD     944            lcall ?Send_Constant_String
0972 D0E0       944            pop acc
0974 D082       944            pop dpl
0976 D083       944            pop dph
0978 754164     945            mov pwm, #100
097B 754700     946            mov sec, #0
097E 754800     947            mov loop_ten_times, #0
0981            948            
0981            949            
0981 E545       950            mov a, Temp_refl
0983 C3         951            clr c
0984 9549       952            subb a, temp
0986 5003       953            jnc FSM1_state3_done
0988 754B04     954            mov FSM1_state, #4
098B            955   FSM1_state3_done:
098B 020683     956            ljmp Forever
098E            957   
098E            958   
098E            959   ;State 4
098E            960   FSM1_state4:
098E B40442     961            cjne a, #4, FSM1_state5
0991 C0E0       962            push acc
0993 7410       962            mov a, #16
0995 14         962            dec a
0996 1200E8     962            lcall ?Set_Cursor_2 ; Select column and row
0999 D0E0       962            pop acc
099B C083       963            push dph
099D C082       963            push dpl
099F C0E0       963            push acc
09A1 90004D     963            mov dptr, #state4
09A4 1200DD     963            lcall ?Send_Constant_String
09A7 D0E0       963            pop acc
09A9 D082       963            pop dpl
09AB D083       963            pop dph
09AD 754114     964            mov pwm, #20
09B0            965            
09B0 E547       966            mov a, sec
09B2 2401       967            add a, #1
09B4 F547       968            mov sec, a
09B6            969            
09B6 E546       970            mov a, Time_refl
09B8 C3         971            clr c
09B9 9547       972            subb a,sec
09BB 5013       973            jnc FSM1_state4_done
09BD            974   
09BD E548       975            mov a, loop_ten_times
09BF 2401       976            add a, #1
09C1 F548       977            mov loop_ten_times, a 
09C3 754700     978            mov sec, #0
09C6 7405       979            mov a, #5
09C8 C3         980            clr c 
09C9 9548       981            subb a, loop_ten_times
09CB 5003       982            jnc FSM1_state4_done
09CD            983   
09CD 754B05     984            mov FSM1_state, #5
09D0            985   FSM1_state4_done:
09D0 020683     986            ljmp Forever
09D3            987            
09D3            988   FSM1_state5:
09D3 B40580     989            cjne a, #5, jump
09D6 C0E0       990            push acc
09D8 7410       990            mov a, #16
09DA 14         990            dec a
09DB 1200E8     990            lcall ?Set_Cursor_2 ; Select column and row
09DE D0E0       990            pop acc
09E0 C083       991            push dph
09E2 C082       991            push dpl
09E4 C0E0       991            push acc
09E6 90004F     991            mov dptr, #state5
09E9 1200DD     991            lcall ?Send_Constant_String
09EC D0E0       991            pop acc
09EE D082       991            pop dpl
09F0 D083       991            pop dph
09F2 754100     992            mov pwm, #0
09F5            993            
09F5            994            
09F5 743C       995            mov a, #60
09F7 C3         996            clr c
09F8 9549       997            subb a, temp
09FA 4003       998            jc FSM1_state5_done
09FC 754B00     999            mov FSM1_state,#0
09FF           1000   FSM1_state5_done:
09FF 120479    1001            lcall Save_Variables ; Save variables in flash memory
0A02 020683    1002            ljmp Forever
0A05           1003            
0A05           1004   
0A05           1005   
0A05           1006   ;Any additions to be checked
0A05           1007   EN
