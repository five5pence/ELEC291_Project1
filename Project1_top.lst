                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   TIMER2_RATE         EQU 100      ; 100Hz or 10ms
0000             40   TIMER2_RELOAD       EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             41   
0000             42   ORG 0x0000
0000 0205C4      43       ljmp main
0003             44   
0003             45   ; Timer/Counter 2 overflow interrupt vector
002B             46   org 0x002B
002B 02044F      47            ljmp Timer2_ISR
002E             48   
002E             49   ; Initialization Messages
002E 4F3D2020    50   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
003F             51   
003F 53746174    52   state0:     db 'State 0', 0
     65203000
0047 53746174    53   state1:     db 'State 1', 0
     65203100
004F 53746174    54   state2:     db 'State 2', 0
     65203200
0057 53746174    55   state3:     db 'State 3', 0
     65203300
005F 53746174    56   state4:     db 'State 4', 0
     65203400
0067 53746174    57   state5:     db 'State 5', 0
     65203500
006F             58   
006F 6F6E00      59   start:     db 'on', 0
0072 6F6600      60   stop:       db 'of', 0
0075             61   
0075             62   cseg
0075             63   
0075             64   ; SYMBOLIC CONSTANTS
0075             65   
0075             66   ; INPUTS
0075             67   tempsensor_in equ P3.0
0075             68   thermocouple_in equ P1.1
0075             69   
0075             70   ; OUTPUTS
0075             71   oven_out equ P1.2
0075             72   speaker_out equ P1.6
0075             73   PWM_OUT equ P1.2
0075             74   
0075             75   CSEG
0075             76   ; LCD
0075             77   LCD_RS equ P1.3
0075             78   LCD_E equ P1.4
0075             79   LCD_D4 equ P0.0
0075             80   LCD_D5 equ P0.1
0075             81   LCD_D6 equ P0.2
0075             82   LCD_D7 equ P0.3
0075             83   
                 85   	$LIST
0129             87   
0129             88   ; Flash instructions
0129             89   PAGE_ERASE_AP   EQU 00100010b
0129             90   BYTE_PROGRAM_AP EQU 00100001b
0129             91   
0129             92   ; These register definitions needed by 'math32.inc'
0030             93   DSEG at 30H
0030             94   x:   ds 4
0034             95   y:   ds 4
0038             96   amb_temp: ds 4 ; ambient temperature read by LM335
003C             97   bcd: ds 5
0041             98   
0030             99   DSEG at 0x30
0030            100   pwm_counter:  ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
0031            101   pwm:          ds 1 ; pwm percentage
0032            102   seconds:      ds 1 ; a seconds counter attached to Timer 2 ISR
0033            103   
0033            104   
0033            105   DSEG
0033            106   state: ds 1
0034            107   temp_soak: ds 1
0035            108   Time_soak: ds 1
0036            109   Temp_refl: ds 1
0037            110   Time_refl: ds 1
0038            111   
0038            112   sec: ds 1
0039            113   temp: ds 2
003B            114   
003B            115   
003B            116   FSM1_state: ds 1
003C            117   
0000            118   BSEG
0000            119   mf: dbit 1
0001            120   s_flag: dbit 1 ; set to 1 every time a second has passed
0002            121   
0002            122   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0002            123   PB0: dbit 1
0003            124   PB1: dbit 1
0004            125   PB2: dbit 1
0005            126   PB3: dbit 1
0006            127   PB4: dbit 1
0007            128   PB5: dbit 1
0008            129   PB6: dbit 1
0009            130   PB7: dbit 1
000A            131   
000A            132   start_stop_flag: dbit 1 ;
000B            133   
000B            134   ; MATH32
                546   $LIST
                136   $LIST
0399            138   
0399            139   ; Blank Macro
                140   Left_blank mac
                141   	mov a, %0
                142   	anl a, #0xf0
                143   	swap a
                144   	jz Left_blank_%M_a
                145   	ljmp %1
                146   Left_blank_%M_a:
                147   	Display_char(#' ')
                148   	mov a, %0
                149   	anl a, #0x0f
                150   	jz Left_blank_%M_b
                151   	ljmp %1
                152   Left_blank_%M_b:
                153   	Display_char(#' ')
                154   endmac
0399            155   
0399            156   ; Formatting to display thermocouple temperature
0399            157   ; Display: 0000.00
0399            158   Display_formated_BCD_To:
0399 C000       159            push ar0
039B A83F       159            mov r0, bcd+3
039D 120113     159            lcall ?Display_BCD
03A0 D000       159            pop ar0
03A2 C000       160            push ar0
03A4 A83E       160            mov r0, bcd+2
03A6 120113     160            lcall ?Display_BCD
03A9 D000       160            pop ar0
03AB C0E0       161            push acc
03AD 742E       161            mov a, #'.'
03AF 1200C4     161            lcall ?WriteData
03B2 D0E0       161            pop acc
03B4 C000       162            push ar0
03B6 A83D       162            mov r0, bcd+1
03B8 120113     162            lcall ?Display_BCD
03BB D000       162            pop ar0
03BD            163   
03BD            164   
03BD 22         165            ret
03BE            166            
03BE            167   ; Formatting to display ambient temperature
03BE            168   ; Display: 00.00
03BE            169   Display_formated_BCD_Tj:
03BE C000       170            push ar0
03C0 A83E       170            mov r0, bcd+2
03C2 120113     170            lcall ?Display_BCD
03C5 D000       170            pop ar0
03C7 C0E0       171            push acc
03C9 742E       171            mov a, #'.'
03CB 1200C4     171            lcall ?WriteData
03CE D0E0       171            pop acc
03D0 C000       172            push ar0
03D2 A83D       172            mov r0, bcd+1
03D4 120113     172            lcall ?Display_BCD
03D7 D000       172            pop ar0
03D9 22         173            ret
03DA            174   
03DA            175   
03DA            176   ; INITIALIZATION SUBROUTINES
03DA            177   Init_All:
03DA            178            ; Configure all the pins for biderectional I/O
03DA 75AC00     179            mov     P3M1, #0x00
03DD 75AD00     180            mov     P3M2, #0x00
03E0 75B300     181            mov     P1M1, #0x00
03E3 75B400     182            mov     P1M2, #0x00
03E6 75B100     183            mov     P0M1, #0x00
03E9 75B200     184            mov     P0M2, #0x00
03EC            185   
03EC 438E10     186            orl     CKCON, #0x10 ; CLK is the input for timer 1
03EF 438780     187            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03F2 759852     188            mov     SCON, #0x52
03F5 53C4DF     189            anl     T3CON, #0b11011111
03F8 53890F     190            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03FB 438920     191            orl     TMOD, #0x20 ; Timer 1 Mode 2
03FE 758DF7     192            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0401 D28E       193            setb TR1
0403            194            
0403            195            ; Using timer 0 for delay functions.  Initialize here:
0403 C28C       196            clr     TR0 ; Stop timer 0
0405 438E08     197            orl     CKCON,#0x08 ; CLK is the input for timer 0
0408 5389F0     198            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
040B 438901     199            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
040E            200   
040E            201            ; Initialize timer 2 for periodic interrupts
040E 75C800     202            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0411 75CDD7     203            mov TH2, #high(TIMER2_RELOAD)
0414 75CC79     204            mov TL2, #low(TIMER2_RELOAD)
0417            205            ; Set the reload value
0417 75C9A0     206            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
041A 75CBD7     207            mov RCMP2H, #high(TIMER2_RELOAD)
041D 75CA79     208            mov RCMP2L, #low(TIMER2_RELOAD)
0420            209            ; Init the free running 10 ms counter to zero
0420 753000     210            mov pwm_counter, #0
0423            211            ; Enable the timer and interrupts
0423 439B80     212            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0426 D2CA       213       setb TR2  ; Enable timer 2
0428            214   
0428 D2AF       215            setb EA ; Enable global interrupts
042A            216            
042A            217            ; Initialize the pin used by the ADC (P1.1) as input.
042A 43B302     218            orl     P1M1, #0b00000010
042D 53B4FD     219            anl     P1M2, #0b11111101
0430            220   
0430            221            ; Initialize the pin used by the ADC (P3.0) as input.
0430 43AC01     222            orl     P3M1, #0b00000001
0433 53ADFE     223            anl     P3M2, #0b11111110
0436            224            
0436            225            ; Initialize and start the ADC:
0436 53E8F0     226            anl ADCCON0, #0xF0
0439 43E807     227            orl ADCCON0, #0x07 ; Select channel 7
043C            228   
043C 53E2F0     229            anl ADCCON2, #0xF0
043F 43E201     230            orl ADCCON2, #0x01 ; Select channel 1
0442            231   
0442            232            ; AINDIDS select if some pins are analog inputs or digital I/O:
0442 75F600     233            mov AINDIDS, #0x00 ; Disable all analog inputs
0445 43F680     234            orl AINDIDS, #0b10000000 ; P1.1 is analog input
0448 43F601     235            orl AINDIDS, #0b00000001 ; P3.0 is analog input
044B 43E101     236            orl ADCCON1, #0x01 ; Enable ADC
044E            237            
044E 22         238            ret
044F            239   
044F            240   ;---------------------------------;
044F            241   ; ISR for timer 2                 ;
044F            242   ;---------------------------------;
044F            243   Timer2_ISR:
044F C2CF       244            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0451 C0D0       245            push psw
0453 C0E0       246            push acc
0455            247            
0455 0530       248            inc pwm_counter
0457 C3         249            clr c
0458 E531       250            mov a, pwm
045A 9530       251            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
045C B3         252            cpl c
045D 9292       253            mov PWM_OUT, c
045F            254            
045F E530       255            mov a, pwm_counter
0461 B46407     256            cjne a, #100, Timer2_ISR_done
0464 753000     257            mov pwm_counter, #0
0467 0532       258            inc seconds ; It is super easy to keep a seconds count here
0469 D201       259            setb s_flag
046B            260   
046B            261   Timer2_ISR_done:
046B D0E0       262            pop acc
046D D0D0       263            pop psw
046F 32         264            reti
0470            265   
0470            266   ; Flash Memory Subroutines
0470            267   ;******************************************************************************
0470            268   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0470            269   ; Data Flash when user code is executed in APROM.
0470            270   ; (The base of this code is listed in the N76E003 user manual)
0470            271   ;******************************************************************************
0470            272   
0470            273   Save_Variables:
0470 C2AF       274            CLR EA  ; MUST disable interrupts for this to work!
0472            275            
0472 75C7AA     276            MOV TA, #0aah ; CHPCON is TA protected
0475 75C755     277            MOV TA, #55h
0478 439F01     278            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
047B            279            
047B 75C7AA     280            MOV TA, #0aah ; IAPUEN is TA protected
047E 75C755     281            MOV TA, #55h
0481 43A501     282            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
0484            283            
0484 75AF22     284            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
0487 75A73F     285            MOV IAPAH, #3fh ; Address high byte
048A 75A680     286            MOV IAPAL, #80h ; Address low byte
048D 75AEFF     287            MOV IAPFD, #0FFh ; Data to load into the address byte
0490 75C7AA     288            MOV TA, #0aah ; IAPTRG is TA protected
0493 75C755     289            MOV TA, #55h
0496 43A401     290            ORL IAPTRG, #00000001b ; write �1� to IAPGO to trigger IAP process
0499            291            
0499 75AF21     292            MOV IAPCN, #BYTE_PROGRAM_AP
049C 75A73F     293            MOV IAPAH, #3fh
049F            294            
049F            295            ;Load 3f80h with temp_soak
049F 75A680     296            MOV IAPAL, #80h
04A2 8534AE     297            MOV IAPFD, temp_soak
04A5 75C7AA     298            MOV TA, #0aah
04A8 75C755     299            MOV TA, #55h
04AB 43A401     300            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
04AE            301            
04AE            302            ;Load 3f81h with Time_soak
04AE 75A681     303            MOV IAPAL, #81h
04B1 8535AE     304            MOV IAPFD, Time_soak
04B4 75C7AA     305            MOV TA, #0aah
04B7 75C755     306            MOV TA, #55h
04BA 43A401     307            ORL IAPTRG,#00000001b
04BD            308            
04BD            309            ;Load 3f82h with Temp_refl
04BD 75A682     310            MOV IAPAL, #82h
04C0 8536AE     311            MOV IAPFD, Temp_refl
04C3 75C7AA     312            MOV TA, #0aah
04C6 75C755     313            MOV TA, #55h
04C9 43A401     314            ORL IAPTRG,#00000001b
04CC            315            
04CC            316            ;Load 3f83h with Time_refl
04CC 75A683     317            MOV IAPAL, #83h
04CF 8537AE     318            MOV IAPFD, Time_refl
04D2 75C7AA     319            MOV TA, #0aah
04D5 75C755     320            MOV TA, #55h
04D8 43A401     321            ORL IAPTRG,#00000001b
04DB            322   
04DB            323            ;Load 3f84h with 55h
04DB 75A684     324            MOV IAPAL,#84h
04DE 75AE55     325            MOV IAPFD, #55h
04E1 75C7AA     326            MOV TA, #0aah
04E4 75C755     327            MOV TA, #55h
04E7 43A401     328            ORL IAPTRG, #00000001b
04EA            329   
04EA            330            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
04EA 75A685     331            MOV IAPAL, #85h
04ED 75AEAA     332            MOV IAPFD, #0aah
04F0 75C7AA     333            MOV TA, #0aah
04F3 75C755     334            MOV TA, #55h
04F6 43A401     335            ORL IAPTRG, #00000001b
04F9            336   
04F9 75C7AA     337            MOV TA, #0aah
04FC 75C755     338            MOV TA, #55h
04FF 53A5FE     339            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0502 75C7AA     340            MOV TA, #0aah
0505 75C755     341            MOV TA, #55h
0508 539FFE     342            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
050B            343            
050B D2AF       344            setb EA  ; Re-enable interrupts
050D            345   
050D 22         346            ret
050E            347   
050E            348   Load_Variables:
050E 903F84     349            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
0511 E4         350            clr a
0512 93         351            movc a, @a+dptr
0513 B4551D     352            cjne a, #0x55, Load_Defaults
0516 A3         353            inc dptr      ; Second key value location.  Must be 0xaa
0517 E4         354            clr a
0518 93         355            movc a, @a+dptr
0519 B4AA17     356            cjne a, #0xaa, Load_Defaults
051C            357            
051C 903F80     358            mov dptr, #0x3f80
051F E4         359            clr a
0520 93         360            movc a, @a+dptr
0521 F534       361            mov temp_soak, a
0523            362            
0523 A3         363            inc dptr
0524 E4         364            clr a
0525 93         365            movc a, @a+dptr
0526 F535       366            mov Time_soak, a
0528            367            
0528 A3         368            inc dptr
0529 E4         369            clr a
052A 93         370            movc a, @a+dptr
052B F536       371            mov Temp_refl, a
052D            372            
052D A3         373            inc dptr
052E E4         374            clr a
052F 93         375            movc a, @a+dptr
0530 F537       376            mov Time_refl, a
0532 22         377            ret
0533            378   
0533            379   Load_Defaults:
0533 753401     380            mov temp_soak, #1
0536 753502     381            mov Time_soak, #2
0539 753603     382            mov Temp_refl, #3
053C 753704     383            mov Time_refl, #4
053F 22         384            ret
0540            385   
0540            386   wait_1ms:
0540 C28C       387            clr     TR0 ; Stop timer 0
0542 C28D       388            clr     TF0 ; Clear overflow flag
0544 758CBF     389            mov     TH0, #high(TIMER0_RELOAD_1MS)
0547 758A28     390            mov     TL0,#low(TIMER0_RELOAD_1MS)
054A D28C       391            setb TR0
054C 308DFD     392            jnb     TF0, $ ; Wait for overflow
054F 22         393            ret
0550            394   
0550            395   ; Wait the number of miliseconds in R2
0550            396   waitms:
0550 120540     397            lcall wait_1ms
0553 DAFB       398            djnz R2, waitms
0555 22         399            ret
0556            400   
0556            401   ADC_to_PB:
0556 53E8F0     402            anl ADCCON0, #0xF0
0559 43E800     403            orl ADCCON0, #0x00 ; Select AIN0
055C            404            
055C C2EF       405            clr ADCF
055E D2EE       406            setb ADCS   ; ADC start trigger signal
0560 30EFFD     407       jnb ADCF, $ ; Wait for conversion complete
0563            408   
0563 D209       409            setb PB7
0565 D208       410            setb PB6
0567 D207       411            setb PB5
0569 D206       412            setb PB4
056B D205       413            setb PB3
056D D204       414            setb PB2
056F D203       415            setb PB1
0571 D202       416            setb PB0
0573            417            
0573            418            ; Check PB7
0573            419   ADC_to_PB_L7:
0573 C3         420            clr c
0574 E5C3       421            mov a, ADCRH
0576 94F0       422            subb a, #0xf0
0578 4003       423            jc ADC_to_PB_L6
057A C209       424            clr PB7
057C 22         425            ret
057D            426   
057D            427            ; Check PB6
057D            428   ADC_to_PB_L6:
057D C3         429            clr c
057E E5C3       430            mov a, ADCRH
0580 94D0       431            subb a, #0xd0
0582 4003       432            jc ADC_to_PB_L5
0584 C208       433            clr PB6
0586 22         434            ret
0587            435   
0587            436            ; Check PB5
0587            437   ADC_to_PB_L5:
0587 C3         438            clr c
0588 E5C3       439            mov a, ADCRH
058A 94B0       440            subb a, #0xb0
058C 4003       441            jc ADC_to_PB_L4
058E C207       442            clr PB5
0590 22         443            ret
0591            444   
0591            445            ; Check PB4
0591            446   ADC_to_PB_L4:
0591 C3         447            clr c
0592 E5C3       448            mov a, ADCRH
0594 9490       449            subb a, #0x90
0596 4003       450            jc ADC_to_PB_L3
0598 C206       451            clr PB4
059A 22         452            ret
059B            453   
059B            454            ; Check PB3
059B            455   ADC_to_PB_L3:
059B C3         456            clr c
059C E5C3       457            mov a, ADCRH
059E 9470       458            subb a, #0x70
05A0 4003       459            jc ADC_to_PB_L2
05A2 C205       460            clr PB3
05A4 22         461            ret
05A5            462   
05A5            463            ; Check PB2
05A5            464   ADC_to_PB_L2:
05A5 C3         465            clr c
05A6 E5C3       466            mov a, ADCRH
05A8 9450       467            subb a, #0x50
05AA 4003       468            jc ADC_to_PB_L1
05AC C204       469            clr PB2
05AE 22         470            ret
05AF            471   
05AF            472            ; Check PB1
05AF            473   ADC_to_PB_L1:
05AF C3         474            clr c
05B0 E5C3       475            mov a, ADCRH
05B2 9430       476            subb a, #0x30
05B4 4003       477            jc ADC_to_PB_L0
05B6 C203       478            clr PB1
05B8 22         479            ret
05B9            480   
05B9            481            ; Check PB0
05B9            482   ADC_to_PB_L0:
05B9 C3         483            clr c
05BA E5C3       484            mov a, ADCRH
05BC 9410       485            subb a, #0x10
05BE 4003       486            jc ADC_to_PB_Done
05C0 C202       487            clr PB0
05C2 22         488            ret
05C3            489            
05C3            490   ADC_to_PB_Done:
05C3            491            ; No puhsbutton pressed         
05C3 22         492            ret
05C4            493   
05C4            494   ; MAIN 
05C4            495   main:
05C4 75817F     496            mov sp, #0x7f
05C7 1203DA     497       lcall Init_All
05CA 1200CE     498       lcall LCD_4BIT
05CD            499       ; initial messages in LCD
05CD C0E0       500            push acc
05CF 7401       500            mov a, #1
05D1 14         500            dec a
05D2 12010E     500            lcall ?Set_Cursor_1 ; Select column and row
05D5 D0E0       500            pop acc
05D7 C083       501            push dph
05D9 C082       501            push dpl
05DB C0E0       501            push acc
05DD 90002E     501            mov dptr, #temperature_message
05E0 120101     501            lcall ?Send_Constant_String
05E3 D0E0       501            pop acc
05E5 D082       501            pop dpl
05E7 D083       501            pop dph
05E9            502   
05E9 753B00     503            mov FSM1_state, #0
05EC 753432     504       mov Temp_soak, #50
05EF 75353C     505            mov Time_soak, #60
05F2 7536C8     506            mov Temp_refl, #200
05F5 75372D     507            mov Time_refl, #45
05F8 753800     508            mov sec, #0
05FB            509   
05FB            510   Forever:
05FB 120556     511            lcall ADC_to_PB
05FE            512            ;lcall Display_PushButtons_ADC
05FE            513            
05FE 75E807     514            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
0601 C2EF       515            clr ADCF
0603 D2EE       516            setb ADCS ;  ADC start trigger signal
0605 30EFFD     517       jnb ADCF, $ ; Wait for conversion complete
0608            518       
0608            519       ; Read the ADC result and store in [R1, R0]
0608 E5C3       520       mov a, ADCRH   
060A C4         521       swap a
060B C0E0       522       push acc
060D 540F       523       anl a, #0x0f
060F F9         524       mov R1, a
0610 D0E0       525       pop acc
0612 54F0       526       anl a, #0xf0
0614 45C2       527       orl a, ADCRL
0616 F8         528       mov R0, A
0617            529       
0617 75E801     530       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
061A C2EF       531            clr ADCF
061C D2EE       532            setb ADCS ;  ADC start trigger signal
061E 30EFFD     533       jnb ADCF, $ ; Wait for conversion complete
0621            534       
0621            535       ; Read the ADC result and store in [R4, R3]
0621 E5C3       536       mov a, ADCRH   
0623 C4         537       swap a
0624 C0E0       538       push acc
0626 540F       539       anl a, #0x0f
0628 FC         540       mov R4, a
0629 D0E0       541       pop acc
062B 54F0       542       anl a, #0xf0
062D 45C2       543       orl a, ADCRL
062F FB         544       mov R3, A
0630            545       
0630            546            ; Convert to LM335 temperature to voltage
0630 8B30       547            mov x+0, R3
0632 8C31       548            mov x+1, R4
0634 753200     549            mov x+2, #0
0637 753300     550            mov x+3, #0
063A 75347C     551            mov y+0, #low (50300 % 0x10000) 
063D 7535C4     551            mov y+1, #high(50300 % 0x10000) 
0640 753600     551            mov y+2, #low (50300 / 0x10000) 
0643 753700     551            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0646 1202A3     552            lcall mul32
0649 7534FF     553            mov y+0, #low (4095 % 0x10000) 
064C 75350F     553            mov y+1, #high(4095 % 0x10000) 
064F 753600     553            mov y+2, #low (4095 / 0x10000) 
0652 753700     553            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0655 120330     554            lcall div32
0658 7534D0     555            mov y+0, #low (27600 % 0x10000) 
065B 75356B     555            mov y+1, #high(27600 % 0x10000) 
065E 753600     555            mov y+2, #low (27600 / 0x10000) 
0661 753700     555            mov y+3, #high(27600 / 0x10000) 
0664 12020F     556            lcall sub32
0667 753464     557            mov y+0, #low (100 % 0x10000) 
066A 753500     557            mov y+1, #high(100 % 0x10000) 
066D 753600     557            mov y+2, #low (100 / 0x10000) 
0670 753700     557            mov y+3, #high(100 / 0x10000) 
0673 1202A3     558            lcall mul32
0676            559            
0676            560            ; Convert to BCD and display
0676 120129     561            lcall hex2bcd
0679 C0E0       562            push acc
067B 740C       562            mov a, #12
067D 14         562            dec a
067E 12010E     562            lcall ?Set_Cursor_1 ; Select column and row
0681 D0E0       562            pop acc
0683 1203BE     563            lcall Display_formated_BCD_Tj
0686            564   
0686            565            ; Convert value back to hex to use for calculations
0686 1201B2     566            lcall bcd2hex
0689            567   
0689            568            ; Storing the ambient temperature
0689 853038     569            mov amb_temp+0, x+0
068C 853139     570            mov amb_temp+1, x+1
068F 85323A     571            mov amb_temp+2, x+2
0692 85333B     572            mov amb_temp+3, x+3
0695            573   
0695            574            ; Convert to thermocouple voltage to temperature
0695 8830       575            mov x+0, R0
0697 8931       576            mov x+1, R1
0699 753200     577            mov x+2, #0
069C 753300     578            mov x+3, #0
069F 75347C     579            mov y+0, #low (50300 % 0x10000) 
06A2 7535C4     579            mov y+1, #high(50300 % 0x10000) 
06A5 753600     579            mov y+2, #low (50300 / 0x10000) 
06A8 753700     579            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
06AB 1202A3     580            lcall mul32
06AE 7534FF     581            mov y+0, #low (4095 % 0x10000) 
06B1 75350F     581            mov y+1, #high(4095 % 0x10000) 
06B4 753600     581            mov y+2, #low (4095 / 0x10000) 
06B7 753700     581            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
06BA 120330     582            lcall div32
06BD 753464     583            mov y+0, #low (100 % 0x10000) 
06C0 753500     583            mov y+1, #high(100 % 0x10000) 
06C3 753600     583            mov y+2, #low (100 / 0x10000) 
06C6 753700     583            mov y+3, #high(100 / 0x10000) 
06C9 120330     584            lcall div32
06CC 753445     585            mov y+0, #low (5189 % 0x10000) 
06CF 753514     585            mov y+1, #high(5189 % 0x10000) 
06D2 753600     585            mov y+2, #low (5189 / 0x10000) 
06D5 753700     585            mov y+3, #high(5189 / 0x10000) 
06D8 1202A3     586            lcall mul32
06DB            587   
06DB            588            ; Adding the ambient temperature to oven temperature
06DB 853834     589            mov y+0, amb_temp+0
06DE 853935     590            mov y+1, amb_temp+1
06E1 853A36     591            mov y+2, amb_temp+2
06E4 853B37     592            mov y+3, amb_temp+3
06E7 1201EE     593            lcall add32
06EA            594            
06EA            595            ; Convert to BCD and display
06EA 120129     596            lcall hex2bcd
06ED C0E0       597            push acc
06EF 7403       597            mov a, #3
06F1 14         597            dec a
06F2 12010E     597            lcall ?Set_Cursor_1 ; Select column and row
06F5 D0E0       597            pop acc
06F7 120399     598            lcall Display_formated_BCD_To
06FA            599   
06FA            600            ; Storing the thermocouple temperature into var temp 
06FA 753410     601            mov y+0, #low (10000 % 0x10000) 
06FD 753527     601            mov y+1, #high(10000 % 0x10000) 
0700 753600     601            mov y+2, #low (10000 / 0x10000) 
0703 753700     601            mov y+3, #high(10000 / 0x10000) 
0706 120330     602            lcall div32
0709 853039     603            mov temp+0, x+0
070C 85313A     604            mov temp+1, x+1
070F            605            
070F            606            ; Wait 100 ms between readings
070F 7A64       607            mov R2, #100
0711 120550     608            lcall waitms
0714            609            
0714            610   ; STATE MACHINE  
0714            611   FSM1:
0714 E53B       612            mov a, FSM1_state
0716            613   
0716            614   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
0716            615   FSM1_state0:
0716 B40028     616            cjne a, #0, FSM1_state1
0719 C0E0       617            push acc
071B 7405       617            mov a, #5
071D 14         617            dec a
071E 12010C     617            lcall ?Set_Cursor_2 ; Select column and row
0721 D0E0       617            pop acc
0723 C083       618            push dph
0725 C082       618            push dpl
0727 C0E0       618            push acc
0729 90003F     618            mov dptr, #state0
072C 120101     618            lcall ?Send_Constant_String
072F D0E0       618            pop acc
0731 D082       618            pop dpl
0733 D083       618            pop dph
0735 753100     619            mov pwm, #0
0738 200203     620            jb PB0, FSM1_state0_done
073B 753B01     621            mov FSM1_state, #1
073E            622   FSM1_state0_done:
073E 0205FB     623            ljmp Forever
0741            624   
0741            625   ; pre-heat state. Should go to state two when temp reaches temp_soak     
0741            626   FSM1_state1:
0741 B40134     627            cjne a, #1, FSM1_state2
0744 C0E0       628            push acc
0746 7405       628            mov a, #5
0748 14         628            dec a
0749 12010C     628            lcall ?Set_Cursor_2 ; Select column and row
074C D0E0       628            pop acc
074E C083       629            push dph
0750 C082       629            push dpl
0752 C0E0       629            push acc
0754 900047     629            mov dptr, #state1
0757 120101     629            lcall ?Send_Constant_String
075A D0E0       629            pop acc
075C D082       629            pop dpl
075E D083       629            pop dph
0760            630            
0760 C296       631            clr P1.6
0762            632            
0762 753164     633            mov pwm, #100
0765 753800     634            mov sec, #0
0768            635            
0768            636            ; These two lines are temporary. temp should be read from the thermocouple wire
0768 753464     637            mov temp_soak, #100
076B            638            
076B E534       639            mov a, temp_soak
076D D3         640            setb c
076E 9539       641            subb a, temp
0770 5003       642            jnc FSM1_state1_done
0772 753B02     643            mov FSM1_state, #2
0775            644   FSM1_state1_done:
0775 0205FB     645            ljmp Forever
0778            646   
0778            647   ; State 2
0778            648   FSM1_state2:
0778 D296       649            setb P1.6 ;speaker
077A B4023A     650            cjne a, #2, FSM1_state3
077D C0E0       651            push acc
077F 7405       651            mov a, #5
0781 14         651            dec a
0782 12010C     651            lcall ?Set_Cursor_2 ; Select column and row
0785 D0E0       651            pop acc
0787 C083       652            push dph
0789 C082       652            push dpl
078B C0E0       652            push acc
078D 90004F     652            mov dptr, #state2
0790 120101     652            lcall ?Send_Constant_String
0793 D0E0       652            pop acc
0795 D082       652            pop dpl
0797 D083       652            pop dph
0799 753114     653            mov pwm, #20
079C            654            
079C E538       655            mov a, sec
079E 2401       656            add a, #1
07A0 F538       657            mov sec, a
07A2            658   
07A2 7A32       659            mov R2, #50
07A4 120550     660            lcall waitms
07A7            661   
07A7 E535       662            mov a, Time_soak
07A9 C3         663            clr c
07AA 9538       664            subb a, sec
07AC 5003       665            jnc FSM1_state2_done
07AE 753B03     666            mov FSM1_state, #3
07B1            667   FSM1_state2_done:
07B1 0205FB     668            ljmp Forever
07B4            669   
07B4            670   ;DELETE
07B4            671   jump:
07B4 020716     672   ljmp FSM1_state0         
07B7            673   
07B7            674   ;State 3
07B7            675   FSM1_state3:
07B7 B4032F     676            cjne a, #3, FSM1_state4
07BA C0E0       677            push acc
07BC 7405       677            mov a, #5
07BE 14         677            dec a
07BF 12010C     677            lcall ?Set_Cursor_2 ; Select column and row
07C2 D0E0       677            pop acc
07C4 C083       678            push dph
07C6 C082       678            push dpl
07C8 C0E0       678            push acc
07CA 900057     678            mov dptr, #state3
07CD 120101     678            lcall ?Send_Constant_String
07D0 D0E0       678            pop acc
07D2 D082       678            pop dpl
07D4 D083       678            pop dph
07D6 753164     679            mov pwm, #100
07D9 753800     680            mov sec, #0
07DC            681            
07DC            682            
07DC E536       683            mov a, Temp_refl
07DE C3         684            clr c
07DF 9539       685            subb a, temp
07E1 5003       686            jnc FSM1_state3_done
07E3 753B04     687            mov FSM1_state, #4
07E6            688   FSM1_state3_done:
07E6 0205FB     689            ljmp Forever
07E9            690   
07E9            691   
07E9            692   ;State 4
07E9            693   FSM1_state4:
07E9 B40437     694            cjne a, #4, FSM1_state5
07EC C0E0       695            push acc
07EE 7405       695            mov a, #5
07F0 14         695            dec a
07F1 12010C     695            lcall ?Set_Cursor_2 ; Select column and row
07F4 D0E0       695            pop acc
07F6 C083       696            push dph
07F8 C082       696            push dpl
07FA C0E0       696            push acc
07FC 90005F     696            mov dptr, #state4
07FF 120101     696            lcall ?Send_Constant_String
0802 D0E0       696            pop acc
0804 D082       696            pop dpl
0806 D083       696            pop dph
0808 753114     697            mov pwm, #20
080B            698            
080B E538       699            mov a, sec
080D 2401       700            add a, #1
080F F538       701            mov sec, a
0811            702   
0811 7A32       703            mov R2, #50
0813 120550     704            lcall waitms
0816            705            
0816 E537       706            mov a, Time_refl
0818 C3         707            clr c
0819 9538       708            subb a,sec
081B 5003       709            jnc FSM1_state4_done
081D 753B05     710            mov FSM1_state, #5
0820            711   FSM1_state4_done:
0820 0205FB     712            ljmp Forever
0823            713            
0823            714   FSM1_state5:
0823 B4058E     715            cjne a, #5, jump
0826 C0E0       716            push acc
0828 7405       716            mov a, #5
082A 14         716            dec a
082B 12010C     716            lcall ?Set_Cursor_2 ; Select column and row
082E D0E0       716            pop acc
0830 C083       717            push dph
0832 C082       717            push dpl
0834 C0E0       717            push acc
0836 900067     717            mov dptr, #state5
0839 120101     717            lcall ?Send_Constant_String
083C D0E0       717            pop acc
083E D082       717            pop dpl
0840 D083       717            pop dph
0842 753100     718            mov pwm, #0
0845            719            
0845            720            
0845 743C       721            mov a, #60
0847 C3         722            clr c
0848 9539       723            subb a, temp
084A 4003       724            jc FSM1_state5_done
084C 753B00     725            mov FSM1_state,#0
084F            726   FSM1_state5_done:
084F 120470     727            lcall Save_Variables ; Save variables in flash memory
0852 0205FB     728            ljmp Forever
0855            729            
0855            730   
0855            731   
0855            732   ;Any additions to be checked
0855            733   EN
