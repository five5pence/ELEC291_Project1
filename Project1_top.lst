                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 020532      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014             45   
0014 3000        46   state0:     db '0', 0
0016 3100        47   state1:     db '1', 0
0018 3200        48   state2:     db '2', 0
001A 3300        49   state3:     db '3', 0
001C 3400        50   state4:     db '4', 0
001E 3500        51   state5:     db '5', 0
0020             52   
0020             53   cseg
0020             54   
0020             55   ; SYMBOLIC CONSTANTS
0020             56   
0020             57   ; INPUTS
0020             58   tempsensor_in equ P3.0
0020             59   thermocouple_in equ P1.1
0020             60   
0020             61   ; OUTPUTS
0020             62   oven_out equ P1.2
0020             63   speaker_out equ P1.6
0020             64   
0020             65   CSEG
0020             66   ; LCD
0020             67   LCD_RS equ P1.3
0020             68   LCD_E equ P1.4
0020             69   LCD_D4 equ P0.0
0020             70   LCD_D5 equ P0.1
0020             71   LCD_D6 equ P0.2
0020             72   LCD_D7 equ P0.3
0020             73   
                 75   	$LIST
00D4             77   
00D4             78   ; Flash instructions
00D4             79   PAGE_ERASE_AP   EQU 00100010b
00D4             80   BYTE_PROGRAM_AP EQU 00100001b
00D4             81   
00D4             82   ; These register definitions needed by 'math32.inc'
0030             83   DSEG at 30H
0030             84   x:   ds 4
0034             85   y:   ds 4
0038             86   amb_temp: ds 4 ; ambient temperature read by LM335
003C             87   bcd: ds 5
0041             88   
0041             89   DSEG
0041             90   pwm: ds 1
0042             91   state: ds 1
0043             92   temp_soak: ds 1
0044             93   Time_soak: ds 1
0045             94   Temp_refl: ds 1
0046             95   Time_refl: ds 1
0047             96   
0047             97   sec: ds 1
0048             98   temp: ds 2
004A             99   
004A            100   
004A            101   FSM1_state: ds 1
004B            102   
0000            103   BSEG
0000            104   reflow_flag: dbit 1
0001            105   soak_flag: dbit 1
0002            106   mf: dbit 1
0003            107   
0003            108   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            109   PB0: dbit 1
0004            110   PB1: dbit 1
0005            111   PB2: dbit 1
0006            112   PB3: dbit 1
0007            113   PB4: dbit 1
0008            114   PB5: dbit 1
0009            115   PB6: dbit 1
000A            116   PB7: dbit 1
000B            117   
000B            118   ; MATH32
                546   $LIST
                120   $LIST
0344            122   
0344            123   ; Blank Macro
                124   Left_blank mac
                125   	mov a, %0
                126   	anl a, #0xf0
                127   	swap a
                128   	jz Left_blank_%M_a
                129   	ljmp %1
                130   Left_blank_%M_a:
                131   	Display_char(#' ')
                132   	mov a, %0
                133   	anl a, #0x0f
                134   	jz Left_blank_%M_b
                135   	ljmp %1
                136   Left_blank_%M_b:
                137   	Display_char(#' ')
                138   endmac
0344            139   
0344            140   ; Formatting to display thermocouple temperature
0344            141   ; Display: 0000.00
0344            142   Display_formated_BCD_To:
0344 C000       143            push ar0
0346 A83F       143            mov r0, bcd+3
0348 1200BE     143            lcall ?Display_BCD
034B D000       143            pop ar0
034D C000       144            push ar0
034F A83E       144            mov r0, bcd+2
0351 1200BE     144            lcall ?Display_BCD
0354 D000       144            pop ar0
0356 C0E0       145            push acc
0358 742E       145            mov a, #'.'
035A 12006F     145            lcall ?WriteData
035D D0E0       145            pop acc
035F C000       146            push ar0
0361 A83D       146            mov r0, bcd+1
0363 1200BE     146            lcall ?Display_BCD
0366 D000       146            pop ar0
0368            147   
0368            148   
0368 22         149            ret
0369            150            
0369            151   ; Formatting to display ambient temperature
0369            152   ; Display: 00.00
0369            153   Display_formated_BCD_Tj:
0369 C000       154            push ar0
036B A83E       154            mov r0, bcd+2
036D 1200BE     154            lcall ?Display_BCD
0370 D000       154            pop ar0
0372 C0E0       155            push acc
0374 742E       155            mov a, #'.'
0376 12006F     155            lcall ?WriteData
0379 D0E0       155            pop acc
037B C000       156            push ar0
037D A83D       156            mov r0, bcd+1
037F 1200BE     156            lcall ?Display_BCD
0382 D000       156            pop ar0
0384 22         157            ret
0385            158   
0385            159   
0385            160   ; INITIALIZATION SUBROUTINES
0385            161   Init_All:
0385            162            ; Configure all the pins for biderectional I/O
0385 75AC00     163            mov     P3M1, #0x00
0388 75AD00     164            mov     P3M2, #0x00
038B 75B300     165            mov     P1M1, #0x00
038E 75B400     166            mov     P1M2, #0x00
0391 75B100     167            mov     P0M1, #0x00
0394 75B200     168            mov     P0M2, #0x00
0397            169   
0397 438E10     170            orl     CKCON, #0x10 ; CLK is the input for timer 1
039A 438780     171            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
039D 759852     172            mov     SCON, #0x52
03A0 53C4DF     173            anl     T3CON, #0b11011111
03A3 53890F     174            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03A6 438920     175            orl     TMOD, #0x20 ; Timer 1 Mode 2
03A9 758DF7     176            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03AC D28E       177            setb TR1
03AE            178            
03AE            179            ; Using timer 0 for delay functions.  Initialize here:
03AE C28C       180            clr     TR0 ; Stop timer 0
03B0 438E08     181            orl     CKCON,#0x08 ; CLK is the input for timer 0
03B3 5389F0     182            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03B6 438901     183            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03B9            184            
03B9            185            ; Initialize the pin used by the ADC (P1.1) as input.
03B9 43B302     186            orl     P1M1, #0b00000010
03BC 53B4FD     187            anl     P1M2, #0b11111101
03BF            188   
03BF            189            ; Initialize the pin used by the ADC (P3.0) as input.
03BF 43AC01     190            orl     P3M1, #0b00000001
03C2 53ADFE     191            anl     P3M2, #0b11111110
03C5            192            
03C5            193            ; Initialize and start the ADC:
03C5 53E8F0     194            anl ADCCON0, #0xF0
03C8 43E807     195            orl ADCCON0, #0x07 ; Select channel 7
03CB            196   
03CB 53E2F0     197            anl ADCCON2, #0xF0
03CE 43E201     198            orl ADCCON2, #0x01 ; Select channel 1
03D1            199   
03D1            200            ; AINDIDS select if some pins are analog inputs or digital I/O:
03D1 75F600     201            mov AINDIDS, #0x00 ; Disable all analog inputs
03D4 43F680     202            orl AINDIDS, #0b10000000 ; P1.1 is analog input
03D7 43F601     203            orl AINDIDS, #0b00000001 ; P3.0 is analog input
03DA 43E101     204            orl ADCCON1, #0x01 ; Enable ADC
03DD            205            
03DD 22         206            ret
03DE            207   
03DE            208   ; Flash Memory Subroutines
03DE            209   ;******************************************************************************
03DE            210   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
03DE            211   ; Data Flash when user code is executed in APROM.
03DE            212   ; (The base of this code is listed in the N76E003 user manual)
03DE            213   ;******************************************************************************
03DE            214   
03DE            215   Save_Variables:
03DE C2AF       216            CLR EA  ; MUST disable interrupts for this to work!
03E0            217            
03E0 75C7AA     218            MOV TA, #0aah ; CHPCON is TA protected
03E3 75C755     219            MOV TA, #55h
03E6 439F01     220            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
03E9            221            
03E9 75C7AA     222            MOV TA, #0aah ; IAPUEN is TA protected
03EC 75C755     223            MOV TA, #55h
03EF 43A501     224            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
03F2            225            
03F2 75AF22     226            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
03F5 75A73F     227            MOV IAPAH, #3fh ; Address high byte
03F8 75A680     228            MOV IAPAL, #80h ; Address low byte
03FB 75AEFF     229            MOV IAPFD, #0FFh ; Data to load into the address byte
03FE 75C7AA     230            MOV TA, #0aah ; IAPTRG is TA protected
0401 75C755     231            MOV TA, #55h
0404 43A401     232            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0407            233            
0407 75AF21     234            MOV IAPCN, #BYTE_PROGRAM_AP
040A 75A73F     235            MOV IAPAH, #3fh
040D            236            
040D            237            ;Load 3f80h with temp_soak
040D 75A680     238            MOV IAPAL, #80h
0410 8543AE     239            MOV IAPFD, temp_soak
0413 75C7AA     240            MOV TA, #0aah
0416 75C755     241            MOV TA, #55h
0419 43A401     242            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
041C            243            
041C            244            ;Load 3f81h with Time_soak
041C 75A681     245            MOV IAPAL, #81h
041F 8544AE     246            MOV IAPFD, Time_soak
0422 75C7AA     247            MOV TA, #0aah
0425 75C755     248            MOV TA, #55h
0428 43A401     249            ORL IAPTRG,#00000001b
042B            250            
042B            251            ;Load 3f82h with Temp_refl
042B 75A682     252            MOV IAPAL, #82h
042E 8545AE     253            MOV IAPFD, Temp_refl
0431 75C7AA     254            MOV TA, #0aah
0434 75C755     255            MOV TA, #55h
0437 43A401     256            ORL IAPTRG,#00000001b
043A            257            
043A            258            ;Load 3f83h with Time_refl
043A 75A683     259            MOV IAPAL, #83h
043D 8546AE     260            MOV IAPFD, Time_refl
0440 75C7AA     261            MOV TA, #0aah
0443 75C755     262            MOV TA, #55h
0446 43A401     263            ORL IAPTRG,#00000001b
0449            264   
0449            265            ;Load 3f84h with 55h
0449 75A684     266            MOV IAPAL,#84h
044C 75AE55     267            MOV IAPFD, #55h
044F 75C7AA     268            MOV TA, #0aah
0452 75C755     269            MOV TA, #55h
0455 43A401     270            ORL IAPTRG, #00000001b
0458            271   
0458            272            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
0458 75A685     273            MOV IAPAL, #85h
045B 75AEAA     274            MOV IAPFD, #0aah
045E 75C7AA     275            MOV TA, #0aah
0461 75C755     276            MOV TA, #55h
0464 43A401     277            ORL IAPTRG, #00000001b
0467            278   
0467 75C7AA     279            MOV TA, #0aah
046A 75C755     280            MOV TA, #55h
046D 53A5FE     281            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0470 75C7AA     282            MOV TA, #0aah
0473 75C755     283            MOV TA, #55h
0476 539FFE     284            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0479            285            
0479 D2AF       286            setb EA  ; Re-enable interrupts
047B            287   
047B 22         288            ret
047C            289   
047C            290   Load_Variables:
047C 903F84     291            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
047F E4         292            clr a
0480 93         293            movc a, @a+dptr
0481 B4551D     294            cjne a, #0x55, Load_Defaults
0484 A3         295            inc dptr      ; Second key value location.  Must be 0xaa
0485 E4         296            clr a
0486 93         297            movc a, @a+dptr
0487 B4AA17     298            cjne a, #0xaa, Load_Defaults
048A            299            
048A 903F80     300            mov dptr, #0x3f80
048D E4         301            clr a
048E 93         302            movc a, @a+dptr
048F F543       303            mov temp_soak, a
0491            304            
0491 A3         305            inc dptr
0492 E4         306            clr a
0493 93         307            movc a, @a+dptr
0494 F544       308            mov Time_soak, a
0496            309            
0496 A3         310            inc dptr
0497 E4         311            clr a
0498 93         312            movc a, @a+dptr
0499 F545       313            mov Temp_refl, a
049B            314            
049B A3         315            inc dptr
049C E4         316            clr a
049D 93         317            movc a, @a+dptr
049E F546       318            mov Time_refl, a
04A0 22         319            ret
04A1            320   
04A1            321   Load_Defaults:
04A1 754301     322            mov temp_soak, #1
04A4 754402     323            mov Time_soak, #2
04A7 754503     324            mov Temp_refl, #3
04AA 754604     325            mov Time_refl, #4
04AD 22         326            ret
04AE            327   
04AE            328   wait_1ms:
04AE C28C       329            clr     TR0 ; Stop timer 0
04B0 C28D       330            clr     TF0 ; Clear overflow flag
04B2 758CBF     331            mov     TH0, #high(TIMER0_RELOAD_1MS)
04B5 758A28     332            mov     TL0,#low(TIMER0_RELOAD_1MS)
04B8 D28C       333            setb TR0
04BA 308DFD     334            jnb     TF0, $ ; Wait for overflow
04BD 22         335            ret
04BE            336   
04BE            337   ; Wait the number of miliseconds in R2
04BE            338   waitms:
04BE 1204AE     339            lcall wait_1ms
04C1 DAFB       340            djnz R2, waitms
04C3 22         341            ret
04C4            342   
04C4            343   ADC_to_PB:
04C4 53E8F0     344            anl ADCCON0, #0xF0
04C7 43E800     345            orl ADCCON0, #0x00 ; Select AIN0
04CA            346            
04CA C2EF       347            clr ADCF
04CC D2EE       348            setb ADCS   ; ADC start trigger signal
04CE 30EFFD     349       jnb ADCF, $ ; Wait for conversion complete
04D1            350   
04D1 D20A       351            setb PB7
04D3 D209       352            setb PB6
04D5 D208       353            setb PB5
04D7 D207       354            setb PB4
04D9 D206       355            setb PB3
04DB D205       356            setb PB2
04DD D204       357            setb PB1
04DF D203       358            setb PB0
04E1            359            
04E1            360            ; Check PB7
04E1            361   ADC_to_PB_L7:
04E1 C3         362            clr c
04E2 E5C3       363            mov a, ADCRH
04E4 94F0       364            subb a, #0xf0
04E6 4003       365            jc ADC_to_PB_L6
04E8 C20A       366            clr PB7
04EA 22         367            ret
04EB            368   
04EB            369            ; Check PB6
04EB            370   ADC_to_PB_L6:
04EB C3         371            clr c
04EC E5C3       372            mov a, ADCRH
04EE 94D0       373            subb a, #0xd0
04F0 4003       374            jc ADC_to_PB_L5
04F2 C209       375            clr PB6
04F4 22         376            ret
04F5            377   
04F5            378            ; Check PB5
04F5            379   ADC_to_PB_L5:
04F5 C3         380            clr c
04F6 E5C3       381            mov a, ADCRH
04F8 94B0       382            subb a, #0xb0
04FA 4003       383            jc ADC_to_PB_L4
04FC C208       384            clr PB5
04FE 22         385            ret
04FF            386   
04FF            387            ; Check PB4
04FF            388   ADC_to_PB_L4:
04FF C3         389            clr c
0500 E5C3       390            mov a, ADCRH
0502 9490       391            subb a, #0x90
0504 4003       392            jc ADC_to_PB_L3
0506 C207       393            clr PB4
0508 22         394            ret
0509            395   
0509            396            ; Check PB3
0509            397   ADC_to_PB_L3:
0509 C3         398            clr c
050A E5C3       399            mov a, ADCRH
050C 9470       400            subb a, #0x70
050E 4003       401            jc ADC_to_PB_L2
0510 C206       402            clr PB3
0512 22         403            ret
0513            404   
0513            405            ; Check PB2
0513            406   ADC_to_PB_L2:
0513 C3         407            clr c
0514 E5C3       408            mov a, ADCRH
0516 9450       409            subb a, #0x50
0518 4003       410            jc ADC_to_PB_L1
051A C205       411            clr PB2
051C 22         412            ret
051D            413   
051D            414            ; Check PB1
051D            415   ADC_to_PB_L1:
051D C3         416            clr c
051E E5C3       417            mov a, ADCRH
0520 9430       418            subb a, #0x30
0522 4003       419            jc ADC_to_PB_L0
0524 C204       420            clr PB1
0526 22         421            ret
0527            422   
0527            423            ; Check PB0
0527            424   ADC_to_PB_L0:
0527 C3         425            clr c
0528 E5C3       426            mov a, ADCRH
052A 9410       427            subb a, #0x10
052C 4003       428            jc ADC_to_PB_Done
052E C203       429            clr PB0
0530 22         430            ret
0531            431            
0531            432   ADC_to_PB_Done:
0531            433            ; No puhsbutton pressed         
0531 22         434            ret
0532            435   
0532            436   ; MAIN 
0532            437   main:
0532 75817F     438            mov sp, #0x7f
0535 120385     439       lcall Init_All
0538 120079     440       lcall LCD_4BIT
053B            441       ; initial messages in LCD
053B C0E0       442            push acc
053D 7401       442            mov a, #1
053F 14         442            dec a
0540 1200B9     442            lcall ?Set_Cursor_1 ; Select column and row
0543 D0E0       442            pop acc
0545 C083       443            push dph
0547 C082       443            push dpl
0549 C0E0       443            push acc
054B 900003     443            mov dptr, #temperature_message
054E 1200AC     443            lcall ?Send_Constant_String
0551 D0E0       443            pop acc
0553 D082       443            pop dpl
0555 D083       443            pop dph
0557            444   
0557 754A00     445            mov FSM1_state, #0
055A 754332     446       mov Temp_soak, #50
055D 75443C     447            mov Time_soak, #60
0560 754500     448            mov Temp_refl, #0
0563 75462D     449            mov Time_refl, #45
0566 754700     450            mov sec, #0
0569            451   
0569 C200       452            clr reflow_flag ; start on temp
056B C201       453            clr soak_flag ; start on temp
056D            454   
056D            455   Forever:
056D            456   
056D            457   
056D            458   ; Example branch for decreasing any given value 
056D            459   ; This set of code will increase the ones columnn of any given 
056D            460   ; variable. ie. reflow_temp_ones, reflow_time_ones
056D            461   ; the 10s and 100s column will update in response to increasing 
056D            462   ; the ones column beyond 9.
056D            463   
056D            464   ; REFLOW ;
056D            465   reflow_toggle:
056D 200A02     466            jb PB7, check_reflow_toggle
0570 B200       467            cpl reflow_flag ; if button is pressed, change flag
0572            468   
0572            469   check_reflow_toggle: 
0572 200003     470            jb reflow_flag, turn_reflow_to_time
0575            471   
0575            472   turn_reflow_to_temp:
0575            473            ; will use the same logic for the other pushbuttons
0575            474   ; This example will use temp_soak for this example
0575            475   
0575 020592     476            ljmp soak_toggle
0578            477   
0578            478   
0578            479   turn_reflow_to_time:
0578            480            
0578            481            decrease_reflow_time:
0578 20090A     482            jb PB6, increase_reflow_time
057B E546       483            mov a, Time_refl
057D 9401       484       subb a, #1
057F D4         485            da a
0580 F546       486       mov Time_refl, a
0582 020592     487            ljmp soak_toggle
0585            488            
0585            489            increase_reflow_time:
0585 20080A     490            jb PB5, soak_toggle 
0588 E546       491            mov a, Time_refl
058A 2401       492            add a, #1
058C D4         493            da a 
058D F546       494            mov Time_refl, a
058F 020592     495            ljmp soak_toggle
0592            496   
0592            497   ; SOAK ;
0592            498   soak_toggle:
0592 200702     499            jb PB4, check_soak_toggle
0595 B201       500            cpl soak_flag ; if button is pressed, change flag
0597            501   
0597            502   check_soak_toggle: 
0597 200103     503            jb soak_flag, turn_soak_to_time
059A            504   
059A            505   turn_soak_to_temp:
059A            506            ; will use the same logic for the other pushbuttons
059A            507   ; This example will use temp_soak for this example
059A 0205B7     508   ljmp start_stop
059D            509   
059D            510   turn_soak_to_time:
059D            511            
059D            512            decrease_soak_time:
059D 20060A     513            jb PB3, increase_soak_time
05A0 E544       514            mov a, Time_soak
05A2 9401       515       subb a, #1
05A4 D4         516            da a
05A5 F544       517       mov Time_soak, a
05A7 0205B7     518            ljmp start_stop
05AA            519            
05AA            520            increase_soak_time:
05AA 2005E5     521            jb PB2, soak_toggle 
05AD E544       522            mov a, Time_soak
05AF 2401       523            add a, #1
05B1 D4         524            da a 
05B2 F544       525            mov Time_soak, a
05B4 0205B7     526            ljmp start_stop
05B7            527   
05B7            528   start_stop:
05B7 C0E0       529            push acc
05B9 7406       529            mov a, #6
05BB 14         529            dec a
05BC 1200B7     529            lcall ?Set_Cursor_2 ; Select column and row
05BF D0E0       529            pop acc
05C1 C000       530            push ar0
05C3 A846       530            mov r0, Time_refl
05C5 1200BE     530            lcall ?Display_BCD
05C8 D000       530            pop ar0
05CA C0E0       531            push acc
05CC 740D       531            mov a, #13
05CE 14         531            dec a
05CF 1200B7     531            lcall ?Set_Cursor_2 ; Select column and row
05D2 D0E0       531            pop acc
05D4 C000       532            push ar0
05D6 A844       532            mov r0, Time_soak
05D8 1200BE     532            lcall ?Display_BCD
05DB D000       532            pop ar0
05DD 20030F     533            jb PB0, continue
05E0            534   
05E0            535   turn_on:
05E0 E54A       536            mov a, FSM1_state
05E2 B40005     537            cjne a, #0, turn_off
05E5 754A01     538            mov FSM1_state, #1
05E8 8005       539            sjmp continue
05EA            540   
05EA            541   turn_off:
05EA 754A00     542            mov FSM1_state, #0
05ED 8000       543            sjmp continue
05EF            544   
05EF            545   
05EF            546   continue:
05EF 1204C4     547            lcall ADC_to_PB
05F2            548            ;lcall Display_PushButtons_ADC
05F2            549            
05F2 75E807     550            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
05F5 C2EF       551            clr ADCF
05F7 D2EE       552            setb ADCS ;  ADC start trigger signal
05F9 30EFFD     553       jnb ADCF, $ ; Wait for conversion complete
05FC            554       
05FC            555       ; Read the ADC result and store in [R1, R0]
05FC E5C3       556       mov a, ADCRH   
05FE C4         557       swap a
05FF C0E0       558       push acc
0601 540F       559       anl a, #0x0f
0603 F9         560       mov R1, a
0604 D0E0       561       pop acc
0606 54F0       562       anl a, #0xf0
0608 45C2       563       orl a, ADCRL
060A F8         564       mov R0, A
060B            565       
060B 75E801     566       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
060E C2EF       567            clr ADCF
0610 D2EE       568            setb ADCS ;  ADC start trigger signal
0612 30EFFD     569       jnb ADCF, $ ; Wait for conversion complete
0615            570       
0615            571       ; Read the ADC result and store in [R4, R3]
0615 E5C3       572       mov a, ADCRH   
0617 C4         573       swap a
0618 C0E0       574       push acc
061A 540F       575       anl a, #0x0f
061C FC         576       mov R4, a
061D D0E0       577       pop acc
061F 54F0       578       anl a, #0xf0
0621 45C2       579       orl a, ADCRL
0623 FB         580       mov R3, A
0624            581       
0624            582            ; Convert to LM335 temperature to voltage
0624 8B30       583            mov x+0, R3
0626 8C31       584            mov x+1, R4
0628 753200     585            mov x+2, #0
062B 753300     586            mov x+3, #0
062E 75347C     587            mov y+0, #low (50300 % 0x10000) 
0631 7535C4     587            mov y+1, #high(50300 % 0x10000) 
0634 753600     587            mov y+2, #low (50300 / 0x10000) 
0637 753700     587            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
063A 12024E     588            lcall mul32
063D 7534FF     589            mov y+0, #low (4095 % 0x10000) 
0640 75350F     589            mov y+1, #high(4095 % 0x10000) 
0643 753600     589            mov y+2, #low (4095 / 0x10000) 
0646 753700     589            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0649 1202DB     590            lcall div32
064C 7534D0     591            mov y+0, #low (27600 % 0x10000) 
064F 75356B     591            mov y+1, #high(27600 % 0x10000) 
0652 753600     591            mov y+2, #low (27600 / 0x10000) 
0655 753700     591            mov y+3, #high(27600 / 0x10000) 
0658 1201BA     592            lcall sub32
065B 753464     593            mov y+0, #low (100 % 0x10000) 
065E 753500     593            mov y+1, #high(100 % 0x10000) 
0661 753600     593            mov y+2, #low (100 / 0x10000) 
0664 753700     593            mov y+3, #high(100 / 0x10000) 
0667 12024E     594            lcall mul32
066A            595            
066A            596            ; Convert to BCD and display
066A 1200D4     597            lcall hex2bcd
066D C0E0       598            push acc
066F 740C       598            mov a, #12
0671 14         598            dec a
0672 1200B9     598            lcall ?Set_Cursor_1 ; Select column and row
0675 D0E0       598            pop acc
0677 120369     599            lcall Display_formated_BCD_Tj
067A            600   
067A            601            ; Convert value back to hex to use for calculations
067A 12015D     602            lcall bcd2hex
067D            603   
067D            604            ; Storing the ambient temperature
067D 853038     605            mov amb_temp+0, x+0
0680 853139     606            mov amb_temp+1, x+1
0683 85323A     607            mov amb_temp+2, x+2
0686 85333B     608            mov amb_temp+3, x+3
0689            609   
0689            610            ; Convert to thermocouple voltage to temperature
0689 8830       611            mov x+0, R0
068B 8931       612            mov x+1, R1
068D 753200     613            mov x+2, #0
0690 753300     614            mov x+3, #0
0693 75347C     615            mov y+0, #low (50300 % 0x10000) 
0696 7535C4     615            mov y+1, #high(50300 % 0x10000) 
0699 753600     615            mov y+2, #low (50300 / 0x10000) 
069C 753700     615            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
069F 12024E     616            lcall mul32
06A2 7534FF     617            mov y+0, #low (4095 % 0x10000) 
06A5 75350F     617            mov y+1, #high(4095 % 0x10000) 
06A8 753600     617            mov y+2, #low (4095 / 0x10000) 
06AB 753700     617            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
06AE 1202DB     618            lcall div32
06B1 753464     619            mov y+0, #low (100 % 0x10000) 
06B4 753500     619            mov y+1, #high(100 % 0x10000) 
06B7 753600     619            mov y+2, #low (100 / 0x10000) 
06BA 753700     619            mov y+3, #high(100 / 0x10000) 
06BD 1202DB     620            lcall div32
06C0 753445     621            mov y+0, #low (5189 % 0x10000) 
06C3 753514     621            mov y+1, #high(5189 % 0x10000) 
06C6 753600     621            mov y+2, #low (5189 / 0x10000) 
06C9 753700     621            mov y+3, #high(5189 / 0x10000) 
06CC 12024E     622            lcall mul32
06CF            623   
06CF            624            ; Adding the ambient temperature to oven temperature
06CF 853834     625            mov y+0, amb_temp+0
06D2 853935     626            mov y+1, amb_temp+1
06D5 853A36     627            mov y+2, amb_temp+2
06D8 853B37     628            mov y+3, amb_temp+3
06DB 120199     629            lcall add32
06DE            630            
06DE            631            ; Convert to BCD and display
06DE 1200D4     632            lcall hex2bcd
06E1 C0E0       633            push acc
06E3 7403       633            mov a, #3
06E5 14         633            dec a
06E6 1200B9     633            lcall ?Set_Cursor_1 ; Select column and row
06E9 D0E0       633            pop acc
06EB 120344     634            lcall Display_formated_BCD_To
06EE            635   
06EE            636            ; Storing the thermocouple temperature into var temp 
06EE 753410     637            mov y+0, #low (10000 % 0x10000) 
06F1 753527     637            mov y+1, #high(10000 % 0x10000) 
06F4 753600     637            mov y+2, #low (10000 / 0x10000) 
06F7 753700     637            mov y+3, #high(10000 / 0x10000) 
06FA 1202DB     638            lcall div32
06FD 853048     639            mov temp+0, x+0
0700 853149     640            mov temp+1, x+1
0703            641            
0703            642            ; Wait 100 ms between readings
0703 7A64       643            mov R2, #100
0705 1204BE     644            lcall waitms
0708            645            
0708            646   ; STATE MACHINE  
0708            647   FSM1:
0708 E54A       648            mov a, FSM1_state
070A            649   
070A            650   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
070A            651   FSM1_state0:
070A B40022     652            cjne a, #0, FSM1_state1
070D C0E0       653            push acc
070F 7410       653            mov a, #16
0711 14         653            dec a
0712 1200B7     653            lcall ?Set_Cursor_2 ; Select column and row
0715 D0E0       653            pop acc
0717 C083       654            push dph
0719 C082       654            push dpl
071B C0E0       654            push acc
071D 900014     654            mov dptr, #state0
0720 1200AC     654            lcall ?Send_Constant_String
0723 D0E0       654            pop acc
0725 D082       654            pop dpl
0727 D083       654            pop dph
0729 754100     655            mov pwm, #0
072C            656            ;jb PB0, FSM1_state0_done
072C            657            ;mov FSM1_state, #1
072C            658   FSM1_state0_done:
072C 02056D     659            ljmp Forever
072F            660   
072F            661   ; pre-heat state. Should go to state two when temp reaches temp_soak     
072F            662   FSM1_state1:
072F B40134     663            cjne a, #1, FSM1_state2
0732 C0E0       664            push acc
0734 7410       664            mov a, #16
0736 14         664            dec a
0737 1200B7     664            lcall ?Set_Cursor_2 ; Select column and row
073A D0E0       664            pop acc
073C C083       665            push dph
073E C082       665            push dpl
0740 C0E0       665            push acc
0742 900016     665            mov dptr, #state1
0745 1200AC     665            lcall ?Send_Constant_String
0748 D0E0       665            pop acc
074A D082       665            pop dpl
074C D083       665            pop dph
074E            666            
074E C296       667            clr P1.6
0750            668            
0750 754164     669            mov pwm, #100
0753 754700     670            mov sec, #0
0756            671            
0756            672            ; These two lines are temporary. temp should be read from the thermocouple wire
0756 754364     673            mov temp_soak, #100
0759            674            
0759 E543       675            mov a, temp_soak
075B D3         676            setb c
075C 9548       677            subb a, temp
075E 5003       678            jnc FSM1_state1_done
0760 754A02     679            mov FSM1_state, #2
0763            680   FSM1_state1_done:
0763 02056D     681            ljmp Forever
0766            682   
0766            683   ; State 2
0766            684   FSM1_state2:
0766 D296       685            setb P1.6 ;speaker
0768 B4023A     686            cjne a, #2, FSM1_state3
076B C0E0       687            push acc
076D 7410       687            mov a, #16
076F 14         687            dec a
0770 1200B7     687            lcall ?Set_Cursor_2 ; Select column and row
0773 D0E0       687            pop acc
0775 C083       688            push dph
0777 C082       688            push dpl
0779 C0E0       688            push acc
077B 900018     688            mov dptr, #state2
077E 1200AC     688            lcall ?Send_Constant_String
0781 D0E0       688            pop acc
0783 D082       688            pop dpl
0785 D083       688            pop dph
0787 754114     689            mov pwm, #20
078A            690            
078A E547       691            mov a, sec
078C 2401       692            add a, #1
078E F547       693            mov sec, a
0790            694   
0790 7A32       695            mov R2, #50
0792 1204BE     696            lcall waitms
0795            697   
0795 E544       698            mov a, Time_soak
0797 C3         699            clr c
0798 9547       700            subb a, sec
079A 5003       701            jnc FSM1_state2_done
079C 754A03     702            mov FSM1_state, #3
079F            703   FSM1_state2_done:
079F 02056D     704            ljmp Forever
07A2            705   
07A2            706   ;DELETE
07A2            707   jump:
07A2 02070A     708   ljmp FSM1_state0         
07A5            709   
07A5            710   ;State 3
07A5            711   FSM1_state3:
07A5 B4032F     712            cjne a, #3, FSM1_state4
07A8 C0E0       713            push acc
07AA 7410       713            mov a, #16
07AC 14         713            dec a
07AD 1200B7     713            lcall ?Set_Cursor_2 ; Select column and row
07B0 D0E0       713            pop acc
07B2 C083       714            push dph
07B4 C082       714            push dpl
07B6 C0E0       714            push acc
07B8 90001A     714            mov dptr, #state3
07BB 1200AC     714            lcall ?Send_Constant_String
07BE D0E0       714            pop acc
07C0 D082       714            pop dpl
07C2 D083       714            pop dph
07C4 754164     715            mov pwm, #100
07C7 754700     716            mov sec, #0
07CA            717            
07CA            718            
07CA E545       719            mov a, Temp_refl
07CC C3         720            clr c
07CD 9548       721            subb a, temp
07CF 5003       722            jnc FSM1_state3_done
07D1 754A04     723            mov FSM1_state, #4
07D4            724   FSM1_state3_done:
07D4 02056D     725            ljmp Forever
07D7            726   
07D7            727   
07D7            728   ;State 4
07D7            729   FSM1_state4:
07D7 B40437     730            cjne a, #4, FSM1_state5
07DA C0E0       731            push acc
07DC 7410       731            mov a, #16
07DE 14         731            dec a
07DF 1200B7     731            lcall ?Set_Cursor_2 ; Select column and row
07E2 D0E0       731            pop acc
07E4 C083       732            push dph
07E6 C082       732            push dpl
07E8 C0E0       732            push acc
07EA 90001C     732            mov dptr, #state4
07ED 1200AC     732            lcall ?Send_Constant_String
07F0 D0E0       732            pop acc
07F2 D082       732            pop dpl
07F4 D083       732            pop dph
07F6 754114     733            mov pwm, #20
07F9            734            
07F9 E547       735            mov a, sec
07FB 2401       736            add a, #1
07FD F547       737            mov sec, a
07FF            738   
07FF 7A32       739            mov R2, #50
0801 1204BE     740            lcall waitms
0804            741            
0804 E546       742            mov a, Time_refl
0806 C3         743            clr c
0807 9547       744            subb a,sec
0809 5003       745            jnc FSM1_state4_done
080B 754A05     746            mov FSM1_state, #5
080E            747   FSM1_state4_done:
080E 02056D     748            ljmp Forever
0811            749            
0811            750   FSM1_state5:
0811 B4058E     751            cjne a, #5, jump
0814 C0E0       752            push acc
0816 7410       752            mov a, #16
0818 14         752            dec a
0819 1200B7     752            lcall ?Set_Cursor_2 ; Select column and row
081C D0E0       752            pop acc
081E C083       753            push dph
0820 C082       753            push dpl
0822 C0E0       753            push acc
0824 90001E     753            mov dptr, #state5
0827 1200AC     753            lcall ?Send_Constant_String
082A D0E0       753            pop acc
082C D082       753            pop dpl
082E D083       753            pop dph
0830 754100     754            mov pwm, #0
0833            755            
0833            756            
0833 743C       757            mov a, #60
0835 C3         758            clr c
0836 9548       759            subb a, temp
0838 4003       760            jc FSM1_state5_done
083A 754A00     761            mov FSM1_state,#0
083D            762   FSM1_state5_done:
083D 1203DE     763            lcall Save_Variables ; Save variables in flash memory
0840 02056D     764            ljmp Forever
0843            765            
0843            766   
0843            767   
0843            768   ;Any additions to be checked
0843            769   EN
