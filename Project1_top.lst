                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 02055C      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014 2C00        45   comma              :     db ','               , 0
0016 7200        46   soak_message       :     db 'r'               , 0
0018 7300        47   reflow_message     :     db 's'               , 0
001A             48   
001A 3000        49   state0:     db '0', 0
001C 3100        50   state1:     db '1', 0
001E 3200        51   state2:     db '2', 0
0020 3300        52   state3:     db '3', 0
0022 3400        53   state4:     db '4', 0
0024 3500        54   state5:     db '5', 0
0026             55   
0026             56   cseg
0026             57   
0026             58   ; SYMBOLIC CONSTANTS
0026             59   
0026             60   ; INPUTS
0026             61   tempsensor_in equ P3.0
0026             62   thermocouple_in equ P1.1
0026             63   
0026             64   ; OUTPUTS
0026             65   oven_out equ P1.2
0026             66   speaker_out equ P1.6
0026             67   
0026             68   CSEG
0026             69   ; LCD
0026             70   LCD_RS equ P1.3
0026             71   LCD_E equ P1.4
0026             72   LCD_D4 equ P0.0
0026             73   LCD_D5 equ P0.1
0026             74   LCD_D6 equ P0.2
0026             75   LCD_D7 equ P0.3
0026             76   
                 78   	$LIST
00DA             80   
00DA             81   ; Flash instructions
00DA             82   PAGE_ERASE_AP   EQU 00100010b
00DA             83   BYTE_PROGRAM_AP EQU 00100001b
00DA             84   
00DA             85   ; These register definitions needed by 'math32.inc'
0030             86   DSEG at 30H
0030             87   x:   ds 4
0034             88   y:   ds 4
0038             89   amb_temp: ds 4 ; ambient temperature read by LM335
003C             90   bcd: ds 5
0041             91   
0041             92   DSEG
0041             93   pwm: ds 1
0042             94   state: ds 1
0043             95   temp_soak: ds 1
0044             96   Time_soak: ds 1
0045             97   Temp_refl: ds 1
0046             98   Time_refl: ds 1
0047             99   
0047            100   sec: ds 1
0048            101   temp: ds 2
004A            102   
004A            103   
004A            104   FSM1_state: ds 1
004B            105   
0000            106   BSEG
0000            107   reflow_flag: dbit 1
0001            108   soak_flag: dbit 1
0002            109   mf: dbit 1
0003            110   
0003            111   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            112   PB0: dbit 1
0004            113   PB1: dbit 1
0005            114   PB2: dbit 1
0006            115   PB3: dbit 1
0007            116   PB4: dbit 1
0008            117   PB5: dbit 1
0009            118   PB6: dbit 1
000A            119   PB7: dbit 1
000B            120   
000B            121   ; MATH32
                546   $LIST
                123   $LIST
034A            125   
034A            126   ; Blank Macro
                127   Left_blank mac
                128   	mov a, %0
                129   	anl a, #0xf0
                130   	swap a
                131   	jz Left_blank_%M_a
                132   	ljmp %1
                133   Left_blank_%M_a:
                134   	Display_char(#' ')
                135   	mov a, %0
                136   	anl a, #0x0f
                137   	jz Left_blank_%M_b
                138   	ljmp %1
                139   Left_blank_%M_b:
                140   	Display_char(#' ')
                141   endmac
034A            142   
034A            143   
034A            144   ;binary to display 3 digits on lcd screen
034A            145   
034A            146   SendToLCD:
034A 75F064     147            mov b, #100
034D 84         148            div ab
034E 4430       149            orl a, #0x30
0350 120075     150            lcall ?WriteData
0353 E5F0       151            mov a,b
0355 75F00A     152            mov b,#10
0358 84         153            div ab
0359 4430       154            orl a, #0x30
035B 120075     155            lcall ?WriteData
035E E5F0       156            mov a, b
0360 4430       157            orl a, #0x30
0362 120075     158            lcall ?WriteData
0365 22         159            ret
0366            160   
0366            161   
0366            162   ; Formatting to display thermocouple temperature
0366            163   ; Display: 0000.00
0366            164   Display_formated_BCD_To:
0366 C000       165            push ar0
0368 A83F       165            mov r0, bcd+3
036A 1200C4     165            lcall ?Display_BCD
036D D000       165            pop ar0
036F C000       166            push ar0
0371 A83E       166            mov r0, bcd+2
0373 1200C4     166            lcall ?Display_BCD
0376 D000       166            pop ar0
0378 C0E0       167            push acc
037A 742E       167            mov a, #'.'
037C 120075     167            lcall ?WriteData
037F D0E0       167            pop acc
0381 C000       168            push ar0
0383 A83D       168            mov r0, bcd+1
0385 1200C4     168            lcall ?Display_BCD
0388 D000       168            pop ar0
038A            169   
038A            170   
038A 22         171            ret
038B            172            
038B            173   ; Formatting to display ambient temperature
038B            174   ; Display: 00.00
038B            175   Display_formated_BCD_Tj:
038B C000       176            push ar0
038D A83E       176            mov r0, bcd+2
038F 1200C4     176            lcall ?Display_BCD
0392 D000       176            pop ar0
0394 C0E0       177            push acc
0396 742E       177            mov a, #'.'
0398 120075     177            lcall ?WriteData
039B D0E0       177            pop acc
039D C000       178            push ar0
039F A83D       178            mov r0, bcd+1
03A1 1200C4     178            lcall ?Display_BCD
03A4 D000       178            pop ar0
03A6 22         179            ret
03A7            180   
03A7            181   
03A7            182   ; INITIALIZATION SUBROUTINES
03A7            183   Init_All:
03A7            184            ; Configure all the pins for biderectional I/O
03A7 75AC00     185            mov     P3M1, #0x00
03AA 75AD00     186            mov     P3M2, #0x00
03AD 75B300     187            mov     P1M1, #0x00
03B0 75B400     188            mov     P1M2, #0x00
03B3 75B100     189            mov     P0M1, #0x00
03B6 75B200     190            mov     P0M2, #0x00
03B9            191   
03B9 438E10     192            orl     CKCON, #0x10 ; CLK is the input for timer 1
03BC 438780     193            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03BF 759852     194            mov     SCON, #0x52
03C2 53C4DF     195            anl     T3CON, #0b11011111
03C5 53890F     196            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03C8 438920     197            orl     TMOD, #0x20 ; Timer 1 Mode 2
03CB 758DF7     198            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03CE D28E       199            setb TR1
03D0            200            
03D0            201            ; Using timer 0 for delay functions.  Initialize here:
03D0 C28C       202            clr     TR0 ; Stop timer 0
03D2 438E08     203            orl     CKCON,#0x08 ; CLK is the input for timer 0
03D5 5389F0     204            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03D8 438901     205            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03DB            206            
03DB            207            ; Initialize the pin used by the ADC (P1.1) as input.
03DB 43B302     208            orl     P1M1, #0b00000010
03DE 53B4FD     209            anl     P1M2, #0b11111101
03E1            210   
03E1            211            ; Initialize the pin used by the ADC (P3.0) as input.
03E1 43AC01     212            orl     P3M1, #0b00000001
03E4 53ADFE     213            anl     P3M2, #0b11111110
03E7            214            
03E7            215            ; Initialize and start the ADC:
03E7 53E8F0     216            anl ADCCON0, #0xF0
03EA 43E807     217            orl ADCCON0, #0x07 ; Select channel 7
03ED            218   
03ED 53E2F0     219            anl ADCCON2, #0xF0
03F0 43E201     220            orl ADCCON2, #0x01 ; Select channel 1
03F3            221   
03F3            222            ; AINDIDS select if some pins are analog inputs or digital I/O:
03F3 75F600     223            mov AINDIDS, #0x00 ; Disable all analog inputs
03F6 43F680     224            orl AINDIDS, #0b10000000 ; P1.1 is analog input
03F9 43F601     225            orl AINDIDS, #0b00000001 ; P3.0 is analog input
03FC 43E101     226            orl ADCCON1, #0x01 ; Enable ADC
03FF            227            
03FF 22         228            ret
0400            229   
0400            230   ; Flash Memory Subroutines
0400            231   ;******************************************************************************
0400            232   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0400            233   ; Data Flash when user code is executed in APROM.
0400            234   ; (The base of this code is listed in the N76E003 user manual)
0400            235   ;******************************************************************************
0400            236   
0400            237   Save_Variables:
0400 C2AF       238            CLR EA  ; MUST disable interrupts for this to work!
0402            239            
0402 75C7AA     240            MOV TA, #0aah ; CHPCON is TA protected
0405 75C755     241            MOV TA, #55h
0408 439F01     242            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
040B            243            
040B 75C7AA     244            MOV TA, #0aah ; IAPUEN is TA protected
040E 75C755     245            MOV TA, #55h
0411 43A501     246            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
0414            247            
0414 75AF22     248            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
0417 75A73F     249            MOV IAPAH, #3fh ; Address high byte
041A 75A680     250            MOV IAPAL, #80h ; Address low byte
041D 75AEFF     251            MOV IAPFD, #0FFh ; Data to load into the address byte
0420 75C7AA     252            MOV TA, #0aah ; IAPTRG is TA protected
0423 75C755     253            MOV TA, #55h
0426 43A401     254            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0429            255            
0429 75AF21     256            MOV IAPCN, #BYTE_PROGRAM_AP
042C 75A73F     257            MOV IAPAH, #3fh
042F            258            
042F            259            ;Load 3f80h with temp_soak
042F 75A680     260            MOV IAPAL, #80h
0432 8543AE     261            MOV IAPFD, temp_soak
0435 75C7AA     262            MOV TA, #0aah
0438 75C755     263            MOV TA, #55h
043B 43A401     264            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
043E            265            
043E            266            ;Load 3f81h with Time_soak
043E 75A681     267            MOV IAPAL, #81h
0441 8544AE     268            MOV IAPFD, Time_soak
0444 75C7AA     269            MOV TA, #0aah
0447 75C755     270            MOV TA, #55h
044A 43A401     271            ORL IAPTRG,#00000001b
044D            272            
044D            273            ;Load 3f82h with Temp_refl
044D 75A682     274            MOV IAPAL, #82h
0450 8545AE     275            MOV IAPFD, Temp_refl
0453 75C7AA     276            MOV TA, #0aah
0456 75C755     277            MOV TA, #55h
0459 43A401     278            ORL IAPTRG,#00000001b
045C            279            
045C            280            ;Load 3f83h with Time_refl
045C 75A683     281            MOV IAPAL, #83h
045F 8546AE     282            MOV IAPFD, Time_refl
0462 75C7AA     283            MOV TA, #0aah
0465 75C755     284            MOV TA, #55h
0468 43A401     285            ORL IAPTRG,#00000001b
046B            286   
046B            287            ;Load 3f84h with 55h
046B 75A684     288            MOV IAPAL,#84h
046E 75AE55     289            MOV IAPFD, #55h
0471 75C7AA     290            MOV TA, #0aah
0474 75C755     291            MOV TA, #55h
0477 43A401     292            ORL IAPTRG, #00000001b
047A            293   
047A            294            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
047A 75A685     295            MOV IAPAL, #85h
047D 75AEAA     296            MOV IAPFD, #0aah
0480 75C7AA     297            MOV TA, #0aah
0483 75C755     298            MOV TA, #55h
0486 43A401     299            ORL IAPTRG, #00000001b
0489            300   
0489 75C7AA     301            MOV TA, #0aah
048C 75C755     302            MOV TA, #55h
048F 53A5FE     303            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0492 75C7AA     304            MOV TA, #0aah
0495 75C755     305            MOV TA, #55h
0498 539FFE     306            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
049B            307            
049B D2AF       308            setb EA  ; Re-enable interrupts
049D            309   
049D 22         310            ret
049E            311   
049E            312   Load_Variables:
049E 903F84     313            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
04A1 E4         314            clr a
04A2 93         315            movc a, @a+dptr
04A3 B4551D     316            cjne a, #0x55, Load_Defaults
04A6 A3         317            inc dptr      ; Second key value location.  Must be 0xaa
04A7 E4         318            clr a
04A8 93         319            movc a, @a+dptr
04A9 B4AA17     320            cjne a, #0xaa, Load_Defaults
04AC            321            
04AC 903F80     322            mov dptr, #0x3f80
04AF E4         323            clr a
04B0 93         324            movc a, @a+dptr
04B1 F543       325            mov temp_soak, a
04B3            326            
04B3 A3         327            inc dptr
04B4 E4         328            clr a
04B5 93         329            movc a, @a+dptr
04B6 F544       330            mov Time_soak, a
04B8            331            
04B8 A3         332            inc dptr
04B9 E4         333            clr a
04BA 93         334            movc a, @a+dptr
04BB F545       335            mov Temp_refl, a
04BD            336            
04BD A3         337            inc dptr
04BE E4         338            clr a
04BF 93         339            movc a, @a+dptr
04C0 F546       340            mov Time_refl, a
04C2 22         341            ret
04C3            342   
04C3            343   Load_Defaults:
04C3 754301     344            mov temp_soak, #1
04C6 754402     345            mov Time_soak, #2
04C9 754503     346            mov Temp_refl, #3
04CC 754604     347            mov Time_refl, #4
04CF 22         348            ret
04D0            349   
                350   	Send_BCD mac
                351   		push ar0
                352   		mov r0, %0
                353   		lcall ?Send_BCD
                354   		pop ar0
                355   	endmac
04D0            356   putchar:
04D0 3099FD     357       jnb TI, putchar
04D3 C299       358       clr TI
04D5 F599       359       mov SBUF, a
04D7 22         360       ret
04D8            361            
04D8            362   
04D8            363   wait_1ms:
04D8 C28C       364            clr     TR0 ; Stop timer 0
04DA C28D       365            clr     TF0 ; Clear overflow flag
04DC 758CBF     366            mov     TH0, #high(TIMER0_RELOAD_1MS)
04DF 758A28     367            mov     TL0,#low(TIMER0_RELOAD_1MS)
04E2 D28C       368            setb TR0
04E4 308DFD     369            jnb     TF0, $ ; Wait for overflow
04E7 22         370            ret
04E8            371   
04E8            372   ; Wait the number of miliseconds in R2
04E8            373   waitms:
04E8 1204D8     374            lcall wait_1ms
04EB DAFB       375            djnz R2, waitms
04ED 22         376            ret
04EE            377   
04EE            378   ADC_to_PB:
04EE 53E8F0     379            anl ADCCON0, #0xF0
04F1 43E800     380            orl ADCCON0, #0x00 ; Select AIN0
04F4            381            
04F4 C2EF       382            clr ADCF
04F6 D2EE       383            setb ADCS   ; ADC start trigger signal
04F8 30EFFD     384       jnb ADCF, $ ; Wait for conversion complete
04FB            385   
04FB D20A       386            setb PB7
04FD D209       387            setb PB6
04FF D208       388            setb PB5
0501 D207       389            setb PB4
0503 D206       390            setb PB3
0505 D205       391            setb PB2
0507 D204       392            setb PB1
0509 D203       393            setb PB0
050B            394            
050B            395            ; Check PB7
050B            396   ADC_to_PB_L7:
050B C3         397            clr c
050C E5C3       398            mov a, ADCRH
050E 94F0       399            subb a, #0xf0
0510 4003       400            jc ADC_to_PB_L6
0512 C20A       401            clr PB7
0514 22         402            ret
0515            403   
0515            404            ; Check PB6
0515            405   ADC_to_PB_L6:
0515 C3         406            clr c
0516 E5C3       407            mov a, ADCRH
0518 94D0       408            subb a, #0xd0
051A 4003       409            jc ADC_to_PB_L5
051C C209       410            clr PB6
051E 22         411            ret
051F            412   
051F            413            ; Check PB5
051F            414   ADC_to_PB_L5:
051F C3         415            clr c
0520 E5C3       416            mov a, ADCRH
0522 94B0       417            subb a, #0xb0
0524 4003       418            jc ADC_to_PB_L4
0526 C208       419            clr PB5
0528 22         420            ret
0529            421   
0529            422            ; Check PB4
0529            423   ADC_to_PB_L4:
0529 C3         424            clr c
052A E5C3       425            mov a, ADCRH
052C 9490       426            subb a, #0x90
052E 4003       427            jc ADC_to_PB_L3
0530 C207       428            clr PB4
0532 22         429            ret
0533            430   
0533            431            ; Check PB3
0533            432   ADC_to_PB_L3:
0533 C3         433            clr c
0534 E5C3       434            mov a, ADCRH
0536 9470       435            subb a, #0x70
0538 4003       436            jc ADC_to_PB_L2
053A C206       437            clr PB3
053C 22         438            ret
053D            439   
053D            440            ; Check PB2
053D            441   ADC_to_PB_L2:
053D C3         442            clr c
053E E5C3       443            mov a, ADCRH
0540 9450       444            subb a, #0x50
0542 4003       445            jc ADC_to_PB_L1
0544 C205       446            clr PB2
0546 22         447            ret
0547            448   
0547            449            ; Check PB1
0547            450   ADC_to_PB_L1:
0547 C3         451            clr c
0548 E5C3       452            mov a, ADCRH
054A 9430       453            subb a, #0x30
054C 4003       454            jc ADC_to_PB_L0
054E C204       455            clr PB1
0550 22         456            ret
0551            457   
0551            458            ; Check PB0
0551            459   ADC_to_PB_L0:
0551 C3         460            clr c
0552 E5C3       461            mov a, ADCRH
0554 9410       462            subb a, #0x10
0556 4003       463            jc ADC_to_PB_Done
0558 C203       464            clr PB0
055A 22         465            ret
055B            466            
055B            467   ADC_to_PB_Done:
055B            468            ; No puhsbutton pressed         
055B 22         469            ret
055C            470   
055C            471   ; MAIN 
055C            472   main:
055C 75817F     473            mov sp, #0x7f
055F 1203A7     474       lcall Init_All
0562 12007F     475       lcall LCD_4BIT
0565            476       ; initial messages in LCD
0565 C0E0       477            push acc
0567 7401       477            mov a, #1
0569 14         477            dec a
056A 1200BF     477            lcall ?Set_Cursor_1 ; Select column and row
056D D0E0       477            pop acc
056F C083       478            push dph
0571 C082       478            push dpl
0573 C0E0       478            push acc
0575 900003     478            mov dptr, #temperature_message
0578 1200B2     478            lcall ?Send_Constant_String
057B D0E0       478            pop acc
057D D082       478            pop dpl
057F D083       478            pop dph
0581 C0E0       479            push acc
0583 7401       479            mov a, #1
0585 14         479            dec a
0586 1200BD     479            lcall ?Set_Cursor_2 ; Select column and row
0589 D0E0       479            pop acc
058B C083       480            push dph
058D C082       480            push dpl
058F C0E0       480            push acc
0591 900016     480            mov dptr, #soak_message
0594 1200B2     480            lcall ?Send_Constant_String
0597 D0E0       480            pop acc
0599 D082       480            pop dpl
059B D083       480            pop dph
059D C0E0       481            push acc
059F 7405       481            mov a, #5
05A1 14         481            dec a
05A2 1200BD     481            lcall ?Set_Cursor_2 ; Select column and row
05A5 D0E0       481            pop acc
05A7 C083       482            push dph
05A9 C082       482            push dpl
05AB C0E0       482            push acc
05AD 900014     482            mov dptr, #comma
05B0 1200B2     482            lcall ?Send_Constant_String
05B3 D0E0       482            pop acc
05B5 D082       482            pop dpl
05B7 D083       482            pop dph
05B9 C0E0       483            push acc
05BB 7408       483            mov a, #8
05BD 14         483            dec a
05BE 1200BD     483            lcall ?Set_Cursor_2 ; Select column and row
05C1 D0E0       483            pop acc
05C3 C083       484            push dph
05C5 C082       484            push dpl
05C7 C0E0       484            push acc
05C9 900018     484            mov dptr, #reflow_message
05CC 1200B2     484            lcall ?Send_Constant_String
05CF D0E0       484            pop acc
05D1 D082       484            pop dpl
05D3 D083       484            pop dph
05D5 C0E0       485            push acc
05D7 740C       485            mov a, #12
05D9 14         485            dec a
05DA 1200BD     485            lcall ?Set_Cursor_2 ; Select column and row
05DD D0E0       485            pop acc
05DF C083       486            push dph
05E1 C082       486            push dpl
05E3 C0E0       486            push acc
05E5 900014     486            mov dptr, #comma
05E8 1200B2     486            lcall ?Send_Constant_String
05EB D0E0       486            pop acc
05ED D082       486            pop dpl
05EF D083       486            pop dph
05F1            487   
05F1 754A00     488            mov FSM1_state, #0
05F4 7543C8     489       mov Temp_soak, #200
05F7 754460     490            mov Time_soak, #0x60
05FA 7545C8     491            mov Temp_refl, #200
05FD 754645     492            mov Time_refl, #0x45
0600 754700     493            mov sec, #0
0603            494   
0603 C200       495            clr reflow_flag ; start on temp
0605 C201       496            clr soak_flag ; start on temp
0607            497   
0607            498   Forever:
0607            499   
0607            500   
0607            501   ; Example branch for decreasing any given value 
0607            502   ; This set of code will increase the ones columnn of any given 
0607            503   ; variable. ie. reflow_temp_ones, reflow_time_ones
0607            504   ; the 10s and 100s column will update in response to increasing 
0607            505   ; the ones column beyond 9.
0607            506   
0607            507   ; REFLOW ;
0607            508   reflow_toggle:
0607 200A02     509            jb PB7, check_reflow_toggle
060A B200       510            cpl reflow_flag ; if button is pressed, change flag
060C            511   
060C            512   check_reflow_toggle: 
060C 200010     513            jb reflow_flag, turn_reflow_to_time
060F            514   
060F            515   turn_reflow_to_temp:
060F            516            ; will use the same logic for the other pushbuttons
060F            517   ; This example will use temp_soak for this example
060F            518   
060F            519            decrease_reflow_temp:
060F 200905     520            jb PB6, increase_reflow_temp
0612 1545       521       dec Temp_refl
0614 020639     522            ljmp soak_toggle
0617            523            
0617            524            increase_reflow_temp:
0617 20081F     525            jb PB5, soak_toggle 
061A 0545       526            inc Temp_refl
061C 020639     527            ljmp soak_toggle
061F            528   
061F            529   
061F            530   turn_reflow_to_time:
061F            531            
061F            532            decrease_reflow_time:
061F 20090A     533            jb PB6, increase_reflow_time
0622 E546       534            mov a, Time_refl
0624 2499       535       add a, #0x99
0626 D4         536            da a
0627 F546       537       mov Time_refl, a
0629 020639     538            ljmp soak_toggle
062C            539            
062C            540            increase_reflow_time:
062C 20080A     541            jb PB5, soak_toggle 
062F E546       542            mov a, Time_refl
0631 2401       543            add a, #1
0633 D4         544            da a 
0634 F546       545            mov Time_refl, a
0636 020639     546            ljmp soak_toggle
0639            547   
0639            548   ; SOAK ;
0639            549   soak_toggle:
0639 200702     550            jb PB4, check_soak_toggle
063C B201       551            cpl soak_flag ; if button is pressed, change flag
063E            552   
063E            553   check_soak_toggle: 
063E 200110     554            jb soak_flag, turn_soak_to_time
0641            555   
0641            556   turn_soak_to_temp:
0641            557            ; will use the same logic for the other pushbuttons
0641            558   ; This example will use temp_soak for this example
0641            559   
0641            560            decrease_soak_temp:
0641 200605     561            jb PB3, increase_soak_temp
0644 1543       562       dec Temp_soak
0646 02066B     563            ljmp start_stop
0649            564            
0649            565            increase_soak_temp:
0649 20051F     566            jb PB2, start_stop 
064C 0543       567            inc Temp_soak
064E 02066B     568            ljmp start_stop
0651            569   
0651            570   turn_soak_to_time:
0651            571            
0651            572            decrease_soak_time:
0651 20060A     573            jb PB3, increase_soak_time
0654 E544       574            mov a, Time_soak
0656 2499       575       add a, #0x99
0658 D4         576            da a
0659 F544       577       mov Time_soak, a
065B 02066B     578            ljmp start_stop
065E            579            
065E            580            increase_soak_time:
065E 2005D8     581            jb PB2, soak_toggle 
0661 E544       582            mov a, Time_soak
0663 2401       583            add a, #1
0665 D4         584            da a 
0666 F544       585            mov Time_soak, a
0668 02066B     586            ljmp start_stop
066B            587   
066B            588   start_stop:
066B E545       589            mov a, Temp_refl
066D C0E0       590            push acc
066F 7402       590            mov a, #2
0671 14         590            dec a
0672 1200BD     590            lcall ?Set_Cursor_2 ; Select column and row
0675 D0E0       590            pop acc
0677 12034A     591            lcall SendToLCD
067A E4         592            clr a
067B E544       593            mov a, Time_soak
067D C0E0       594            push acc
067F 7409       594            mov a, #9
0681 14         594            dec a
0682 1200BD     594            lcall ?Set_Cursor_2 ; Select column and row
0685 D0E0       594            pop acc
0687 12034A     595            lcall SendToLCD
068A E4         596            clr a
068B C0E0       597            push acc
068D 7406       597            mov a, #6
068F 14         597            dec a
0690 1200BD     597            lcall ?Set_Cursor_2 ; Select column and row
0693 D0E0       597            pop acc
0695 C000       598            push ar0
0697 A846       598            mov r0, Time_refl
0699 1200C4     598            lcall ?Display_BCD
069C D000       598            pop ar0
069E C0E0       599            push acc
06A0 740D       599            mov a, #13
06A2 14         599            dec a
06A3 1200BD     599            lcall ?Set_Cursor_2 ; Select column and row
06A6 D0E0       599            pop acc
06A8 C000       600            push ar0
06AA A844       600            mov r0, Time_soak
06AC 1200C4     600            lcall ?Display_BCD
06AF D000       600            pop ar0
06B1 20030F     601            jb PB0, continue
06B4            602   
06B4            603   turn_on:
06B4 E54A       604            mov a, FSM1_state
06B6 B40005     605            cjne a, #0, turn_off
06B9 754A01     606            mov FSM1_state, #1
06BC 8005       607            sjmp continue
06BE            608   
06BE            609   turn_off:
06BE 754A00     610            mov FSM1_state, #0
06C1 8000       611            sjmp continue
06C3            612   
06C3            613   
06C3            614   continue:
06C3 1204EE     615            lcall ADC_to_PB
06C6            616            ;lcall Display_PushButtons_ADC
06C6            617            
06C6 75E807     618            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
06C9 C2EF       619            clr ADCF
06CB D2EE       620            setb ADCS ;  ADC start trigger signal
06CD 30EFFD     621       jnb ADCF, $ ; Wait for conversion complete
06D0            622       
06D0            623       ; Read the ADC result and store in [R1, R0]
06D0 E5C3       624       mov a, ADCRH   
06D2 C4         625       swap a
06D3 C0E0       626       push acc
06D5 540F       627       anl a, #0x0f
06D7 F9         628       mov R1, a
06D8 D0E0       629       pop acc
06DA 54F0       630       anl a, #0xf0
06DC 45C2       631       orl a, ADCRL
06DE F8         632       mov R0, A
06DF            633       
06DF 75E801     634       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
06E2 C2EF       635            clr ADCF
06E4 D2EE       636            setb ADCS ;  ADC start trigger signal
06E6 30EFFD     637       jnb ADCF, $ ; Wait for conversion complete
06E9            638       
06E9            639       ; Read the ADC result and store in [R4, R3]
06E9 E5C3       640       mov a, ADCRH   
06EB C4         641       swap a
06EC C0E0       642       push acc
06EE 540F       643       anl a, #0x0f
06F0 FC         644       mov R4, a
06F1 D0E0       645       pop acc
06F3 54F0       646       anl a, #0xf0
06F5 45C2       647       orl a, ADCRL
06F7 FB         648       mov R3, A
06F8            649       
06F8            650            ; Convert to LM335 temperature to voltage
06F8 8B30       651            mov x+0, R3
06FA 8C31       652            mov x+1, R4
06FC 753200     653            mov x+2, #0
06FF 753300     654            mov x+3, #0
0702 75347C     655            mov y+0, #low (50300 % 0x10000) 
0705 7535C4     655            mov y+1, #high(50300 % 0x10000) 
0708 753600     655            mov y+2, #low (50300 / 0x10000) 
070B 753700     655            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
070E 120254     656            lcall mul32
0711 7534FF     657            mov y+0, #low (4095 % 0x10000) 
0714 75350F     657            mov y+1, #high(4095 % 0x10000) 
0717 753600     657            mov y+2, #low (4095 / 0x10000) 
071A 753700     657            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
071D 1202E1     658            lcall div32
0720 7534D0     659            mov y+0, #low (27600 % 0x10000) 
0723 75356B     659            mov y+1, #high(27600 % 0x10000) 
0726 753600     659            mov y+2, #low (27600 / 0x10000) 
0729 753700     659            mov y+3, #high(27600 / 0x10000) 
072C 1201C0     660            lcall sub32
072F 753464     661            mov y+0, #low (100 % 0x10000) 
0732 753500     661            mov y+1, #high(100 % 0x10000) 
0735 753600     661            mov y+2, #low (100 / 0x10000) 
0738 753700     661            mov y+3, #high(100 / 0x10000) 
073B 120254     662            lcall mul32
073E            663            
073E            664            ; Convert to BCD and display
073E 1200DA     665            lcall hex2bcd
0741 C0E0       666            push acc
0743 740C       666            mov a, #12
0745 14         666            dec a
0746 1200BF     666            lcall ?Set_Cursor_1 ; Select column and row
0749 D0E0       666            pop acc
074B 12038B     667            lcall Display_formated_BCD_Tj
074E            668   
074E            669            ; Convert value back to hex to use for calculations
074E 120163     670            lcall bcd2hex
0751            671   
0751            672            ; Storing the ambient temperature
0751 853038     673            mov amb_temp+0, x+0
0754 853139     674            mov amb_temp+1, x+1
0757 85323A     675            mov amb_temp+2, x+2
075A 85333B     676            mov amb_temp+3, x+3
075D            677   
075D            678            ; Convert to thermocouple voltage to temperature
075D 8830       679            mov x+0, R0
075F 8931       680            mov x+1, R1
0761 753200     681            mov x+2, #0
0764 753300     682            mov x+3, #0
0767 75347C     683            mov y+0, #low (50300 % 0x10000) 
076A 7535C4     683            mov y+1, #high(50300 % 0x10000) 
076D 753600     683            mov y+2, #low (50300 / 0x10000) 
0770 753700     683            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0773 120254     684            lcall mul32
0776 7534FF     685            mov y+0, #low (4095 % 0x10000) 
0779 75350F     685            mov y+1, #high(4095 % 0x10000) 
077C 753600     685            mov y+2, #low (4095 / 0x10000) 
077F 753700     685            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0782 1202E1     686            lcall div32
0785 753464     687            mov y+0, #low (100 % 0x10000) 
0788 753500     687            mov y+1, #high(100 % 0x10000) 
078B 753600     687            mov y+2, #low (100 / 0x10000) 
078E 753700     687            mov y+3, #high(100 / 0x10000) 
0791 1202E1     688            lcall div32
0794 753445     689            mov y+0, #low (5189 % 0x10000) 
0797 753514     689            mov y+1, #high(5189 % 0x10000) 
079A 753600     689            mov y+2, #low (5189 / 0x10000) 
079D 753700     689            mov y+3, #high(5189 / 0x10000) 
07A0 120254     690            lcall mul32
07A3            691   
07A3            692            ; Adding the ambient temperature to oven temperature
07A3 853834     693            mov y+0, amb_temp+0
07A6 853935     694            mov y+1, amb_temp+1
07A9 853A36     695            mov y+2, amb_temp+2
07AC 853B37     696            mov y+3, amb_temp+3
07AF 12019F     697            lcall add32
07B2            698            
07B2            699            ; Convert to BCD and display
07B2 1200DA     700            lcall hex2bcd
07B5 C0E0       701            push acc
07B7 7403       701            mov a, #3
07B9 14         701            dec a
07BA 1200BF     701            lcall ?Set_Cursor_1 ; Select column and row
07BD D0E0       701            pop acc
07BF 120366     702            lcall Display_formated_BCD_To
07C2            703            ;---------------------------------;
07C2            704            ; Send a BCD number to PuTTY      ;
07C2            705            ;---------------------------------
07C2            706            
07C2            707            ?Send_BCD:
07C2 C0E0       708                    push acc
07C4            709                    ; Write most significant digit
07C4 E53F       710                    mov a, bcd+3
07C6 C4         711                    swap a
07C7 540F       712                    anl a, #0fh
07C9 4430       713                    orl a, #30h
07CB 1204D0     714                    lcall putchar
07CE            715                    ; write least significant digit
07CE E53F       716                    mov a, bcd+3
07D0 540F       717                    anl a, #0fh
07D2 4430       718                    orl a, #30h
07D4 1204D0     719                    lcall putchar
07D7            720                    
07D7            721                    ; Write most significant digit
07D7 E53E       722                    mov a, bcd+2
07D9 C4         723                    swap a
07DA 540F       724                    anl a, #0fh
07DC 4430       725                    orl a, #30h
07DE 1204D0     726                    lcall putchar
07E1            727                    ; write least significant digit
07E1 E53E       728                    mov a, bcd+2
07E3 540F       729                    anl a, #0fh
07E5 4430       730                    orl a, #30h
07E7 1204D0     731                    lcall putchar
07EA D0E0       732                    pop acc
07EC            733            ; Write most significant digit
07EC E53D       734                    mov a, bcd+1
07EE C4         735                    swap a
07EF 540F       736                    anl a, #0fh
07F1 4430       737                    orl a, #30h
07F3 1204D0     738                    lcall putchar
07F6            739   
07F6            740                    ; Write most significant digit
07F6            741   
07F6            742            
07F6            743            ; Storing the thermocouple temperature into var temp 
07F6 753410     744            mov y+0, #low (10000 % 0x10000) 
07F9 753527     744            mov y+1, #high(10000 % 0x10000) 
07FC 753600     744            mov y+2, #low (10000 / 0x10000) 
07FF 753700     744            mov y+3, #high(10000 / 0x10000) 
0802 1202E1     745            lcall div32
0805 853048     746            mov temp+0, x+0
0808 853149     747            mov temp+1, x+1
080B            748            
080B            749   
080B            750   
080B            751            ; Wait 100 ms between readings
080B 7A64       752            mov R2, #100
080D 1204E8     753            lcall waitms
0810            754            
0810            755   ; STATE MACHINE  
0810            756   FSM1:
0810 E54A       757            mov a, FSM1_state
0812            758   
0812            759   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
0812            760   FSM1_state0:
0812 B40022     761            cjne a, #0, FSM1_state1
0815 C0E0       762            push acc
0817 7410       762            mov a, #16
0819 14         762            dec a
081A 1200BD     762            lcall ?Set_Cursor_2 ; Select column and row
081D D0E0       762            pop acc
081F C083       763            push dph
0821 C082       763            push dpl
0823 C0E0       763            push acc
0825 90001A     763            mov dptr, #state0
0828 1200B2     763            lcall ?Send_Constant_String
082B D0E0       763            pop acc
082D D082       763            pop dpl
082F D083       763            pop dph
0831 754100     764            mov pwm, #0
0834            765            ;jb PB0, FSM1_state0_done
0834            766            ;mov FSM1_state, #1
0834            767   FSM1_state0_done:
0834 020607     768            ljmp Forever
0837            769   
0837            770   ; pre-heat state. Should go to state two when temp reaches temp_soak     
0837            771   FSM1_state1:
0837 B40134     772            cjne a, #1, FSM1_state2
083A C0E0       773            push acc
083C 7410       773            mov a, #16
083E 14         773            dec a
083F 1200BD     773            lcall ?Set_Cursor_2 ; Select column and row
0842 D0E0       773            pop acc
0844 C083       774            push dph
0846 C082       774            push dpl
0848 C0E0       774            push acc
084A 90001C     774            mov dptr, #state1
084D 1200B2     774            lcall ?Send_Constant_String
0850 D0E0       774            pop acc
0852 D082       774            pop dpl
0854 D083       774            pop dph
0856            775            
0856 C296       776            clr P1.6
0858            777            
0858 754164     778            mov pwm, #100
085B 754700     779            mov sec, #0
085E            780            
085E            781            ; These two lines are temporary. temp should be read from the thermocouple wire
085E 754364     782            mov temp_soak, #100
0861            783            
0861 E543       784            mov a, temp_soak
0863 D3         785            setb c
0864 9548       786            subb a, temp
0866 5003       787            jnc FSM1_state1_done
0868 754A02     788            mov FSM1_state, #2
086B            789   FSM1_state1_done:
086B 020607     790            ljmp Forever
086E            791   
086E            792   ; State 2
086E            793   FSM1_state2:
086E D296       794            setb P1.6 ;speaker
0870 B4023A     795            cjne a, #2, FSM1_state3
0873 C0E0       796            push acc
0875 7410       796            mov a, #16
0877 14         796            dec a
0878 1200BD     796            lcall ?Set_Cursor_2 ; Select column and row
087B D0E0       796            pop acc
087D C083       797            push dph
087F C082       797            push dpl
0881 C0E0       797            push acc
0883 90001E     797            mov dptr, #state2
0886 1200B2     797            lcall ?Send_Constant_String
0889 D0E0       797            pop acc
088B D082       797            pop dpl
088D D083       797            pop dph
088F 754114     798            mov pwm, #20
0892            799            
0892 E547       800            mov a, sec
0894 2401       801            add a, #1
0896 F547       802            mov sec, a
0898            803   
0898 7A32       804            mov R2, #50
089A 1204E8     805            lcall waitms
089D            806   
089D E544       807            mov a, Time_soak
089F C3         808            clr c
08A0 9547       809            subb a, sec
08A2 5003       810            jnc FSM1_state2_done
08A4 754A03     811            mov FSM1_state, #3
08A7            812   FSM1_state2_done:
08A7 020607     813            ljmp Forever
08AA            814   
08AA            815   ;DELETE
08AA            816   jump:
08AA 020812     817   ljmp FSM1_state0         
08AD            818   
08AD            819   ;State 3
08AD            820   FSM1_state3:
08AD B4032F     821            cjne a, #3, FSM1_state4
08B0 C0E0       822            push acc
08B2 7410       822            mov a, #16
08B4 14         822            dec a
08B5 1200BD     822            lcall ?Set_Cursor_2 ; Select column and row
08B8 D0E0       822            pop acc
08BA C083       823            push dph
08BC C082       823            push dpl
08BE C0E0       823            push acc
08C0 900020     823            mov dptr, #state3
08C3 1200B2     823            lcall ?Send_Constant_String
08C6 D0E0       823            pop acc
08C8 D082       823            pop dpl
08CA D083       823            pop dph
08CC 754164     824            mov pwm, #100
08CF 754700     825            mov sec, #0
08D2            826            
08D2            827            
08D2 E545       828            mov a, Temp_refl
08D4 C3         829            clr c
08D5 9548       830            subb a, temp
08D7 5003       831            jnc FSM1_state3_done
08D9 754A04     832            mov FSM1_state, #4
08DC            833   FSM1_state3_done:
08DC 020607     834            ljmp Forever
08DF            835   
08DF            836   
08DF            837   ;State 4
08DF            838   FSM1_state4:
08DF B40437     839            cjne a, #4, FSM1_state5
08E2 C0E0       840            push acc
08E4 7410       840            mov a, #16
08E6 14         840            dec a
08E7 1200BD     840            lcall ?Set_Cursor_2 ; Select column and row
08EA D0E0       840            pop acc
08EC C083       841            push dph
08EE C082       841            push dpl
08F0 C0E0       841            push acc
08F2 900022     841            mov dptr, #state4
08F5 1200B2     841            lcall ?Send_Constant_String
08F8 D0E0       841            pop acc
08FA D082       841            pop dpl
08FC D083       841            pop dph
08FE 754114     842            mov pwm, #20
0901            843            
0901 E547       844            mov a, sec
0903 2401       845            add a, #1
0905 F547       846            mov sec, a
0907            847   
0907 7A32       848            mov R2, #50
0909 1204E8     849            lcall waitms
090C            850            
090C E546       851            mov a, Time_refl
090E C3         852            clr c
090F 9547       853            subb a,sec
0911 5003       854            jnc FSM1_state4_done
0913 754A05     855            mov FSM1_state, #5
0916            856   FSM1_state4_done:
0916 020607     857            ljmp Forever
0919            858            
0919            859   FSM1_state5:
0919 B4058E     860            cjne a, #5, jump
091C C0E0       861            push acc
091E 7410       861            mov a, #16
0920 14         861            dec a
0921 1200BD     861            lcall ?Set_Cursor_2 ; Select column and row
0924 D0E0       861            pop acc
0926 C083       862            push dph
0928 C082       862            push dpl
092A C0E0       862            push acc
092C 900024     862            mov dptr, #state5
092F 1200B2     862            lcall ?Send_Constant_String
0932 D0E0       862            pop acc
0934 D082       862            pop dpl
0936 D083       862            pop dph
0938 754100     863            mov pwm, #0
093B            864            
093B            865            
093B 743C       866            mov a, #60
093D C3         867            clr c
093E 9548       868            subb a, temp
0940 4003       869            jc FSM1_state5_done
0942 754A00     870            mov FSM1_state,#0
0945            871   FSM1_state5_done:
0945 120400     872            lcall Save_Variables ; Save variables in flash memory
0948 020607     873            ljmp Forever
094B            874            
094B            875   
094B            876   
094B            877   ;Any additions to be checked
094B            878   EN
