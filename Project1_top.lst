                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   TIMER2_RATE         EQU 100      ; 100Hz or 10ms
0000             41   TIMER2_RELOAD       EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             42   
0000             43   
0000             44   ;pwn
0000             45   PWM_OUT    EQU P1.2 ; Logic 1=oven on
0000             46   
0000             47   ORG 0x0000
0000 0205BC      48       ljmp main
002B             49   ORG 0x002B
002B 020447      50            ljmp Timer2_ISR
002E             51   ; Initialization Messages
002E 4F3D2020    52   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
003F 2C00        53   comma              :     db ','               , 0
0041 7200        54   soak_message       :     db 'r'               , 0
0043 7300        55   reflow_message     :     db 's'               , 0
0045             56   
0045 3000        57   state0:     db '0', 0
0047 3100        58   state1:     db '1', 0
0049 3200        59   state2:     db '2', 0
004B 3300        60   state3:     db '3', 0
004D 3400        61   state4:     db '4', 0
004F 3500        62   state5:     db '5', 0
0051             63   
0051             64   cseg
0051             65   
0051             66   ; SYMBOLIC CONSTANTS
0051             67   
0051             68   ; INPUTS
0051             69   tempsensor_in equ P3.0
0051             70   thermocouple_in equ P1.1
0051             71   
0051             72   ; OUTPUTS
0051             73   oven_out equ P1.2
0051             74   speaker_out equ P1.6
0051             75   
0051             76   CSEG
0051             77   ; LCD
0051             78   LCD_RS equ P1.3
0051             79   LCD_E equ P1.4
0051             80   LCD_D4 equ P0.0
0051             81   LCD_D5 equ P0.1
0051             82   LCD_D6 equ P0.2
0051             83   LCD_D7 equ P0.3
0051             84   
                 86   	$LIST
0105             88   
0105             89   ; Flash instructions
0105             90   PAGE_ERASE_AP   EQU 00100010b
0105             91   BYTE_PROGRAM_AP EQU 00100001b
0105             92   
0105             93   ; These register definitions needed by 'math32.inc'
0030             94   DSEG at 30H
0030             95   x:   ds 4
0034             96   y:   ds 4
0038             97   amb_temp: ds 4 ; ambient temperature read by LM335
003C             98   bcd: ds 5
0041             99   
0041            100   DSEG
0041            101   pwm: ds 1
0042            102   state: ds 1
0043            103   temp_soak: ds 1
0044            104   Time_soak: ds 1
0045            105   Temp_refl: ds 1
0046            106   Time_refl: ds 1
0047            107   
0047            108   sec: ds 1
0048            109   temp: ds 2
004A            110   
004A            111   
004A            112   FSM1_state: ds 1
004B            113   
004B            114   
004B            115   ;for pwm
004B            116   pwm_counter:  ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
004C            117   
004C            118   seconds:      ds 1 ; a seconds counter attached to Timer 2 ISR
004D            119   
004D            120   
0000            121   BSEG
0000            122   reflow_flag: dbit 1
0001            123   soak_flag: dbit 1
0002            124   mf: dbit 1
0003            125   
0003            126   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            127   PB0: dbit 1
0004            128   PB1: dbit 1
0005            129   PB2: dbit 1
0006            130   PB3: dbit 1
0007            131   PB4: dbit 1
0008            132   PB5: dbit 1
0009            133   PB6: dbit 1
000A            134   PB7: dbit 1
000B            135   
000B            136   
000B            137   BSEG
000B            138   s_flag: dbit 1 ; set to 1 every time a second has passed
000C            139   
000C            140   
000C            141   ; MATH32
                546   $LIST
                143   $LIST
0375            145   
0375            146   ; Blank Macro
                147   Left_blank mac
                148   	mov a, %0
                149   	anl a, #0xf0
                150   	swap a
                151   	jz Left_blank_%M_a
                152   	ljmp %1
                153   Left_blank_%M_a:
                154   	Display_char(#' ')
                155   	mov a, %0
                156   	anl a, #0x0f
                157   	jz Left_blank_%M_b
                158   	ljmp %1
                159   Left_blank_%M_b:
                160   	Display_char(#' ')
                161   endmac
0375            162   
0375            163   
0375            164   ;binary to display 3 digits on lcd screen
0375            165   
0375            166   SendToLCD:
0375 75F064     167            mov b, #100
0378 84         168            div ab
0379 4430       169            orl a, #0x30
037B 1200A0     170            lcall ?WriteData
037E E5F0       171            mov a,b
0380 75F00A     172            mov b,#10
0383 84         173            div ab
0384 4430       174            orl a, #0x30
0386 1200A0     175            lcall ?WriteData
0389 E5F0       176            mov a, b
038B 4430       177            orl a, #0x30
038D 1200A0     178            lcall ?WriteData
0390 22         179            ret
0391            180   
0391            181   
0391            182   ; Formatting to display thermocouple temperature
0391            183   ; Display: 0000.00
0391            184   Display_formated_BCD_To:
0391 C000       185            push ar0
0393 A83F       185            mov r0, bcd+3
0395 1200EF     185            lcall ?Display_BCD
0398 D000       185            pop ar0
039A C000       186            push ar0
039C A83E       186            mov r0, bcd+2
039E 1200EF     186            lcall ?Display_BCD
03A1 D000       186            pop ar0
03A3 C0E0       187            push acc
03A5 742E       187            mov a, #'.'
03A7 1200A0     187            lcall ?WriteData
03AA D0E0       187            pop acc
03AC C000       188            push ar0
03AE A83D       188            mov r0, bcd+1
03B0 1200EF     188            lcall ?Display_BCD
03B3 D000       188            pop ar0
03B5            189   
03B5            190   
03B5 22         191            ret
03B6            192            
03B6            193   ; Formatting to display ambient temperature
03B6            194   ; Display: 00.00
03B6            195   Display_formated_BCD_Tj:
03B6 C000       196            push ar0
03B8 A83E       196            mov r0, bcd+2
03BA 1200EF     196            lcall ?Display_BCD
03BD D000       196            pop ar0
03BF C0E0       197            push acc
03C1 742E       197            mov a, #'.'
03C3 1200A0     197            lcall ?WriteData
03C6 D0E0       197            pop acc
03C8 C000       198            push ar0
03CA A83D       198            mov r0, bcd+1
03CC 1200EF     198            lcall ?Display_BCD
03CF D000       198            pop ar0
03D1 22         199            ret
03D2            200   
03D2            201   
03D2            202   ; INITIALIZATION SUBROUTINES
03D2            203   Init_All:
03D2            204            ; Configure all the pins for biderectional I/O
03D2 75AC00     205            mov     P3M1, #0x00
03D5 75AD00     206            mov     P3M2, #0x00
03D8 75B300     207            mov     P1M1, #0x00
03DB 75B400     208            mov     P1M2, #0x00
03DE 75B100     209            mov     P0M1, #0x00
03E1 75B200     210            mov     P0M2, #0x00
03E4            211   
03E4 438E10     212            orl     CKCON, #0x10 ; CLK is the input for timer 1
03E7 438780     213            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03EA 759852     214            mov     SCON, #0x52
03ED 53C4DF     215            anl     T3CON, #0b11011111
03F0 53890F     216            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03F3 438920     217            orl     TMOD, #0x20 ; Timer 1 Mode 2
03F6 758DF7     218            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03F9 D28E       219            setb TR1
03FB            220            
03FB            221            ; Using timer 0 for delay functions.  Initialize here:
03FB C28C       222            clr     TR0 ; Stop timer 0
03FD 438E08     223            orl     CKCON,#0x08 ; CLK is the input for timer 0
0400 5389F0     224            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0403 438901     225            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0406            226            
0406            227            
0406            228            ;Timer 2 for pulse
0406            229            ; Initialize timer 2 for periodic interrupts
0406 75C800     230            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0409 75CDD7     231            mov TH2, #high(TIMER2_RELOAD)
040C 75CC79     232            mov TL2, #low(TIMER2_RELOAD)
040F            233            ; Set the reload value
040F 75C9A0     234            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0412 75CBD7     235            mov RCMP2H, #high(TIMER2_RELOAD)
0415 75CA79     236            mov RCMP2L, #low(TIMER2_RELOAD)
0418            237            ; Init the free running 10 ms counter to zero
0418 754B00     238            mov pwm_counter, #0
041B            239            ; Enable the timer and interrupts
041B 439B80     240            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
041E D2CA       241       setb TR2  ; Enable timer 2
0420            242   
0420 D2AF       243            setb EA ; Enable global interrupts
0422            244            
0422            245            
0422            246            
0422            247            ; Initialize the pin used by the ADC (P1.1) as input.
0422 43B302     248            orl     P1M1, #0b00000010
0425 53B4FD     249            anl     P1M2, #0b11111101
0428            250   
0428            251            ; Initialize the pin used by the ADC (P3.0) as input.
0428 43AC01     252            orl     P3M1, #0b00000001
042B 53ADFE     253            anl     P3M2, #0b11111110
042E            254            
042E            255            ; Initialize and start the ADC:
042E 53E8F0     256            anl ADCCON0, #0xF0
0431 43E807     257            orl ADCCON0, #0x07 ; Select channel 7
0434            258   
0434 53E2F0     259            anl ADCCON2, #0xF0
0437 43E201     260            orl ADCCON2, #0x01 ; Select channel 1
043A            261   
043A            262            ; AINDIDS select if some pins are analog inputs or digital I/O:
043A 75F600     263            mov AINDIDS, #0x00 ; Disable all analog inputs
043D 43F680     264            orl AINDIDS, #0b10000000 ; P1.1 is analog input
0440 43F601     265            orl AINDIDS, #0b00000001 ; P3.0 is analog input
0443 43E101     266            orl ADCCON1, #0x01 ; Enable ADC
0446            267            
0446 22         268            ret
0447            269            
0447            270            
0447            271   ;---------------------------------;
0447            272   ; ISR for timer 2                 ;
0447            273   ;---------------------------------;
0447            274   Timer2_ISR:
0447 C2CF       275            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0449 C0D0       276            push psw
044B C0E0       277            push acc
044D            278            
044D 054B       279            inc pwm_counter
044F C3         280            clr c
0450 E541       281            mov a, pwm
0452 954B       282            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0454 B3         283            cpl c
0455 9292       284            mov PWM_OUT, c
0457            285            
0457 E54B       286            mov a, pwm_counter
0459 B46407     287            cjne a, #100, Timer2_ISR_done
045C 754B00     288            mov pwm_counter, #0
045F 054C       289            inc seconds ; It is super easy to keep a seconds count here
0461 D20B       290            setb s_flag
0463            291   
0463            292   Timer2_ISR_done:
0463 D0E0       293            pop acc
0465 D0D0       294            pop psw
0467 32         295            reti
0468            296   
0468            297   ; Flash Memory Subroutines
0468            298   ;******************************************************************************
0468            299   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0468            300   ; Data Flash when user code is executed in APROM.
0468            301   ; (The base of this code is listed in the N76E003 user manual)
0468            302   ;******************************************************************************
0468            303   
0468            304   Save_Variables:
0468 C2AF       305            CLR EA  ; MUST disable interrupts for this to work!
046A            306            
046A 75C7AA     307            MOV TA, #0aah ; CHPCON is TA protected
046D 75C755     308            MOV TA, #55h
0470 439F01     309            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
0473            310            
0473 75C7AA     311            MOV TA, #0aah ; IAPUEN is TA protected
0476 75C755     312            MOV TA, #55h
0479 43A501     313            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
047C            314            
047C 75AF22     315            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
047F 75A73F     316            MOV IAPAH, #3fh ; Address high byte
0482 75A680     317            MOV IAPAL, #80h ; Address low byte
0485 75AEFF     318            MOV IAPFD, #0FFh ; Data to load into the address byte
0488 75C7AA     319            MOV TA, #0aah ; IAPTRG is TA protected
048B 75C755     320            MOV TA, #55h
048E 43A401     321            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0491            322            
0491 75AF21     323            MOV IAPCN, #BYTE_PROGRAM_AP
0494 75A73F     324            MOV IAPAH, #3fh
0497            325            
0497            326            ;Load 3f80h with temp_soak
0497 75A680     327            MOV IAPAL, #80h
049A 8543AE     328            MOV IAPFD, temp_soak
049D 75C7AA     329            MOV TA, #0aah
04A0 75C755     330            MOV TA, #55h
04A3 43A401     331            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
04A6            332            
04A6            333            ;Load 3f81h with Time_soak
04A6 75A681     334            MOV IAPAL, #81h
04A9 8544AE     335            MOV IAPFD, Time_soak
04AC 75C7AA     336            MOV TA, #0aah
04AF 75C755     337            MOV TA, #55h
04B2 43A401     338            ORL IAPTRG,#00000001b
04B5            339            
04B5            340            ;Load 3f82h with Temp_refl
04B5 75A682     341            MOV IAPAL, #82h
04B8 8545AE     342            MOV IAPFD, Temp_refl
04BB 75C7AA     343            MOV TA, #0aah
04BE 75C755     344            MOV TA, #55h
04C1 43A401     345            ORL IAPTRG,#00000001b
04C4            346            
04C4            347            ;Load 3f83h with Time_refl
04C4 75A683     348            MOV IAPAL, #83h
04C7 8546AE     349            MOV IAPFD, Time_refl
04CA 75C7AA     350            MOV TA, #0aah
04CD 75C755     351            MOV TA, #55h
04D0 43A401     352            ORL IAPTRG,#00000001b
04D3            353   
04D3            354            ;Load 3f84h with 55h
04D3 75A684     355            MOV IAPAL,#84h
04D6 75AE55     356            MOV IAPFD, #55h
04D9 75C7AA     357            MOV TA, #0aah
04DC 75C755     358            MOV TA, #55h
04DF 43A401     359            ORL IAPTRG, #00000001b
04E2            360   
04E2            361            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
04E2 75A685     362            MOV IAPAL, #85h
04E5 75AEAA     363            MOV IAPFD, #0aah
04E8 75C7AA     364            MOV TA, #0aah
04EB 75C755     365            MOV TA, #55h
04EE 43A401     366            ORL IAPTRG, #00000001b
04F1            367   
04F1 75C7AA     368            MOV TA, #0aah
04F4 75C755     369            MOV TA, #55h
04F7 53A5FE     370            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
04FA 75C7AA     371            MOV TA, #0aah
04FD 75C755     372            MOV TA, #55h
0500 539FFE     373            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0503            374            
0503 D2AF       375            setb EA  ; Re-enable interrupts
0505            376   
0505 22         377            ret
0506            378   
0506            379   Load_Variables:
0506 903F84     380            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
0509 E4         381            clr a
050A 93         382            movc a, @a+dptr
050B B4551D     383            cjne a, #0x55, Load_Defaults
050E A3         384            inc dptr      ; Second key value location.  Must be 0xaa
050F E4         385            clr a
0510 93         386            movc a, @a+dptr
0511 B4AA17     387            cjne a, #0xaa, Load_Defaults
0514            388            
0514 903F80     389            mov dptr, #0x3f80
0517 E4         390            clr a
0518 93         391            movc a, @a+dptr
0519 F543       392            mov temp_soak, a
051B            393            
051B A3         394            inc dptr
051C E4         395            clr a
051D 93         396            movc a, @a+dptr
051E F544       397            mov Time_soak, a
0520            398            
0520 A3         399            inc dptr
0521 E4         400            clr a
0522 93         401            movc a, @a+dptr
0523 F545       402            mov Temp_refl, a
0525            403            
0525 A3         404            inc dptr
0526 E4         405            clr a
0527 93         406            movc a, @a+dptr
0528 F546       407            mov Time_refl, a
052A 22         408            ret
052B            409   
052B            410   Load_Defaults:
052B 754301     411            mov temp_soak, #1
052E 754402     412            mov Time_soak, #2
0531 754503     413            mov Temp_refl, #3
0534 754604     414            mov Time_refl, #4
0537 22         415            ret
0538            416   
0538            417   wait_1ms:
0538 C28C       418            clr     TR0 ; Stop timer 0
053A C28D       419            clr     TF0 ; Clear overflow flag
053C 758CBF     420            mov     TH0, #high(TIMER0_RELOAD_1MS)
053F 758A28     421            mov     TL0,#low(TIMER0_RELOAD_1MS)
0542 D28C       422            setb TR0
0544 308DFD     423            jnb     TF0, $ ; Wait for overflow
0547 22         424            ret
0548            425   
0548            426   ; Wait the number of miliseconds in R2
0548            427   waitms:
0548 120538     428            lcall wait_1ms
054B DAFB       429            djnz R2, waitms
054D 22         430            ret
054E            431   
054E            432   ADC_to_PB:
054E 53E8F0     433            anl ADCCON0, #0xF0
0551 43E800     434            orl ADCCON0, #0x00 ; Select AIN0
0554            435            
0554 C2EF       436            clr ADCF
0556 D2EE       437            setb ADCS   ; ADC start trigger signal
0558 30EFFD     438       jnb ADCF, $ ; Wait for conversion complete
055B            439   
055B D20A       440            setb PB7
055D D209       441            setb PB6
055F D208       442            setb PB5
0561 D207       443            setb PB4
0563 D206       444            setb PB3
0565 D205       445            setb PB2
0567 D204       446            setb PB1
0569 D203       447            setb PB0
056B            448            
056B            449            ; Check PB7
056B            450   ADC_to_PB_L7:
056B C3         451            clr c
056C E5C3       452            mov a, ADCRH
056E 94F0       453            subb a, #0xf0
0570 4003       454            jc ADC_to_PB_L6
0572 C20A       455            clr PB7
0574 22         456            ret
0575            457   
0575            458            ; Check PB6
0575            459   ADC_to_PB_L6:
0575 C3         460            clr c
0576 E5C3       461            mov a, ADCRH
0578 94D0       462            subb a, #0xd0
057A 4003       463            jc ADC_to_PB_L5
057C C209       464            clr PB6
057E 22         465            ret
057F            466   
057F            467            ; Check PB5
057F            468   ADC_to_PB_L5:
057F C3         469            clr c
0580 E5C3       470            mov a, ADCRH
0582 94B0       471            subb a, #0xb0
0584 4003       472            jc ADC_to_PB_L4
0586 C208       473            clr PB5
0588 22         474            ret
0589            475   
0589            476            ; Check PB4
0589            477   ADC_to_PB_L4:
0589 C3         478            clr c
058A E5C3       479            mov a, ADCRH
058C 9490       480            subb a, #0x90
058E 4003       481            jc ADC_to_PB_L3
0590 C207       482            clr PB4
0592 22         483            ret
0593            484   
0593            485            ; Check PB3
0593            486   ADC_to_PB_L3:
0593 C3         487            clr c
0594 E5C3       488            mov a, ADCRH
0596 9470       489            subb a, #0x70
0598 4003       490            jc ADC_to_PB_L2
059A C206       491            clr PB3
059C 22         492            ret
059D            493   
059D            494            ; Check PB2
059D            495   ADC_to_PB_L2:
059D C3         496            clr c
059E E5C3       497            mov a, ADCRH
05A0 9450       498            subb a, #0x50
05A2 4003       499            jc ADC_to_PB_L1
05A4 C205       500            clr PB2
05A6 22         501            ret
05A7            502   
05A7            503            ; Check PB1
05A7            504   ADC_to_PB_L1:
05A7 C3         505            clr c
05A8 E5C3       506            mov a, ADCRH
05AA 9430       507            subb a, #0x30
05AC 4003       508            jc ADC_to_PB_L0
05AE C204       509            clr PB1
05B0 22         510            ret
05B1            511   
05B1            512            ; Check PB0
05B1            513   ADC_to_PB_L0:
05B1 C3         514            clr c
05B2 E5C3       515            mov a, ADCRH
05B4 9410       516            subb a, #0x10
05B6 4003       517            jc ADC_to_PB_Done
05B8 C203       518            clr PB0
05BA 22         519            ret
05BB            520            
05BB            521   ADC_to_PB_Done:
05BB            522            ; No puhsbutton pressed         
05BB 22         523            ret
05BC            524   
05BC            525   ; MAIN 
05BC            526   main:
05BC 75817F     527            mov sp, #0x7f
05BF 1203D2     528       lcall Init_All
05C2 1200AA     529       lcall LCD_4BIT
05C5            530       ; initial messages in LCD
05C5 C0E0       531            push acc
05C7 7401       531            mov a, #1
05C9 14         531            dec a
05CA 1200EA     531            lcall ?Set_Cursor_1 ; Select column and row
05CD D0E0       531            pop acc
05CF C083       532            push dph
05D1 C082       532            push dpl
05D3 C0E0       532            push acc
05D5 90002E     532            mov dptr, #temperature_message
05D8 1200DD     532            lcall ?Send_Constant_String
05DB D0E0       532            pop acc
05DD D082       532            pop dpl
05DF D083       532            pop dph
05E1 C0E0       533            push acc
05E3 7401       533            mov a, #1
05E5 14         533            dec a
05E6 1200E8     533            lcall ?Set_Cursor_2 ; Select column and row
05E9 D0E0       533            pop acc
05EB C083       534            push dph
05ED C082       534            push dpl
05EF C0E0       534            push acc
05F1 900041     534            mov dptr, #soak_message
05F4 1200DD     534            lcall ?Send_Constant_String
05F7 D0E0       534            pop acc
05F9 D082       534            pop dpl
05FB D083       534            pop dph
05FD C0E0       535            push acc
05FF 7405       535            mov a, #5
0601 14         535            dec a
0602 1200E8     535            lcall ?Set_Cursor_2 ; Select column and row
0605 D0E0       535            pop acc
0607 C083       536            push dph
0609 C082       536            push dpl
060B C0E0       536            push acc
060D 90003F     536            mov dptr, #comma
0610 1200DD     536            lcall ?Send_Constant_String
0613 D0E0       536            pop acc
0615 D082       536            pop dpl
0617 D083       536            pop dph
0619 C0E0       537            push acc
061B 7408       537            mov a, #8
061D 14         537            dec a
061E 1200E8     537            lcall ?Set_Cursor_2 ; Select column and row
0621 D0E0       537            pop acc
0623 C083       538            push dph
0625 C082       538            push dpl
0627 C0E0       538            push acc
0629 900043     538            mov dptr, #reflow_message
062C 1200DD     538            lcall ?Send_Constant_String
062F D0E0       538            pop acc
0631 D082       538            pop dpl
0633 D083       538            pop dph
0635 C0E0       539            push acc
0637 740C       539            mov a, #12
0639 14         539            dec a
063A 1200E8     539            lcall ?Set_Cursor_2 ; Select column and row
063D D0E0       539            pop acc
063F C083       540            push dph
0641 C082       540            push dpl
0643 C0E0       540            push acc
0645 90003F     540            mov dptr, #comma
0648 1200DD     540            lcall ?Send_Constant_String
064B D0E0       540            pop acc
064D D082       540            pop dpl
064F D083       540            pop dph
0651            541   
0651 754A00     542            mov FSM1_state, #0
0654 7543C8     543       mov Temp_soak, #200
0657 754460     544            mov Time_soak, #0x60
065A 7545C8     545            mov Temp_refl, #200
065D 754645     546            mov Time_refl, #0x45
0660 754700     547            mov sec, #0
0663            548   
0663 C200       549            clr reflow_flag ; start on temp
0665 C201       550            clr soak_flag ; start on temp
0667            551   
0667            552   Forever:
0667            553   
0667            554   
0667            555   ; Example branch for decreasing any given value 
0667            556   ; This set of code will increase the ones columnn of any given 
0667            557   ; variable. ie. reflow_temp_ones, reflow_time_ones
0667            558   ; the 10s and 100s column will update in response to increasing 
0667            559   ; the ones column beyond 9.
0667            560   
0667            561   ; REFLOW ;
0667            562   reflow_toggle:
0667 200A02     563            jb PB7, check_reflow_toggle
066A B200       564            cpl reflow_flag ; if button is pressed, change flag
066C            565   
066C            566   check_reflow_toggle: 
066C 200010     567            jb reflow_flag, turn_reflow_to_time
066F            568   
066F            569   turn_reflow_to_temp:
066F            570            ; will use the same logic for the other pushbuttons
066F            571   ; This example will use temp_soak for this example
066F            572   
066F            573            decrease_reflow_temp:
066F 200905     574            jb PB6, increase_reflow_temp
0672 1545       575       dec Temp_refl
0674 020699     576            ljmp soak_toggle
0677            577            
0677            578            increase_reflow_temp:
0677 20081F     579            jb PB5, soak_toggle 
067A 0545       580            inc Temp_refl
067C 020699     581            ljmp soak_toggle
067F            582   
067F            583   
067F            584   turn_reflow_to_time:
067F            585            
067F            586            decrease_reflow_time:
067F 20090A     587            jb PB6, increase_reflow_time
0682 E546       588            mov a, Time_refl
0684 2499       589       add a, #0x99
0686 D4         590            da a
0687 F546       591       mov Time_refl, a
0689 020699     592            ljmp soak_toggle
068C            593            
068C            594            increase_reflow_time:
068C 20080A     595            jb PB5, soak_toggle 
068F E546       596            mov a, Time_refl
0691 2401       597            add a, #1
0693 D4         598            da a 
0694 F546       599            mov Time_refl, a
0696 020699     600            ljmp soak_toggle
0699            601   
0699            602   ; SOAK ;
0699            603   soak_toggle:
0699 200702     604            jb PB4, check_soak_toggle
069C B201       605            cpl soak_flag ; if button is pressed, change flag
069E            606   
069E            607   check_soak_toggle: 
069E 200110     608            jb soak_flag, turn_soak_to_time
06A1            609   
06A1            610   turn_soak_to_temp:
06A1            611            ; will use the same logic for the other pushbuttons
06A1            612   ; This example will use temp_soak for this example
06A1            613   
06A1            614            decrease_soak_temp:
06A1 200605     615            jb PB3, increase_soak_temp
06A4 1543       616       dec Temp_soak
06A6 0206CB     617            ljmp start_stop
06A9            618            
06A9            619            increase_soak_temp:
06A9 20051F     620            jb PB2, start_stop 
06AC 0543       621            inc Temp_soak
06AE 0206CB     622            ljmp start_stop
06B1            623   
06B1            624   turn_soak_to_time:
06B1            625            
06B1            626            decrease_soak_time:
06B1 20060A     627            jb PB3, increase_soak_time
06B4 E544       628            mov a, Time_soak
06B6 2499       629       add a, #0x99
06B8 D4         630            da a
06B9 F544       631       mov Time_soak, a
06BB 0206CB     632            ljmp start_stop
06BE            633            
06BE            634            increase_soak_time:
06BE 2005D8     635            jb PB2, soak_toggle 
06C1 E544       636            mov a, Time_soak
06C3 2401       637            add a, #1
06C5 D4         638            da a 
06C6 F544       639            mov Time_soak, a
06C8 0206CB     640            ljmp start_stop
06CB            641   
06CB            642   start_stop:
06CB E545       643            mov a, Temp_refl
06CD C0E0       644            push acc
06CF 7402       644            mov a, #2
06D1 14         644            dec a
06D2 1200E8     644            lcall ?Set_Cursor_2 ; Select column and row
06D5 D0E0       644            pop acc
06D7 120375     645            lcall SendToLCD
06DA E4         646            clr a
06DB E544       647            mov a, Time_soak
06DD C0E0       648            push acc
06DF 7409       648            mov a, #9
06E1 14         648            dec a
06E2 1200E8     648            lcall ?Set_Cursor_2 ; Select column and row
06E5 D0E0       648            pop acc
06E7 120375     649            lcall SendToLCD
06EA E4         650            clr a
06EB C0E0       651            push acc
06ED 7406       651            mov a, #6
06EF 14         651            dec a
06F0 1200E8     651            lcall ?Set_Cursor_2 ; Select column and row
06F3 D0E0       651            pop acc
06F5 C000       652            push ar0
06F7 A846       652            mov r0, Time_refl
06F9 1200EF     652            lcall ?Display_BCD
06FC D000       652            pop ar0
06FE C0E0       653            push acc
0700 740D       653            mov a, #13
0702 14         653            dec a
0703 1200E8     653            lcall ?Set_Cursor_2 ; Select column and row
0706 D0E0       653            pop acc
0708 C000       654            push ar0
070A A844       654            mov r0, Time_soak
070C 1200EF     654            lcall ?Display_BCD
070F D000       654            pop ar0
0711 20030F     655            jb PB0, continue
0714            656   
0714            657   turn_on:
0714 E54A       658            mov a, FSM1_state
0716 B40005     659            cjne a, #0, turn_off
0719 754A01     660            mov FSM1_state, #1
071C 8005       661            sjmp continue
071E            662   
071E            663   turn_off:
071E 754A00     664            mov FSM1_state, #0
0721 8000       665            sjmp continue
0723            666   
0723            667   
0723            668   continue:
0723 12054E     669            lcall ADC_to_PB
0726            670            ;lcall Display_PushButtons_ADC
0726            671            
0726 75E807     672            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
0729 C2EF       673            clr ADCF
072B D2EE       674            setb ADCS ;  ADC start trigger signal
072D 30EFFD     675       jnb ADCF, $ ; Wait for conversion complete
0730            676       
0730            677       ; Read the ADC result and store in [R1, R0]
0730 E5C3       678       mov a, ADCRH   
0732 C4         679       swap a
0733 C0E0       680       push acc
0735 540F       681       anl a, #0x0f
0737 F9         682       mov R1, a
0738 D0E0       683       pop acc
073A 54F0       684       anl a, #0xf0
073C 45C2       685       orl a, ADCRL
073E F8         686       mov R0, A
073F            687       
073F 75E801     688       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
0742 C2EF       689            clr ADCF
0744 D2EE       690            setb ADCS ;  ADC start trigger signal
0746 30EFFD     691       jnb ADCF, $ ; Wait for conversion complete
0749            692       
0749            693       ; Read the ADC result and store in [R4, R3]
0749 E5C3       694       mov a, ADCRH   
074B C4         695       swap a
074C C0E0       696       push acc
074E 540F       697       anl a, #0x0f
0750 FC         698       mov R4, a
0751 D0E0       699       pop acc
0753 54F0       700       anl a, #0xf0
0755 45C2       701       orl a, ADCRL
0757 FB         702       mov R3, A
0758            703       
0758            704            ; Convert to LM335 temperature to voltage
0758 8B30       705            mov x+0, R3
075A 8C31       706            mov x+1, R4
075C 753200     707            mov x+2, #0
075F 753300     708            mov x+3, #0
0762 75347C     709            mov y+0, #low (50300 % 0x10000) 
0765 7535C4     709            mov y+1, #high(50300 % 0x10000) 
0768 753600     709            mov y+2, #low (50300 / 0x10000) 
076B 753700     709            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
076E 12027F     710            lcall mul32
0771 7534FF     711            mov y+0, #low (4095 % 0x10000) 
0774 75350F     711            mov y+1, #high(4095 % 0x10000) 
0777 753600     711            mov y+2, #low (4095 / 0x10000) 
077A 753700     711            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
077D 12030C     712            lcall div32
0780 7534D0     713            mov y+0, #low (27600 % 0x10000) 
0783 75356B     713            mov y+1, #high(27600 % 0x10000) 
0786 753600     713            mov y+2, #low (27600 / 0x10000) 
0789 753700     713            mov y+3, #high(27600 / 0x10000) 
078C 1201EB     714            lcall sub32
078F 753464     715            mov y+0, #low (100 % 0x10000) 
0792 753500     715            mov y+1, #high(100 % 0x10000) 
0795 753600     715            mov y+2, #low (100 / 0x10000) 
0798 753700     715            mov y+3, #high(100 / 0x10000) 
079B 12027F     716            lcall mul32
079E            717            
079E            718            ; Convert to BCD and display
079E 120105     719            lcall hex2bcd
07A1 C0E0       720            push acc
07A3 740C       720            mov a, #12
07A5 14         720            dec a
07A6 1200EA     720            lcall ?Set_Cursor_1 ; Select column and row
07A9 D0E0       720            pop acc
07AB 1203B6     721            lcall Display_formated_BCD_Tj
07AE            722   
07AE            723            ; Convert value back to hex to use for calculations
07AE 12018E     724            lcall bcd2hex
07B1            725   
07B1            726            ; Storing the ambient temperature
07B1 853038     727            mov amb_temp+0, x+0
07B4 853139     728            mov amb_temp+1, x+1
07B7 85323A     729            mov amb_temp+2, x+2
07BA 85333B     730            mov amb_temp+3, x+3
07BD            731   
07BD            732            ; Convert to thermocouple voltage to temperature
07BD 8830       733            mov x+0, R0
07BF 8931       734            mov x+1, R1
07C1 753200     735            mov x+2, #0
07C4 753300     736            mov x+3, #0
07C7 75347C     737            mov y+0, #low (50300 % 0x10000) 
07CA 7535C4     737            mov y+1, #high(50300 % 0x10000) 
07CD 753600     737            mov y+2, #low (50300 / 0x10000) 
07D0 753700     737            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07D3 12027F     738            lcall mul32
07D6 7534FF     739            mov y+0, #low (4095 % 0x10000) 
07D9 75350F     739            mov y+1, #high(4095 % 0x10000) 
07DC 753600     739            mov y+2, #low (4095 / 0x10000) 
07DF 753700     739            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07E2 12030C     740            lcall div32
07E5 753464     741            mov y+0, #low (100 % 0x10000) 
07E8 753500     741            mov y+1, #high(100 % 0x10000) 
07EB 753600     741            mov y+2, #low (100 / 0x10000) 
07EE 753700     741            mov y+3, #high(100 / 0x10000) 
07F1 12030C     742            lcall div32
07F4 753445     743            mov y+0, #low (5189 % 0x10000) 
07F7 753514     743            mov y+1, #high(5189 % 0x10000) 
07FA 753600     743            mov y+2, #low (5189 / 0x10000) 
07FD 753700     743            mov y+3, #high(5189 / 0x10000) 
0800 12027F     744            lcall mul32
0803            745   
0803            746            ; Adding the ambient temperature to oven temperature
0803 853834     747            mov y+0, amb_temp+0
0806 853935     748            mov y+1, amb_temp+1
0809 853A36     749            mov y+2, amb_temp+2
080C 853B37     750            mov y+3, amb_temp+3
080F 1201CA     751            lcall add32
0812            752            
0812            753            ; Convert to BCD and display
0812 120105     754            lcall hex2bcd
0815 C0E0       755            push acc
0817 7403       755            mov a, #3
0819 14         755            dec a
081A 1200EA     755            lcall ?Set_Cursor_1 ; Select column and row
081D D0E0       755            pop acc
081F 120391     756            lcall Display_formated_BCD_To
0822            757   
0822            758            ; Storing the thermocouple temperature into var temp 
0822 753410     759            mov y+0, #low (10000 % 0x10000) 
0825 753527     759            mov y+1, #high(10000 % 0x10000) 
0828 753600     759            mov y+2, #low (10000 / 0x10000) 
082B 753700     759            mov y+3, #high(10000 / 0x10000) 
082E 12030C     760            lcall div32
0831 853048     761            mov temp+0, x+0
0834 853149     762            mov temp+1, x+1
0837            763            
0837            764            ; Wait 100 ms between readings
0837 7A64       765            mov R2, #100
0839 120548     766            lcall waitms
083C            767            
083C            768   ; STATE MACHINE  
083C            769   FSM1:
083C E54A       770            mov a, FSM1_state
083E            771   
083E            772   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
083E            773   FSM1_state0:
083E B40025     774            cjne a, #0, FSM1_state1
0841 C0E0       775            push acc
0843 7410       775            mov a, #16
0845 14         775            dec a
0846 1200E8     775            lcall ?Set_Cursor_2 ; Select column and row
0849 D0E0       775            pop acc
084B C083       776            push dph
084D C082       776            push dpl
084F C0E0       776            push acc
0851 900045     776            mov dptr, #state0
0854 1200DD     776            lcall ?Send_Constant_String
0857 D0E0       776            pop acc
0859 D082       776            pop dpl
085B D083       776            pop dph
085D 754100     777            mov pwm, #0
0860 754700     778            mov sec, #0
0863            779            ;jb PB0, FSM1_state0_done
0863            780            ;mov FSM1_state, #1
0863            781   FSM1_state0_done:
0863 020667     782            ljmp Forever
0866            783   
0866            784   ; pre-heat state. Should go to state two when temp reaches temp_soak     
0866            785   FSM1_state1:
0866 B40144     786            cjne a, #1, FSM1_state2
0869 C0E0       787            push acc
086B 7410       787            mov a, #16
086D 14         787            dec a
086E 1200E8     787            lcall ?Set_Cursor_2 ; Select column and row
0871 D0E0       787            pop acc
0873 C083       788            push dph
0875 C082       788            push dpl
0877 C0E0       788            push acc
0879 900047     788            mov dptr, #state1
087C 1200DD     788            lcall ?Send_Constant_String
087F D0E0       788            pop acc
0881 D082       788            pop dpl
0883 D083       788            pop dph
0885            789            
0885 C296       790            clr P1.6
0887            791            
0887 754164     792            mov pwm, #100
088A            793            
088A E547       794            mov a, sec
088C 2401       795            add a, #1
088E F547       796            mov sec, a
0890            797   
0890 743C       798            mov a, #60
0892 C3         799            clr c
0893 9547       800            subb a, sec
0895 5006       801            jnc FSM1_state1_continue
0897 754A00     802            mov FSM1_state, #0
089A 020667     803            ljmp Forever
089D            804   
089D            805   FSM1_state1_continue:
089D            806            ; These two lines are temporary. temp should be read from the thermocouple wire
089D 754364     807            mov temp_soak, #100
08A0            808            
08A0 E543       809            mov a, temp_soak
08A2 D3         810            setb c
08A3 9548       811            subb a, temp
08A5 5003       812            jnc FSM1_state1_done
08A7 754A02     813            mov FSM1_state, #2
08AA            814   FSM1_state1_done:
08AA 020667     815            ljmp Forever
08AD            816   
08AD            817   ; State 2
08AD            818   FSM1_state2:
08AD D296       819            setb P1.6 ;speaker
08AF B4023A     820            cjne a, #2, FSM1_state3
08B2 C0E0       821            push acc
08B4 7410       821            mov a, #16
08B6 14         821            dec a
08B7 1200E8     821            lcall ?Set_Cursor_2 ; Select column and row
08BA D0E0       821            pop acc
08BC C083       822            push dph
08BE C082       822            push dpl
08C0 C0E0       822            push acc
08C2 900049     822            mov dptr, #state2
08C5 1200DD     822            lcall ?Send_Constant_String
08C8 D0E0       822            pop acc
08CA D082       822            pop dpl
08CC D083       822            pop dph
08CE 754114     823            mov pwm, #20
08D1            824            
08D1 E547       825            mov a, sec
08D3 2401       826            add a, #1
08D5 F547       827            mov sec, a
08D7            828   
08D7 7A32       829            mov R2, #50
08D9 120548     830            lcall waitms
08DC            831   
08DC E544       832            mov a, Time_soak
08DE C3         833            clr c
08DF 9547       834            subb a, sec
08E1 5003       835            jnc FSM1_state2_done
08E3 754A03     836            mov FSM1_state, #3
08E6            837   FSM1_state2_done:
08E6 020667     838            ljmp Forever
08E9            839   
08E9            840   ;DELETE
08E9            841   jump:
08E9 02083E     842   ljmp FSM1_state0         
08EC            843   
08EC            844   ;State 3
08EC            845   FSM1_state3:
08EC B4032F     846            cjne a, #3, FSM1_state4
08EF C0E0       847            push acc
08F1 7410       847            mov a, #16
08F3 14         847            dec a
08F4 1200E8     847            lcall ?Set_Cursor_2 ; Select column and row
08F7 D0E0       847            pop acc
08F9 C083       848            push dph
08FB C082       848            push dpl
08FD C0E0       848            push acc
08FF 90004B     848            mov dptr, #state3
0902 1200DD     848            lcall ?Send_Constant_String
0905 D0E0       848            pop acc
0907 D082       848            pop dpl
0909 D083       848            pop dph
090B 754164     849            mov pwm, #100
090E 754700     850            mov sec, #0
0911            851            
0911            852            
0911 E545       853            mov a, Temp_refl
0913 C3         854            clr c
0914 9548       855            subb a, temp
0916 5003       856            jnc FSM1_state3_done
0918 754A04     857            mov FSM1_state, #4
091B            858   FSM1_state3_done:
091B 020667     859            ljmp Forever
091E            860   
091E            861   
091E            862   ;State 4
091E            863   FSM1_state4:
091E B40437     864            cjne a, #4, FSM1_state5
0921 C0E0       865            push acc
0923 7410       865            mov a, #16
0925 14         865            dec a
0926 1200E8     865            lcall ?Set_Cursor_2 ; Select column and row
0929 D0E0       865            pop acc
092B C083       866            push dph
092D C082       866            push dpl
092F C0E0       866            push acc
0931 90004D     866            mov dptr, #state4
0934 1200DD     866            lcall ?Send_Constant_String
0937 D0E0       866            pop acc
0939 D082       866            pop dpl
093B D083       866            pop dph
093D 754114     867            mov pwm, #20
0940            868            
0940 E547       869            mov a, sec
0942 2401       870            add a, #1
0944 F547       871            mov sec, a
0946            872   
0946 7A32       873            mov R2, #50
0948 120548     874            lcall waitms
094B            875            
094B E546       876            mov a, Time_refl
094D C3         877            clr c
094E 9547       878            subb a,sec
0950 5003       879            jnc FSM1_state4_done
0952 754A05     880            mov FSM1_state, #5
0955            881   FSM1_state4_done:
0955 020667     882            ljmp Forever
0958            883            
0958            884   FSM1_state5:
0958 B4058E     885            cjne a, #5, jump
095B C0E0       886            push acc
095D 7410       886            mov a, #16
095F 14         886            dec a
0960 1200E8     886            lcall ?Set_Cursor_2 ; Select column and row
0963 D0E0       886            pop acc
0965 C083       887            push dph
0967 C082       887            push dpl
0969 C0E0       887            push acc
096B 90004F     887            mov dptr, #state5
096E 1200DD     887            lcall ?Send_Constant_String
0971 D0E0       887            pop acc
0973 D082       887            pop dpl
0975 D083       887            pop dph
0977 754100     888            mov pwm, #0
097A            889            
097A            890            
097A 743C       891            mov a, #60
097C C3         892            clr c
097D 9548       893            subb a, temp
097F 4003       894            jc FSM1_state5_done
0981 754A00     895            mov FSM1_state,#0
0984            896   FSM1_state5_done:
0984 120468     897            lcall Save_Variables ; Save variables in flash memory
0987 020667     898            ljmp Forever
098A            899            
098A            900   
098A            901   
098A            902   ;Any additions to be checked
098A            903   EN
