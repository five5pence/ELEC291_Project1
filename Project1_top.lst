                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 020532      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014             45   
0014 3000        46   state0:     db '0', 0
0016 3100        47   state1:     db '1', 0
0018 3200        48   state2:     db '2', 0
001A 3300        49   state3:     db '3', 0
001C 3400        50   state4:     db '4', 0
001E 3500        51   state5:     db '5', 0
0020             52   
0020             53   cseg
0020             54   
0020             55   ; SYMBOLIC CONSTANTS
0020             56   
0020             57   ; INPUTS
0020             58   tempsensor_in equ P3.0
0020             59   thermocouple_in equ P1.1
0020             60   
0020             61   ; OUTPUTS
0020             62   oven_out equ P1.2
0020             63   speaker_out equ P1.6
0020             64   
0020             65   CSEG
0020             66   ; LCD
0020             67   LCD_RS equ P1.3
0020             68   LCD_E equ P1.4
0020             69   LCD_D4 equ P0.0
0020             70   LCD_D5 equ P0.1
0020             71   LCD_D6 equ P0.2
0020             72   LCD_D7 equ P0.3
0020             73   
                 75   	$LIST
00D4             77   
00D4             78   ; Flash instructions
00D4             79   PAGE_ERASE_AP   EQU 00100010b
00D4             80   BYTE_PROGRAM_AP EQU 00100001b
00D4             81   
00D4             82   ; These register definitions needed by 'math32.inc'
0030             83   DSEG at 30H
0030             84   x:   ds 4
0034             85   y:   ds 4
0038             86   amb_temp: ds 4 ; ambient temperature read by LM335
003C             87   bcd: ds 5
0041             88   
0041             89   DSEG
0041             90   pwm: ds 1
0042             91   state: ds 1
0043             92   temp_soak: ds 1
0044             93   Time_soak: ds 1
0045             94   Temp_refl: ds 1
0046             95   Time_refl: ds 1
0047             96   
0047             97   sec: ds 1
0048             98   temp: ds 2
004A             99   
004A            100   
004A            101   FSM1_state: ds 1
004B            102   
0000            103   BSEG
0000            104   mf: dbit 1
0001            105   
0001            106   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0001            107   PB0: dbit 1
0002            108   PB1: dbit 1
0003            109   PB2: dbit 1
0004            110   PB3: dbit 1
0005            111   PB4: dbit 1
0006            112   PB5: dbit 1
0007            113   PB6: dbit 1
0008            114   PB7: dbit 1
0009            115   
0009            116   ; MATH32
                546   $LIST
                118   $LIST
0344            120   
0344            121   ; Blank Macro
                122   Left_blank mac
                123   	mov a, %0
                124   	anl a, #0xf0
                125   	swap a
                126   	jz Left_blank_%M_a
                127   	ljmp %1
                128   Left_blank_%M_a:
                129   	Display_char(#' ')
                130   	mov a, %0
                131   	anl a, #0x0f
                132   	jz Left_blank_%M_b
                133   	ljmp %1
                134   Left_blank_%M_b:
                135   	Display_char(#' ')
                136   endmac
0344            137   
0344            138   ; Formatting to display thermocouple temperature
0344            139   ; Display: 0000.00
0344            140   Display_formated_BCD_To:
0344 C000       141            push ar0
0346 A83F       141            mov r0, bcd+3
0348 1200BE     141            lcall ?Display_BCD
034B D000       141            pop ar0
034D C000       142            push ar0
034F A83E       142            mov r0, bcd+2
0351 1200BE     142            lcall ?Display_BCD
0354 D000       142            pop ar0
0356 C0E0       143            push acc
0358 742E       143            mov a, #'.'
035A 12006F     143            lcall ?WriteData
035D D0E0       143            pop acc
035F C000       144            push ar0
0361 A83D       144            mov r0, bcd+1
0363 1200BE     144            lcall ?Display_BCD
0366 D000       144            pop ar0
0368            145   
0368            146   
0368 22         147            ret
0369            148            
0369            149   ; Formatting to display ambient temperature
0369            150   ; Display: 00.00
0369            151   Display_formated_BCD_Tj:
0369 C000       152            push ar0
036B A83E       152            mov r0, bcd+2
036D 1200BE     152            lcall ?Display_BCD
0370 D000       152            pop ar0
0372 C0E0       153            push acc
0374 742E       153            mov a, #'.'
0376 12006F     153            lcall ?WriteData
0379 D0E0       153            pop acc
037B C000       154            push ar0
037D A83D       154            mov r0, bcd+1
037F 1200BE     154            lcall ?Display_BCD
0382 D000       154            pop ar0
0384 22         155            ret
0385            156   
0385            157   
0385            158   ; INITIALIZATION SUBROUTINES
0385            159   Init_All:
0385            160            ; Configure all the pins for biderectional I/O
0385 75AC00     161            mov     P3M1, #0x00
0388 75AD00     162            mov     P3M2, #0x00
038B 75B300     163            mov     P1M1, #0x00
038E 75B400     164            mov     P1M2, #0x00
0391 75B100     165            mov     P0M1, #0x00
0394 75B200     166            mov     P0M2, #0x00
0397            167   
0397 438E10     168            orl     CKCON, #0x10 ; CLK is the input for timer 1
039A 438780     169            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
039D 759852     170            mov     SCON, #0x52
03A0 53C4DF     171            anl     T3CON, #0b11011111
03A3 53890F     172            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03A6 438920     173            orl     TMOD, #0x20 ; Timer 1 Mode 2
03A9 758DF7     174            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03AC D28E       175            setb TR1
03AE            176            
03AE            177            ; Using timer 0 for delay functions.  Initialize here:
03AE C28C       178            clr     TR0 ; Stop timer 0
03B0 438E08     179            orl     CKCON,#0x08 ; CLK is the input for timer 0
03B3 5389F0     180            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03B6 438901     181            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03B9            182            
03B9            183            ; Initialize the pin used by the ADC (P1.1) as input.
03B9 43B302     184            orl     P1M1, #0b00000010
03BC 53B4FD     185            anl     P1M2, #0b11111101
03BF            186   
03BF            187            ; Initialize the pin used by the ADC (P3.0) as input.
03BF 43AC01     188            orl     P3M1, #0b00000001
03C2 53ADFE     189            anl     P3M2, #0b11111110
03C5            190            
03C5            191            ; Initialize and start the ADC:
03C5 53E8F0     192            anl ADCCON0, #0xF0
03C8 43E807     193            orl ADCCON0, #0x07 ; Select channel 7
03CB            194   
03CB 53E2F0     195            anl ADCCON2, #0xF0
03CE 43E201     196            orl ADCCON2, #0x01 ; Select channel 1
03D1            197   
03D1            198            ; AINDIDS select if some pins are analog inputs or digital I/O:
03D1 75F600     199            mov AINDIDS, #0x00 ; Disable all analog inputs
03D4 43F680     200            orl AINDIDS, #0b10000000 ; P1.1 is analog input
03D7 43F601     201            orl AINDIDS, #0b00000001 ; P3.0 is analog input
03DA 43E101     202            orl ADCCON1, #0x01 ; Enable ADC
03DD            203            
03DD 22         204            ret
03DE            205   
03DE            206   ; Flash Memory Subroutines
03DE            207   ;******************************************************************************
03DE            208   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
03DE            209   ; Data Flash when user code is executed in APROM.
03DE            210   ; (The base of this code is listed in the N76E003 user manual)
03DE            211   ;******************************************************************************
03DE            212   
03DE            213   Save_Variables:
03DE C2AF       214            CLR EA  ; MUST disable interrupts for this to work!
03E0            215            
03E0 75C7AA     216            MOV TA, #0aah ; CHPCON is TA protected
03E3 75C755     217            MOV TA, #55h
03E6 439F01     218            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
03E9            219            
03E9 75C7AA     220            MOV TA, #0aah ; IAPUEN is TA protected
03EC 75C755     221            MOV TA, #55h
03EF 43A501     222            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
03F2            223            
03F2 75AF22     224            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
03F5 75A73F     225            MOV IAPAH, #3fh ; Address high byte
03F8 75A680     226            MOV IAPAL, #80h ; Address low byte
03FB 75AEFF     227            MOV IAPFD, #0FFh ; Data to load into the address byte
03FE 75C7AA     228            MOV TA, #0aah ; IAPTRG is TA protected
0401 75C755     229            MOV TA, #55h
0404 43A401     230            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0407            231            
0407 75AF21     232            MOV IAPCN, #BYTE_PROGRAM_AP
040A 75A73F     233            MOV IAPAH, #3fh
040D            234            
040D            235            ;Load 3f80h with temp_soak
040D 75A680     236            MOV IAPAL, #80h
0410 8543AE     237            MOV IAPFD, temp_soak
0413 75C7AA     238            MOV TA, #0aah
0416 75C755     239            MOV TA, #55h
0419 43A401     240            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
041C            241            
041C            242            ;Load 3f81h with Time_soak
041C 75A681     243            MOV IAPAL, #81h
041F 8544AE     244            MOV IAPFD, Time_soak
0422 75C7AA     245            MOV TA, #0aah
0425 75C755     246            MOV TA, #55h
0428 43A401     247            ORL IAPTRG,#00000001b
042B            248            
042B            249            ;Load 3f82h with Temp_refl
042B 75A682     250            MOV IAPAL, #82h
042E 8545AE     251            MOV IAPFD, Temp_refl
0431 75C7AA     252            MOV TA, #0aah
0434 75C755     253            MOV TA, #55h
0437 43A401     254            ORL IAPTRG,#00000001b
043A            255            
043A            256            ;Load 3f83h with Time_refl
043A 75A683     257            MOV IAPAL, #83h
043D 8546AE     258            MOV IAPFD, Time_refl
0440 75C7AA     259            MOV TA, #0aah
0443 75C755     260            MOV TA, #55h
0446 43A401     261            ORL IAPTRG,#00000001b
0449            262   
0449            263            ;Load 3f84h with 55h
0449 75A684     264            MOV IAPAL,#84h
044C 75AE55     265            MOV IAPFD, #55h
044F 75C7AA     266            MOV TA, #0aah
0452 75C755     267            MOV TA, #55h
0455 43A401     268            ORL IAPTRG, #00000001b
0458            269   
0458            270            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
0458 75A685     271            MOV IAPAL, #85h
045B 75AEAA     272            MOV IAPFD, #0aah
045E 75C7AA     273            MOV TA, #0aah
0461 75C755     274            MOV TA, #55h
0464 43A401     275            ORL IAPTRG, #00000001b
0467            276   
0467 75C7AA     277            MOV TA, #0aah
046A 75C755     278            MOV TA, #55h
046D 53A5FE     279            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0470 75C7AA     280            MOV TA, #0aah
0473 75C755     281            MOV TA, #55h
0476 539FFE     282            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0479            283            
0479 D2AF       284            setb EA  ; Re-enable interrupts
047B            285   
047B 22         286            ret
047C            287   
047C            288   Load_Variables:
047C 903F84     289            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
047F E4         290            clr a
0480 93         291            movc a, @a+dptr
0481 B4551D     292            cjne a, #0x55, Load_Defaults
0484 A3         293            inc dptr      ; Second key value location.  Must be 0xaa
0485 E4         294            clr a
0486 93         295            movc a, @a+dptr
0487 B4AA17     296            cjne a, #0xaa, Load_Defaults
048A            297            
048A 903F80     298            mov dptr, #0x3f80
048D E4         299            clr a
048E 93         300            movc a, @a+dptr
048F F543       301            mov temp_soak, a
0491            302            
0491 A3         303            inc dptr
0492 E4         304            clr a
0493 93         305            movc a, @a+dptr
0494 F544       306            mov Time_soak, a
0496            307            
0496 A3         308            inc dptr
0497 E4         309            clr a
0498 93         310            movc a, @a+dptr
0499 F545       311            mov Temp_refl, a
049B            312            
049B A3         313            inc dptr
049C E4         314            clr a
049D 93         315            movc a, @a+dptr
049E F546       316            mov Time_refl, a
04A0 22         317            ret
04A1            318   
04A1            319   Load_Defaults:
04A1 754301     320            mov temp_soak, #1
04A4 754402     321            mov Time_soak, #2
04A7 754503     322            mov Temp_refl, #3
04AA 754604     323            mov Time_refl, #4
04AD 22         324            ret
04AE            325   
04AE            326   wait_1ms:
04AE C28C       327            clr     TR0 ; Stop timer 0
04B0 C28D       328            clr     TF0 ; Clear overflow flag
04B2 758CBF     329            mov     TH0, #high(TIMER0_RELOAD_1MS)
04B5 758A28     330            mov     TL0,#low(TIMER0_RELOAD_1MS)
04B8 D28C       331            setb TR0
04BA 308DFD     332            jnb     TF0, $ ; Wait for overflow
04BD 22         333            ret
04BE            334   
04BE            335   ; Wait the number of miliseconds in R2
04BE            336   waitms:
04BE 1204AE     337            lcall wait_1ms
04C1 DAFB       338            djnz R2, waitms
04C3 22         339            ret
04C4            340   
04C4            341   ADC_to_PB:
04C4 53E8F0     342            anl ADCCON0, #0xF0
04C7 43E800     343            orl ADCCON0, #0x00 ; Select AIN0
04CA            344            
04CA C2EF       345            clr ADCF
04CC D2EE       346            setb ADCS   ; ADC start trigger signal
04CE 30EFFD     347       jnb ADCF, $ ; Wait for conversion complete
04D1            348   
04D1 D208       349            setb PB7
04D3 D207       350            setb PB6
04D5 D206       351            setb PB5
04D7 D205       352            setb PB4
04D9 D204       353            setb PB3
04DB D203       354            setb PB2
04DD D202       355            setb PB1
04DF D201       356            setb PB0
04E1            357            
04E1            358            ; Check PB7
04E1            359   ADC_to_PB_L7:
04E1 C3         360            clr c
04E2 E5C3       361            mov a, ADCRH
04E4 94F0       362            subb a, #0xf0
04E6 4003       363            jc ADC_to_PB_L6
04E8 C208       364            clr PB7
04EA 22         365            ret
04EB            366   
04EB            367            ; Check PB6
04EB            368   ADC_to_PB_L6:
04EB C3         369            clr c
04EC E5C3       370            mov a, ADCRH
04EE 94D0       371            subb a, #0xd0
04F0 4003       372            jc ADC_to_PB_L5
04F2 C207       373            clr PB6
04F4 22         374            ret
04F5            375   
04F5            376            ; Check PB5
04F5            377   ADC_to_PB_L5:
04F5 C3         378            clr c
04F6 E5C3       379            mov a, ADCRH
04F8 94B0       380            subb a, #0xb0
04FA 4003       381            jc ADC_to_PB_L4
04FC C206       382            clr PB5
04FE 22         383            ret
04FF            384   
04FF            385            ; Check PB4
04FF            386   ADC_to_PB_L4:
04FF C3         387            clr c
0500 E5C3       388            mov a, ADCRH
0502 9490       389            subb a, #0x90
0504 4003       390            jc ADC_to_PB_L3
0506 C205       391            clr PB4
0508 22         392            ret
0509            393   
0509            394            ; Check PB3
0509            395   ADC_to_PB_L3:
0509 C3         396            clr c
050A E5C3       397            mov a, ADCRH
050C 9470       398            subb a, #0x70
050E 4003       399            jc ADC_to_PB_L2
0510 C204       400            clr PB3
0512 22         401            ret
0513            402   
0513            403            ; Check PB2
0513            404   ADC_to_PB_L2:
0513 C3         405            clr c
0514 E5C3       406            mov a, ADCRH
0516 9450       407            subb a, #0x50
0518 4003       408            jc ADC_to_PB_L1
051A C203       409            clr PB2
051C 22         410            ret
051D            411   
051D            412            ; Check PB1
051D            413   ADC_to_PB_L1:
051D C3         414            clr c
051E E5C3       415            mov a, ADCRH
0520 9430       416            subb a, #0x30
0522 4003       417            jc ADC_to_PB_L0
0524 C202       418            clr PB1
0526 22         419            ret
0527            420   
0527            421            ; Check PB0
0527            422   ADC_to_PB_L0:
0527 C3         423            clr c
0528 E5C3       424            mov a, ADCRH
052A 9410       425            subb a, #0x10
052C 4003       426            jc ADC_to_PB_Done
052E C201       427            clr PB0
0530 22         428            ret
0531            429            
0531            430   ADC_to_PB_Done:
0531            431            ; No puhsbutton pressed         
0531 22         432            ret
0532            433   
0532            434   ; MAIN 
0532            435   main:
0532 75817F     436            mov sp, #0x7f
0535 120385     437       lcall Init_All
0538 120079     438       lcall LCD_4BIT
053B            439       ; initial messages in LCD
053B C0E0       440            push acc
053D 7401       440            mov a, #1
053F 14         440            dec a
0540 1200B9     440            lcall ?Set_Cursor_1 ; Select column and row
0543 D0E0       440            pop acc
0545 C083       441            push dph
0547 C082       441            push dpl
0549 C0E0       441            push acc
054B 900003     441            mov dptr, #temperature_message
054E 1200AC     441            lcall ?Send_Constant_String
0551 D0E0       441            pop acc
0553 D082       441            pop dpl
0555 D083       441            pop dph
0557            442   
0557 754A00     443            mov FSM1_state, #0
055A 754332     444       mov Temp_soak, #50
055D 75443C     445            mov Time_soak, #60
0560 7545C8     446            mov Temp_refl, #200
0563 75462D     447            mov Time_refl, #45
0566 754700     448            mov sec, #0
0569            449   
0569            450   Forever:
0569 200703     451            jb PB6, increase
056C            452   decrease:
056C 020572     453            ljmp continue1
056F            454   increase:
056F 020572     455            ljmp continue1
0572            456   
0572            457   continue1:
0572 20010F     458            jb PB0, continue
0575            459   
0575            460   turn_on:
0575 E54A       461            mov a, FSM1_state
0577 B40005     462            cjne a, #0, turn_off
057A 754A01     463            mov FSM1_state, #1
057D 8005       464            sjmp continue
057F            465   
057F            466   turn_off:
057F 754A00     467            mov FSM1_state, #0
0582 8000       468            sjmp continue
0584            469   
0584            470   continue:
0584 1204C4     471            lcall ADC_to_PB
0587            472            ;lcall Display_PushButtons_ADC
0587            473            
0587 75E807     474            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
058A C2EF       475            clr ADCF
058C D2EE       476            setb ADCS ;  ADC start trigger signal
058E 30EFFD     477       jnb ADCF, $ ; Wait for conversion complete
0591            478       
0591            479       ; Read the ADC result and store in [R1, R0]
0591 E5C3       480       mov a, ADCRH   
0593 C4         481       swap a
0594 C0E0       482       push acc
0596 540F       483       anl a, #0x0f
0598 F9         484       mov R1, a
0599 D0E0       485       pop acc
059B 54F0       486       anl a, #0xf0
059D 45C2       487       orl a, ADCRL
059F F8         488       mov R0, A
05A0            489       
05A0 75E801     490       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
05A3 C2EF       491            clr ADCF
05A5 D2EE       492            setb ADCS ;  ADC start trigger signal
05A7 30EFFD     493       jnb ADCF, $ ; Wait for conversion complete
05AA            494       
05AA            495       ; Read the ADC result and store in [R4, R3]
05AA E5C3       496       mov a, ADCRH   
05AC C4         497       swap a
05AD C0E0       498       push acc
05AF 540F       499       anl a, #0x0f
05B1 FC         500       mov R4, a
05B2 D0E0       501       pop acc
05B4 54F0       502       anl a, #0xf0
05B6 45C2       503       orl a, ADCRL
05B8 FB         504       mov R3, A
05B9            505       
05B9            506            ; Convert to LM335 temperature to voltage
05B9 8B30       507            mov x+0, R3
05BB 8C31       508            mov x+1, R4
05BD 753200     509            mov x+2, #0
05C0 753300     510            mov x+3, #0
05C3 75347C     511            mov y+0, #low (50300 % 0x10000) 
05C6 7535C4     511            mov y+1, #high(50300 % 0x10000) 
05C9 753600     511            mov y+2, #low (50300 / 0x10000) 
05CC 753700     511            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
05CF 12024E     512            lcall mul32
05D2 7534FF     513            mov y+0, #low (4095 % 0x10000) 
05D5 75350F     513            mov y+1, #high(4095 % 0x10000) 
05D8 753600     513            mov y+2, #low (4095 / 0x10000) 
05DB 753700     513            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
05DE 1202DB     514            lcall div32
05E1 7534D0     515            mov y+0, #low (27600 % 0x10000) 
05E4 75356B     515            mov y+1, #high(27600 % 0x10000) 
05E7 753600     515            mov y+2, #low (27600 / 0x10000) 
05EA 753700     515            mov y+3, #high(27600 / 0x10000) 
05ED 1201BA     516            lcall sub32
05F0 753464     517            mov y+0, #low (100 % 0x10000) 
05F3 753500     517            mov y+1, #high(100 % 0x10000) 
05F6 753600     517            mov y+2, #low (100 / 0x10000) 
05F9 753700     517            mov y+3, #high(100 / 0x10000) 
05FC 12024E     518            lcall mul32
05FF            519            
05FF            520            ; Convert to BCD and display
05FF 1200D4     521            lcall hex2bcd
0602 C0E0       522            push acc
0604 740C       522            mov a, #12
0606 14         522            dec a
0607 1200B9     522            lcall ?Set_Cursor_1 ; Select column and row
060A D0E0       522            pop acc
060C 120369     523            lcall Display_formated_BCD_Tj
060F            524   
060F            525            ; Convert value back to hex to use for calculations
060F 12015D     526            lcall bcd2hex
0612            527   
0612            528            ; Storing the ambient temperature
0612 853038     529            mov amb_temp+0, x+0
0615 853139     530            mov amb_temp+1, x+1
0618 85323A     531            mov amb_temp+2, x+2
061B 85333B     532            mov amb_temp+3, x+3
061E            533   
061E            534            ; Convert to thermocouple voltage to temperature
061E 8830       535            mov x+0, R0
0620 8931       536            mov x+1, R1
0622 753200     537            mov x+2, #0
0625 753300     538            mov x+3, #0
0628 75347C     539            mov y+0, #low (50300 % 0x10000) 
062B 7535C4     539            mov y+1, #high(50300 % 0x10000) 
062E 753600     539            mov y+2, #low (50300 / 0x10000) 
0631 753700     539            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0634 12024E     540            lcall mul32
0637 7534FF     541            mov y+0, #low (4095 % 0x10000) 
063A 75350F     541            mov y+1, #high(4095 % 0x10000) 
063D 753600     541            mov y+2, #low (4095 / 0x10000) 
0640 753700     541            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0643 1202DB     542            lcall div32
0646 753464     543            mov y+0, #low (100 % 0x10000) 
0649 753500     543            mov y+1, #high(100 % 0x10000) 
064C 753600     543            mov y+2, #low (100 / 0x10000) 
064F 753700     543            mov y+3, #high(100 / 0x10000) 
0652 1202DB     544            lcall div32
0655 753445     545            mov y+0, #low (5189 % 0x10000) 
0658 753514     545            mov y+1, #high(5189 % 0x10000) 
065B 753600     545            mov y+2, #low (5189 / 0x10000) 
065E 753700     545            mov y+3, #high(5189 / 0x10000) 
0661 12024E     546            lcall mul32
0664            547   
0664            548            ; Adding the ambient temperature to oven temperature
0664 853834     549            mov y+0, amb_temp+0
0667 853935     550            mov y+1, amb_temp+1
066A 853A36     551            mov y+2, amb_temp+2
066D 853B37     552            mov y+3, amb_temp+3
0670 120199     553            lcall add32
0673            554            
0673            555            ; Convert to BCD and display
0673 1200D4     556            lcall hex2bcd
0676 C0E0       557            push acc
0678 7403       557            mov a, #3
067A 14         557            dec a
067B 1200B9     557            lcall ?Set_Cursor_1 ; Select column and row
067E D0E0       557            pop acc
0680 120344     558            lcall Display_formated_BCD_To
0683            559   
0683            560            ; Storing the thermocouple temperature into var temp 
0683 753410     561            mov y+0, #low (10000 % 0x10000) 
0686 753527     561            mov y+1, #high(10000 % 0x10000) 
0689 753600     561            mov y+2, #low (10000 / 0x10000) 
068C 753700     561            mov y+3, #high(10000 / 0x10000) 
068F 1202DB     562            lcall div32
0692 853048     563            mov temp+0, x+0
0695 853149     564            mov temp+1, x+1
0698            565            
0698            566            ; Wait 100 ms between readings
0698 7A64       567            mov R2, #100
069A 1204BE     568            lcall waitms
069D            569            
069D            570   ; STATE MACHINE  
069D            571   FSM1:
069D E54A       572            mov a, FSM1_state
069F            573   
069F            574   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
069F            575   FSM1_state0:
069F B40022     576            cjne a, #0, FSM1_state1
06A2 C0E0       577            push acc
06A4 7410       577            mov a, #16
06A6 14         577            dec a
06A7 1200B7     577            lcall ?Set_Cursor_2 ; Select column and row
06AA D0E0       577            pop acc
06AC C083       578            push dph
06AE C082       578            push dpl
06B0 C0E0       578            push acc
06B2 900014     578            mov dptr, #state0
06B5 1200AC     578            lcall ?Send_Constant_String
06B8 D0E0       578            pop acc
06BA D082       578            pop dpl
06BC D083       578            pop dph
06BE 754100     579            mov pwm, #0
06C1            580            ;jb PB0, FSM1_state0_done
06C1            581            ;mov FSM1_state, #1
06C1            582   FSM1_state0_done:
06C1 020569     583            ljmp Forever
06C4            584   
06C4            585   ; pre-heat state. Should go to state two when temp reaches temp_soak     
06C4            586   FSM1_state1:
06C4 B40134     587            cjne a, #1, FSM1_state2
06C7 C0E0       588            push acc
06C9 7410       588            mov a, #16
06CB 14         588            dec a
06CC 1200B7     588            lcall ?Set_Cursor_2 ; Select column and row
06CF D0E0       588            pop acc
06D1 C083       589            push dph
06D3 C082       589            push dpl
06D5 C0E0       589            push acc
06D7 900016     589            mov dptr, #state1
06DA 1200AC     589            lcall ?Send_Constant_String
06DD D0E0       589            pop acc
06DF D082       589            pop dpl
06E1 D083       589            pop dph
06E3            590            
06E3 C296       591            clr P1.6
06E5            592            
06E5 754164     593            mov pwm, #100
06E8 754700     594            mov sec, #0
06EB            595            
06EB            596            ; These two lines are temporary. temp should be read from the thermocouple wire
06EB 754364     597            mov temp_soak, #100
06EE            598            
06EE E543       599            mov a, temp_soak
06F0 D3         600            setb c
06F1 9548       601            subb a, temp
06F3 5003       602            jnc FSM1_state1_done
06F5 754A02     603            mov FSM1_state, #2
06F8            604   FSM1_state1_done:
06F8 020569     605            ljmp Forever
06FB            606   
06FB            607   ; State 2
06FB            608   FSM1_state2:
06FB D296       609            setb P1.6 ;speaker
06FD B4023A     610            cjne a, #2, FSM1_state3
0700 C0E0       611            push acc
0702 7410       611            mov a, #16
0704 14         611            dec a
0705 1200B7     611            lcall ?Set_Cursor_2 ; Select column and row
0708 D0E0       611            pop acc
070A C083       612            push dph
070C C082       612            push dpl
070E C0E0       612            push acc
0710 900018     612            mov dptr, #state2
0713 1200AC     612            lcall ?Send_Constant_String
0716 D0E0       612            pop acc
0718 D082       612            pop dpl
071A D083       612            pop dph
071C 754114     613            mov pwm, #20
071F            614            
071F E547       615            mov a, sec
0721 2401       616            add a, #1
0723 F547       617            mov sec, a
0725            618   
0725 7A32       619            mov R2, #50
0727 1204BE     620            lcall waitms
072A            621   
072A E544       622            mov a, Time_soak
072C C3         623            clr c
072D 9547       624            subb a, sec
072F 5003       625            jnc FSM1_state2_done
0731 754A03     626            mov FSM1_state, #3
0734            627   FSM1_state2_done:
0734 020569     628            ljmp Forever
0737            629   
0737            630   ;DELETE
0737            631   jump:
0737 02069F     632   ljmp FSM1_state0         
073A            633   
073A            634   ;State 3
073A            635   FSM1_state3:
073A B4032F     636            cjne a, #3, FSM1_state4
073D C0E0       637            push acc
073F 7410       637            mov a, #16
0741 14         637            dec a
0742 1200B7     637            lcall ?Set_Cursor_2 ; Select column and row
0745 D0E0       637            pop acc
0747 C083       638            push dph
0749 C082       638            push dpl
074B C0E0       638            push acc
074D 90001A     638            mov dptr, #state3
0750 1200AC     638            lcall ?Send_Constant_String
0753 D0E0       638            pop acc
0755 D082       638            pop dpl
0757 D083       638            pop dph
0759 754164     639            mov pwm, #100
075C 754700     640            mov sec, #0
075F            641            
075F            642            
075F E545       643            mov a, Temp_refl
0761 C3         644            clr c
0762 9548       645            subb a, temp
0764 5003       646            jnc FSM1_state3_done
0766 754A04     647            mov FSM1_state, #4
0769            648   FSM1_state3_done:
0769 020569     649            ljmp Forever
076C            650   
076C            651   
076C            652   ;State 4
076C            653   FSM1_state4:
076C B40437     654            cjne a, #4, FSM1_state5
076F C0E0       655            push acc
0771 7410       655            mov a, #16
0773 14         655            dec a
0774 1200B7     655            lcall ?Set_Cursor_2 ; Select column and row
0777 D0E0       655            pop acc
0779 C083       656            push dph
077B C082       656            push dpl
077D C0E0       656            push acc
077F 90001C     656            mov dptr, #state4
0782 1200AC     656            lcall ?Send_Constant_String
0785 D0E0       656            pop acc
0787 D082       656            pop dpl
0789 D083       656            pop dph
078B 754114     657            mov pwm, #20
078E            658            
078E E547       659            mov a, sec
0790 2401       660            add a, #1
0792 F547       661            mov sec, a
0794            662   
0794 7A32       663            mov R2, #50
0796 1204BE     664            lcall waitms
0799            665            
0799 E546       666            mov a, Time_refl
079B C3         667            clr c
079C 9547       668            subb a,sec
079E 5003       669            jnc FSM1_state4_done
07A0 754A05     670            mov FSM1_state, #5
07A3            671   FSM1_state4_done:
07A3 020569     672            ljmp Forever
07A6            673            
07A6            674   FSM1_state5:
07A6 B4058E     675            cjne a, #5, jump
07A9 C0E0       676            push acc
07AB 7410       676            mov a, #16
07AD 14         676            dec a
07AE 1200B7     676            lcall ?Set_Cursor_2 ; Select column and row
07B1 D0E0       676            pop acc
07B3 C083       677            push dph
07B5 C082       677            push dpl
07B7 C0E0       677            push acc
07B9 90001E     677            mov dptr, #state5
07BC 1200AC     677            lcall ?Send_Constant_String
07BF D0E0       677            pop acc
07C1 D082       677            pop dpl
07C3 D083       677            pop dph
07C5 754100     678            mov pwm, #0
07C8            679            
07C8            680            
07C8 743C       681            mov a, #60
07CA C3         682            clr c
07CB 9548       683            subb a, temp
07CD 4003       684            jc FSM1_state5_done
07CF 754A00     685            mov FSM1_state,#0
07D2            686   FSM1_state5_done:
07D2 1203DE     687            lcall Save_Variables ; Save variables in flash memory
07D5 020569     688            ljmp Forever
07D8            689            
07D8            690   
07D8            691   
07D8            692   ;Any additions to be checked
07D8            693   EN
