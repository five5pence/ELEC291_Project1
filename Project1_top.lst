                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 02055C      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014             45   
0014 53746174    46   state0:     db 'State 0', 0
     65203000
001C 53746174    47   state1:     db 'State 1', 0
     65203100
0024 53746174    48   state2:     db 'State 2', 0
     65203200
002C 53746174    49   state3:     db 'State 3', 0
     65203300
0034 53746174    50   state4:     db 'State 4', 0
     65203400
003C 53746174    51   state5:     db 'State 5', 0
     65203500
0044             52   
0044 6F6E00      53   start:     db 'on', 0
0047 6F6600      54   stop:       db 'of', 0
004A             55   
004A             56   cseg
004A             57   
004A             58   ; SYMBOLIC CONSTANTS
004A             59   
004A             60   ; INPUTS
004A             61   tempsensor_in equ P3.0
004A             62   thermocouple_in equ P1.1
004A             63   
004A             64   ; OUTPUTS
004A             65   oven_out equ P1.2
004A             66   speaker_out equ P1.6
004A             67   
004A             68   CSEG
004A             69   ; LCD
004A             70   LCD_RS equ P1.3
004A             71   LCD_E equ P1.4
004A             72   LCD_D4 equ P0.0
004A             73   LCD_D5 equ P0.1
004A             74   LCD_D6 equ P0.2
004A             75   LCD_D7 equ P0.3
004A             76   
                 78   	$LIST
00FE             80   
00FE             81   ; Flash instructions
00FE             82   PAGE_ERASE_AP   EQU 00100010b
00FE             83   BYTE_PROGRAM_AP EQU 00100001b
00FE             84   
00FE             85   ; These register definitions needed by 'math32.inc'
0030             86   DSEG at 30H
0030             87   x:   ds 4
0034             88   y:   ds 4
0038             89   amb_temp: ds 4 ; ambient temperature read by LM335
003C             90   bcd: ds 5
0041             91   
0041             92   DSEG
0041             93   pwm: ds 1
0042             94   state: ds 1
0043             95   temp_soak: ds 1
0044             96   Time_soak: ds 1
0045             97   Temp_refl: ds 1
0046             98   Time_refl: ds 1
0047             99   
0047            100   sec: ds 1
0048            101   temp: ds 2
004A            102   
004A            103   
004A            104   FSM1_state: ds 1
004B            105   
0000            106   BSEG
0000            107   mf: dbit 1
0001            108   
0001            109   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0001            110   PB0: dbit 1
0002            111   PB1: dbit 1
0003            112   PB2: dbit 1
0004            113   PB3: dbit 1
0005            114   PB4: dbit 1
0006            115   PB5: dbit 1
0007            116   PB6: dbit 1
0008            117   PB7: dbit 1
0009            118   
0009            119   start_stop_flag: dbit 1 ;
000A            120   
000A            121   ; MATH32
                546   $LIST
                123   $LIST
036E            125   
036E            126   ; Blank Macro
                127   Left_blank mac
                128   	mov a, %0
                129   	anl a, #0xf0
                130   	swap a
                131   	jz Left_blank_%M_a
                132   	ljmp %1
                133   Left_blank_%M_a:
                134   	Display_char(#' ')
                135   	mov a, %0
                136   	anl a, #0x0f
                137   	jz Left_blank_%M_b
                138   	ljmp %1
                139   Left_blank_%M_b:
                140   	Display_char(#' ')
                141   endmac
036E            142   
036E            143   ; Formatting to display thermocouple temperature
036E            144   ; Display: 0000.00
036E            145   Display_formated_BCD_To:
036E C000       146            push ar0
0370 A83F       146            mov r0, bcd+3
0372 1200E8     146            lcall ?Display_BCD
0375 D000       146            pop ar0
0377 C000       147            push ar0
0379 A83E       147            mov r0, bcd+2
037B 1200E8     147            lcall ?Display_BCD
037E D000       147            pop ar0
0380 C0E0       148            push acc
0382 742E       148            mov a, #'.'
0384 120099     148            lcall ?WriteData
0387 D0E0       148            pop acc
0389 C000       149            push ar0
038B A83D       149            mov r0, bcd+1
038D 1200E8     149            lcall ?Display_BCD
0390 D000       149            pop ar0
0392            150   
0392            151   
0392 22         152            ret
0393            153            
0393            154   ; Formatting to display ambient temperature
0393            155   ; Display: 00.00
0393            156   Display_formated_BCD_Tj:
0393 C000       157            push ar0
0395 A83E       157            mov r0, bcd+2
0397 1200E8     157            lcall ?Display_BCD
039A D000       157            pop ar0
039C C0E0       158            push acc
039E 742E       158            mov a, #'.'
03A0 120099     158            lcall ?WriteData
03A3 D0E0       158            pop acc
03A5 C000       159            push ar0
03A7 A83D       159            mov r0, bcd+1
03A9 1200E8     159            lcall ?Display_BCD
03AC D000       159            pop ar0
03AE 22         160            ret
03AF            161   
03AF            162   
03AF            163   ; INITIALIZATION SUBROUTINES
03AF            164   Init_All:
03AF            165            ; Configure all the pins for biderectional I/O
03AF 75AC00     166            mov     P3M1, #0x00
03B2 75AD00     167            mov     P3M2, #0x00
03B5 75B300     168            mov     P1M1, #0x00
03B8 75B400     169            mov     P1M2, #0x00
03BB 75B100     170            mov     P0M1, #0x00
03BE 75B200     171            mov     P0M2, #0x00
03C1            172   
03C1 438E10     173            orl     CKCON, #0x10 ; CLK is the input for timer 1
03C4 438780     174            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03C7 759852     175            mov     SCON, #0x52
03CA 53C4DF     176            anl     T3CON, #0b11011111
03CD 53890F     177            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03D0 438920     178            orl     TMOD, #0x20 ; Timer 1 Mode 2
03D3 758DF7     179            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03D6 D28E       180            setb TR1
03D8            181            
03D8            182            ; Using timer 0 for delay functions.  Initialize here:
03D8 C28C       183            clr     TR0 ; Stop timer 0
03DA 438E08     184            orl     CKCON,#0x08 ; CLK is the input for timer 0
03DD 5389F0     185            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03E0 438901     186            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03E3            187            
03E3            188            ; Initialize the pin used by the ADC (P1.1) as input.
03E3 43B302     189            orl     P1M1, #0b00000010
03E6 53B4FD     190            anl     P1M2, #0b11111101
03E9            191   
03E9            192            ; Initialize the pin used by the ADC (P3.0) as input.
03E9 43AC01     193            orl     P3M1, #0b00000001
03EC 53ADFE     194            anl     P3M2, #0b11111110
03EF            195            
03EF            196            ; Initialize and start the ADC:
03EF 53E8F0     197            anl ADCCON0, #0xF0
03F2 43E807     198            orl ADCCON0, #0x07 ; Select channel 7
03F5            199   
03F5 53E2F0     200            anl ADCCON2, #0xF0
03F8 43E201     201            orl ADCCON2, #0x01 ; Select channel 1
03FB            202   
03FB            203            ; AINDIDS select if some pins are analog inputs or digital I/O:
03FB 75F600     204            mov AINDIDS, #0x00 ; Disable all analog inputs
03FE 43F680     205            orl AINDIDS, #0b10000000 ; P1.1 is analog input
0401 43F601     206            orl AINDIDS, #0b00000001 ; P3.0 is analog input
0404 43E101     207            orl ADCCON1, #0x01 ; Enable ADC
0407            208            
0407 22         209            ret
0408            210   
0408            211   ; Flash Memory Subroutines
0408            212   ;******************************************************************************
0408            213   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0408            214   ; Data Flash when user code is executed in APROM.
0408            215   ; (The base of this code is listed in the N76E003 user manual)
0408            216   ;******************************************************************************
0408            217   
0408            218   Save_Variables:
0408 C2AF       219            CLR EA  ; MUST disable interrupts for this to work!
040A            220            
040A 75C7AA     221            MOV TA, #0aah ; CHPCON is TA protected
040D 75C755     222            MOV TA, #55h
0410 439F01     223            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
0413            224            
0413 75C7AA     225            MOV TA, #0aah ; IAPUEN is TA protected
0416 75C755     226            MOV TA, #55h
0419 43A501     227            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
041C            228            
041C 75AF22     229            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
041F 75A73F     230            MOV IAPAH, #3fh ; Address high byte
0422 75A680     231            MOV IAPAL, #80h ; Address low byte
0425 75AEFF     232            MOV IAPFD, #0FFh ; Data to load into the address byte
0428 75C7AA     233            MOV TA, #0aah ; IAPTRG is TA protected
042B 75C755     234            MOV TA, #55h
042E 43A401     235            ORL IAPTRG, #00000001b ; write �1� to IAPGO to trigger IAP process
0431            236            
0431 75AF21     237            MOV IAPCN, #BYTE_PROGRAM_AP
0434 75A73F     238            MOV IAPAH, #3fh
0437            239            
0437            240            ;Load 3f80h with temp_soak
0437 75A680     241            MOV IAPAL, #80h
043A 8543AE     242            MOV IAPFD, temp_soak
043D 75C7AA     243            MOV TA, #0aah
0440 75C755     244            MOV TA, #55h
0443 43A401     245            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
0446            246            
0446            247            ;Load 3f81h with Time_soak
0446 75A681     248            MOV IAPAL, #81h
0449 8544AE     249            MOV IAPFD, Time_soak
044C 75C7AA     250            MOV TA, #0aah
044F 75C755     251            MOV TA, #55h
0452 43A401     252            ORL IAPTRG,#00000001b
0455            253            
0455            254            ;Load 3f82h with Temp_refl
0455 75A682     255            MOV IAPAL, #82h
0458 8545AE     256            MOV IAPFD, Temp_refl
045B 75C7AA     257            MOV TA, #0aah
045E 75C755     258            MOV TA, #55h
0461 43A401     259            ORL IAPTRG,#00000001b
0464            260            
0464            261            ;Load 3f83h with Time_refl
0464 75A683     262            MOV IAPAL, #83h
0467 8546AE     263            MOV IAPFD, Time_refl
046A 75C7AA     264            MOV TA, #0aah
046D 75C755     265            MOV TA, #55h
0470 43A401     266            ORL IAPTRG,#00000001b
0473            267   
0473            268            ;Load 3f84h with 55h
0473 75A684     269            MOV IAPAL,#84h
0476 75AE55     270            MOV IAPFD, #55h
0479 75C7AA     271            MOV TA, #0aah
047C 75C755     272            MOV TA, #55h
047F 43A401     273            ORL IAPTRG, #00000001b
0482            274   
0482            275            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
0482 75A685     276            MOV IAPAL, #85h
0485 75AEAA     277            MOV IAPFD, #0aah
0488 75C7AA     278            MOV TA, #0aah
048B 75C755     279            MOV TA, #55h
048E 43A401     280            ORL IAPTRG, #00000001b
0491            281   
0491 75C7AA     282            MOV TA, #0aah
0494 75C755     283            MOV TA, #55h
0497 53A5FE     284            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
049A 75C7AA     285            MOV TA, #0aah
049D 75C755     286            MOV TA, #55h
04A0 539FFE     287            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
04A3            288            
04A3 D2AF       289            setb EA  ; Re-enable interrupts
04A5            290   
04A5 22         291            ret
04A6            292   
04A6            293   Load_Variables:
04A6 903F84     294            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
04A9 E4         295            clr a
04AA 93         296            movc a, @a+dptr
04AB B4551D     297            cjne a, #0x55, Load_Defaults
04AE A3         298            inc dptr      ; Second key value location.  Must be 0xaa
04AF E4         299            clr a
04B0 93         300            movc a, @a+dptr
04B1 B4AA17     301            cjne a, #0xaa, Load_Defaults
04B4            302            
04B4 903F80     303            mov dptr, #0x3f80
04B7 E4         304            clr a
04B8 93         305            movc a, @a+dptr
04B9 F543       306            mov temp_soak, a
04BB            307            
04BB A3         308            inc dptr
04BC E4         309            clr a
04BD 93         310            movc a, @a+dptr
04BE F544       311            mov Time_soak, a
04C0            312            
04C0 A3         313            inc dptr
04C1 E4         314            clr a
04C2 93         315            movc a, @a+dptr
04C3 F545       316            mov Temp_refl, a
04C5            317            
04C5 A3         318            inc dptr
04C6 E4         319            clr a
04C7 93         320            movc a, @a+dptr
04C8 F546       321            mov Time_refl, a
04CA 22         322            ret
04CB            323   
04CB            324   Load_Defaults:
04CB 754301     325            mov temp_soak, #1
04CE 754402     326            mov Time_soak, #2
04D1 754503     327            mov Temp_refl, #3
04D4 754604     328            mov Time_refl, #4
04D7 22         329            ret
04D8            330   
04D8            331   wait_1ms:
04D8 C28C       332            clr     TR0 ; Stop timer 0
04DA C28D       333            clr     TF0 ; Clear overflow flag
04DC 758CBF     334            mov     TH0, #high(TIMER0_RELOAD_1MS)
04DF 758A28     335            mov     TL0,#low(TIMER0_RELOAD_1MS)
04E2 D28C       336            setb TR0
04E4 308DFD     337            jnb     TF0, $ ; Wait for overflow
04E7 22         338            ret
04E8            339   
04E8            340   ; Wait the number of miliseconds in R2
04E8            341   waitms:
04E8 1204D8     342            lcall wait_1ms
04EB DAFB       343            djnz R2, waitms
04ED 22         344            ret
04EE            345   
04EE            346   ADC_to_PB:
04EE 53E8F0     347            anl ADCCON0, #0xF0
04F1 43E800     348            orl ADCCON0, #0x00 ; Select AIN0
04F4            349            
04F4 C2EF       350            clr ADCF
04F6 D2EE       351            setb ADCS   ; ADC start trigger signal
04F8 30EFFD     352       jnb ADCF, $ ; Wait for conversion complete
04FB            353   
04FB D208       354            setb PB7
04FD D207       355            setb PB6
04FF D206       356            setb PB5
0501 D205       357            setb PB4
0503 D204       358            setb PB3
0505 D203       359            setb PB2
0507 D202       360            setb PB1
0509 D201       361            setb PB0
050B            362            
050B            363            ; Check PB7
050B            364   ADC_to_PB_L7:
050B C3         365            clr c
050C E5C3       366            mov a, ADCRH
050E 94F0       367            subb a, #0xf0
0510 4003       368            jc ADC_to_PB_L6
0512 C208       369            clr PB7
0514 22         370            ret
0515            371   
0515            372            ; Check PB6
0515            373   ADC_to_PB_L6:
0515 C3         374            clr c
0516 E5C3       375            mov a, ADCRH
0518 94D0       376            subb a, #0xd0
051A 4003       377            jc ADC_to_PB_L5
051C C207       378            clr PB6
051E 22         379            ret
051F            380   
051F            381            ; Check PB5
051F            382   ADC_to_PB_L5:
051F C3         383            clr c
0520 E5C3       384            mov a, ADCRH
0522 94B0       385            subb a, #0xb0
0524 4003       386            jc ADC_to_PB_L4
0526 C206       387            clr PB5
0528 22         388            ret
0529            389   
0529            390            ; Check PB4
0529            391   ADC_to_PB_L4:
0529 C3         392            clr c
052A E5C3       393            mov a, ADCRH
052C 9490       394            subb a, #0x90
052E 4003       395            jc ADC_to_PB_L3
0530 C205       396            clr PB4
0532 22         397            ret
0533            398   
0533            399            ; Check PB3
0533            400   ADC_to_PB_L3:
0533 C3         401            clr c
0534 E5C3       402            mov a, ADCRH
0536 9470       403            subb a, #0x70
0538 4003       404            jc ADC_to_PB_L2
053A C204       405            clr PB3
053C 22         406            ret
053D            407   
053D            408            ; Check PB2
053D            409   ADC_to_PB_L2:
053D C3         410            clr c
053E E5C3       411            mov a, ADCRH
0540 9450       412            subb a, #0x50
0542 4003       413            jc ADC_to_PB_L1
0544 C203       414            clr PB2
0546 22         415            ret
0547            416   
0547            417            ; Check PB1
0547            418   ADC_to_PB_L1:
0547 C3         419            clr c
0548 E5C3       420            mov a, ADCRH
054A 9430       421            subb a, #0x30
054C 4003       422            jc ADC_to_PB_L0
054E C202       423            clr PB1
0550 22         424            ret
0551            425   
0551            426            ; Check PB0
0551            427   ADC_to_PB_L0:
0551 C3         428            clr c
0552 E5C3       429            mov a, ADCRH
0554 9410       430            subb a, #0x10
0556 4003       431            jc ADC_to_PB_Done
0558 C201       432            clr PB0
055A 22         433            ret
055B            434            
055B            435   ADC_to_PB_Done:
055B            436            ; No puhsbutton pressed         
055B 22         437            ret
055C            438   
055C            439   ; MAIN 
055C            440   main:
055C 75817F     441            mov sp, #0x7f
055F 1203AF     442       lcall Init_All
0562 1200A3     443       lcall LCD_4BIT
0565            444       ; initial messages in LCD
0565 C0E0       445            push acc
0567 7401       445            mov a, #1
0569 14         445            dec a
056A 1200E3     445            lcall ?Set_Cursor_1 ; Select column and row
056D D0E0       445            pop acc
056F C083       446            push dph
0571 C082       446            push dpl
0573 C0E0       446            push acc
0575 900003     446            mov dptr, #temperature_message
0578 1200D6     446            lcall ?Send_Constant_String
057B D0E0       446            pop acc
057D D082       446            pop dpl
057F D083       446            pop dph
0581            447   
0581 754A00     448            mov FSM1_state, #0
0584 754332     449       mov Temp_soak, #50
0587 75443C     450            mov Time_soak, #60
058A 7545C8     451            mov Temp_refl, #200
058D 75462D     452            mov Time_refl, #45
0590 754700     453            mov sec, #0
0593            454   
0593            455   Forever:
0593 1204EE     456            lcall ADC_to_PB
0596            457            ;lcall Display_PushButtons_ADC
0596            458            
0596 75E807     459            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
0599 C2EF       460            clr ADCF
059B D2EE       461            setb ADCS ;  ADC start trigger signal
059D 30EFFD     462       jnb ADCF, $ ; Wait for conversion complete
05A0            463       
05A0            464       ; Read the ADC result and store in [R1, R0]
05A0 E5C3       465       mov a, ADCRH   
05A2 C4         466       swap a
05A3 C0E0       467       push acc
05A5 540F       468       anl a, #0x0f
05A7 F9         469       mov R1, a
05A8 D0E0       470       pop acc
05AA 54F0       471       anl a, #0xf0
05AC 45C2       472       orl a, ADCRL
05AE F8         473       mov R0, A
05AF            474       
05AF 75E801     475       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
05B2 C2EF       476            clr ADCF
05B4 D2EE       477            setb ADCS ;  ADC start trigger signal
05B6 30EFFD     478       jnb ADCF, $ ; Wait for conversion complete
05B9            479       
05B9            480       ; Read the ADC result and store in [R4, R3]
05B9 E5C3       481       mov a, ADCRH   
05BB C4         482       swap a
05BC C0E0       483       push acc
05BE 540F       484       anl a, #0x0f
05C0 FC         485       mov R4, a
05C1 D0E0       486       pop acc
05C3 54F0       487       anl a, #0xf0
05C5 45C2       488       orl a, ADCRL
05C7 FB         489       mov R3, A
05C8            490       
05C8            491            ; Convert to LM335 temperature to voltage
05C8 8B30       492            mov x+0, R3
05CA 8C31       493            mov x+1, R4
05CC 753200     494            mov x+2, #0
05CF 753300     495            mov x+3, #0
05D2 75347C     496            mov y+0, #low (50300 % 0x10000) 
05D5 7535C4     496            mov y+1, #high(50300 % 0x10000) 
05D8 753600     496            mov y+2, #low (50300 / 0x10000) 
05DB 753700     496            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
05DE 120278     497            lcall mul32
05E1 7534FF     498            mov y+0, #low (4095 % 0x10000) 
05E4 75350F     498            mov y+1, #high(4095 % 0x10000) 
05E7 753600     498            mov y+2, #low (4095 / 0x10000) 
05EA 753700     498            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
05ED 120305     499            lcall div32
05F0 7534D0     500            mov y+0, #low (27600 % 0x10000) 
05F3 75356B     500            mov y+1, #high(27600 % 0x10000) 
05F6 753600     500            mov y+2, #low (27600 / 0x10000) 
05F9 753700     500            mov y+3, #high(27600 / 0x10000) 
05FC 1201E4     501            lcall sub32
05FF 753464     502            mov y+0, #low (100 % 0x10000) 
0602 753500     502            mov y+1, #high(100 % 0x10000) 
0605 753600     502            mov y+2, #low (100 / 0x10000) 
0608 753700     502            mov y+3, #high(100 / 0x10000) 
060B 120278     503            lcall mul32
060E            504            
060E            505            ; Convert to BCD and display
060E 1200FE     506            lcall hex2bcd
0611 C0E0       507            push acc
0613 740C       507            mov a, #12
0615 14         507            dec a
0616 1200E3     507            lcall ?Set_Cursor_1 ; Select column and row
0619 D0E0       507            pop acc
061B 120393     508            lcall Display_formated_BCD_Tj
061E            509   
061E            510            ; Convert value back to hex to use for calculations
061E 120187     511            lcall bcd2hex
0621            512   
0621            513            ; Storing the ambient temperature
0621 853038     514            mov amb_temp+0, x+0
0624 853139     515            mov amb_temp+1, x+1
0627 85323A     516            mov amb_temp+2, x+2
062A 85333B     517            mov amb_temp+3, x+3
062D            518   
062D            519            ; Convert to thermocouple voltage to temperature
062D 8830       520            mov x+0, R0
062F 8931       521            mov x+1, R1
0631 753200     522            mov x+2, #0
0634 753300     523            mov x+3, #0
0637 75347C     524            mov y+0, #low (50300 % 0x10000) 
063A 7535C4     524            mov y+1, #high(50300 % 0x10000) 
063D 753600     524            mov y+2, #low (50300 / 0x10000) 
0640 753700     524            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0643 120278     525            lcall mul32
0646 7534FF     526            mov y+0, #low (4095 % 0x10000) 
0649 75350F     526            mov y+1, #high(4095 % 0x10000) 
064C 753600     526            mov y+2, #low (4095 / 0x10000) 
064F 753700     526            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0652 120305     527            lcall div32
0655 753464     528            mov y+0, #low (100 % 0x10000) 
0658 753500     528            mov y+1, #high(100 % 0x10000) 
065B 753600     528            mov y+2, #low (100 / 0x10000) 
065E 753700     528            mov y+3, #high(100 / 0x10000) 
0661 120305     529            lcall div32
0664 753445     530            mov y+0, #low (5189 % 0x10000) 
0667 753514     530            mov y+1, #high(5189 % 0x10000) 
066A 753600     530            mov y+2, #low (5189 / 0x10000) 
066D 753700     530            mov y+3, #high(5189 / 0x10000) 
0670 120278     531            lcall mul32
0673            532   
0673            533            ; Adding the ambient temperature to oven temperature
0673 853834     534            mov y+0, amb_temp+0
0676 853935     535            mov y+1, amb_temp+1
0679 853A36     536            mov y+2, amb_temp+2
067C 853B37     537            mov y+3, amb_temp+3
067F 1201C3     538            lcall add32
0682            539            
0682            540            ; Convert to BCD and display
0682 1200FE     541            lcall hex2bcd
0685 C0E0       542            push acc
0687 7403       542            mov a, #3
0689 14         542            dec a
068A 1200E3     542            lcall ?Set_Cursor_1 ; Select column and row
068D D0E0       542            pop acc
068F 12036E     543            lcall Display_formated_BCD_To
0692            544   
0692            545            ; Storing the thermocouple temperature into var temp 
0692 753410     546            mov y+0, #low (10000 % 0x10000) 
0695 753527     546            mov y+1, #high(10000 % 0x10000) 
0698 753600     546            mov y+2, #low (10000 / 0x10000) 
069B 753700     546            mov y+3, #high(10000 / 0x10000) 
069E 120305     547            lcall div32
06A1 853048     548            mov temp+0, x+0
06A4 853149     549            mov temp+1, x+1
06A7            550            
06A7            551            ; Wait 100 ms between readings
06A7 7A64       552            mov R2, #100
06A9 1204E8     553            lcall waitms
06AC            554            
06AC            555   ; STATE MACHINE  
06AC            556   FSM1:
06AC E54A       557            mov a, FSM1_state
06AE            558   
06AE            559   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
06AE            560   FSM1_state0:
06AE B40028     561            cjne a, #0, FSM1_state1
06B1 C0E0       562            push acc
06B3 7405       562            mov a, #5
06B5 14         562            dec a
06B6 1200E1     562            lcall ?Set_Cursor_2 ; Select column and row
06B9 D0E0       562            pop acc
06BB C083       563            push dph
06BD C082       563            push dpl
06BF C0E0       563            push acc
06C1 900014     563            mov dptr, #state0
06C4 1200D6     563            lcall ?Send_Constant_String
06C7 D0E0       563            pop acc
06C9 D082       563            pop dpl
06CB D083       563            pop dph
06CD 754100     564            mov pwm, #0
06D0 200103     565            jb PB0, FSM1_state0_done
06D3 754A01     566            mov FSM1_state, #1
06D6            567   FSM1_state0_done:
06D6 020593     568            ljmp Forever
06D9            569   
06D9            570   ; pre-heat state. Should go to state two when temp reaches temp_soak     
06D9            571   FSM1_state1:
06D9 B40134     572            cjne a, #1, FSM1_state2
06DC C0E0       573            push acc
06DE 7405       573            mov a, #5
06E0 14         573            dec a
06E1 1200E1     573            lcall ?Set_Cursor_2 ; Select column and row
06E4 D0E0       573            pop acc
06E6 C083       574            push dph
06E8 C082       574            push dpl
06EA C0E0       574            push acc
06EC 90001C     574            mov dptr, #state1
06EF 1200D6     574            lcall ?Send_Constant_String
06F2 D0E0       574            pop acc
06F4 D082       574            pop dpl
06F6 D083       574            pop dph
06F8            575            
06F8 C296       576            clr P1.6
06FA            577            
06FA 754164     578            mov pwm, #100
06FD 754700     579            mov sec, #0
0700            580            
0700            581            ; These two lines are temporary. temp should be read from the thermocouple wire
0700 754364     582            mov temp_soak, #100
0703            583            
0703 E543       584            mov a, temp_soak
0705 D3         585            setb c
0706 9548       586            subb a, temp
0708 5003       587            jnc FSM1_state1_done
070A 754A02     588            mov FSM1_state, #2
070D            589   FSM1_state1_done:
070D 020593     590            ljmp Forever
0710            591   
0710            592   ; State 2
0710            593   FSM1_state2:
0710 D296       594            setb P1.6 ;speaker
0712 B4023A     595            cjne a, #2, FSM1_state3
0715 C0E0       596            push acc
0717 7405       596            mov a, #5
0719 14         596            dec a
071A 1200E1     596            lcall ?Set_Cursor_2 ; Select column and row
071D D0E0       596            pop acc
071F C083       597            push dph
0721 C082       597            push dpl
0723 C0E0       597            push acc
0725 900024     597            mov dptr, #state2
0728 1200D6     597            lcall ?Send_Constant_String
072B D0E0       597            pop acc
072D D082       597            pop dpl
072F D083       597            pop dph
0731 754114     598            mov pwm, #20
0734            599            
0734 E547       600            mov a, sec
0736 2401       601            add a, #1
0738 F547       602            mov sec, a
073A            603   
073A 7A32       604            mov R2, #50
073C 1204E8     605            lcall waitms
073F            606   
073F E544       607            mov a, Time_soak
0741 C3         608            clr c
0742 9547       609            subb a, sec
0744 5003       610            jnc FSM1_state2_done
0746 754A03     611            mov FSM1_state, #3
0749            612   FSM1_state2_done:
0749 020593     613            ljmp Forever
074C            614   
074C            615   ;DELETE
074C            616   jump:
074C 0206AE     617   ljmp FSM1_state0         
074F            618   
074F            619   ;State 3
074F            620   FSM1_state3:
074F B4032F     621            cjne a, #3, FSM1_state4
0752 C0E0       622            push acc
0754 7405       622            mov a, #5
0756 14         622            dec a
0757 1200E1     622            lcall ?Set_Cursor_2 ; Select column and row
075A D0E0       622            pop acc
075C C083       623            push dph
075E C082       623            push dpl
0760 C0E0       623            push acc
0762 90002C     623            mov dptr, #state3
0765 1200D6     623            lcall ?Send_Constant_String
0768 D0E0       623            pop acc
076A D082       623            pop dpl
076C D083       623            pop dph
076E 754164     624            mov pwm, #100
0771 754700     625            mov sec, #0
0774            626            
0774            627            
0774 E545       628            mov a, Temp_refl
0776 C3         629            clr c
0777 9548       630            subb a, temp
0779 5003       631            jnc FSM1_state3_done
077B 754A04     632            mov FSM1_state, #4
077E            633   FSM1_state3_done:
077E 020593     634            ljmp Forever
0781            635   
0781            636   
0781            637   ;State 4
0781            638   FSM1_state4:
0781 B40437     639            cjne a, #4, FSM1_state5
0784 C0E0       640            push acc
0786 7405       640            mov a, #5
0788 14         640            dec a
0789 1200E1     640            lcall ?Set_Cursor_2 ; Select column and row
078C D0E0       640            pop acc
078E C083       641            push dph
0790 C082       641            push dpl
0792 C0E0       641            push acc
0794 900034     641            mov dptr, #state4
0797 1200D6     641            lcall ?Send_Constant_String
079A D0E0       641            pop acc
079C D082       641            pop dpl
079E D083       641            pop dph
07A0 754114     642            mov pwm, #20
07A3            643            
07A3 E547       644            mov a, sec
07A5 2401       645            add a, #1
07A7 F547       646            mov sec, a
07A9            647   
07A9 7A32       648            mov R2, #50
07AB 1204E8     649            lcall waitms
07AE            650            
07AE E546       651            mov a, Time_refl
07B0 C3         652            clr c
07B1 9547       653            subb a,sec
07B3 5003       654            jnc FSM1_state4_done
07B5 754A05     655            mov FSM1_state, #5
07B8            656   FSM1_state4_done:
07B8 020593     657            ljmp Forever
07BB            658            
07BB            659   FSM1_state5:
07BB B4058E     660            cjne a, #5, jump
07BE C0E0       661            push acc
07C0 7405       661            mov a, #5
07C2 14         661            dec a
07C3 1200E1     661            lcall ?Set_Cursor_2 ; Select column and row
07C6 D0E0       661            pop acc
07C8 C083       662            push dph
07CA C082       662            push dpl
07CC C0E0       662            push acc
07CE 90003C     662            mov dptr, #state5
07D1 1200D6     662            lcall ?Send_Constant_String
07D4 D0E0       662            pop acc
07D6 D082       662            pop dpl
07D8 D083       662            pop dph
07DA 754100     663            mov pwm, #0
07DD            664            
07DD            665            
07DD 743C       666            mov a, #60
07DF C3         667            clr c
07E0 9548       668            subb a, temp
07E2 4003       669            jc FSM1_state5_done
07E4 754A00     670            mov FSM1_state,#0
07E7            671   FSM1_state5_done:
07E7 120408     672            lcall Save_Variables ; Save variables in flash memory
07EA 020593     673            ljmp Forever
07ED            674            
07ED            675   
07ED            676   
07ED            677   ;Any additions to be checked
07ED            678   EN
