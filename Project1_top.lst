                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   ORG 0x0000
0000 020554      41       ljmp main
0003             42   
0003             43   ; Initialization Messages
0003 4F3D2020    44   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
0014 2C00        45   comma              :     db ','               , 0
0016 7200        46   soak_message       :     db 'r'               , 0
0018 7300        47   reflow_message     :     db 's'               , 0
001A             48   
001A 3000        49   state0:     db '0', 0
001C 3100        50   state1:     db '1', 0
001E 3200        51   state2:     db '2', 0
0020 3300        52   state3:     db '3', 0
0022 3400        53   state4:     db '4', 0
0024 3500        54   state5:     db '5', 0
0026             55   
0026             56   cseg
0026             57   
0026             58   ; SYMBOLIC CONSTANTS
0026             59   
0026             60   ; INPUTS
0026             61   tempsensor_in equ P3.0
0026             62   thermocouple_in equ P1.1
0026             63   
0026             64   ; OUTPUTS
0026             65   oven_out equ P1.2
0026             66   speaker_out equ P1.6
0026             67   
0026             68   CSEG
0026             69   ; LCD
0026             70   LCD_RS equ P1.3
0026             71   LCD_E equ P1.4
0026             72   LCD_D4 equ P0.0
0026             73   LCD_D5 equ P0.1
0026             74   LCD_D6 equ P0.2
0026             75   LCD_D7 equ P0.3
0026             76   
                 78   	$LIST
00DA             80   
00DA             81   ; Flash instructions
00DA             82   PAGE_ERASE_AP   EQU 00100010b
00DA             83   BYTE_PROGRAM_AP EQU 00100001b
00DA             84   
00DA             85   ; These register definitions needed by 'math32.inc'
0030             86   DSEG at 30H
0030             87   x:   ds 4
0034             88   y:   ds 4
0038             89   amb_temp: ds 4 ; ambient temperature read by LM335
003C             90   bcd: ds 5
0041             91   
0041             92   DSEG
0041             93   pwm: ds 1
0042             94   state: ds 1
0043             95   Temp_soak: ds 1
0044             96   Time_soak: ds 1
0045             97   Temp_refl: ds 1
0046             98   Time_refl: ds 1
0047             99   
0047            100   sec: ds 1
0048            101   temp: ds 2
004A            102   
004A            103   
004A            104   FSM1_state: ds 1
004B            105   
0000            106   BSEG
0000            107   reflow_flag: dbit 1
0001            108   soak_flag: dbit 1
0002            109   mf: dbit 1
0003            110   
0003            111   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            112   PB0: dbit 1
0004            113   PB1: dbit 1
0005            114   PB2: dbit 1
0006            115   PB3: dbit 1
0007            116   PB4: dbit 1
0008            117   PB5: dbit 1
0009            118   PB6: dbit 1
000A            119   PB7: dbit 1
000B            120   
000B            121   ; MATH32
                546   $LIST
                123   $LIST
034A            125   
034A            126   ; Blank Macro
                127   Left_blank mac
                128   	mov a, %0
                129   	anl a, #0xf0
                130   	swap a
                131   	jz Left_blank_%M_a
                132   	ljmp %1
                133   Left_blank_%M_a:
                134   	Display_char(#' ')
                135   	mov a, %0
                136   	anl a, #0x0f
                137   	jz Left_blank_%M_b
                138   	ljmp %1
                139   Left_blank_%M_b:
                140   	Display_char(#' ')
                141   endmac
034A            142   
034A            143   
034A            144   ;binary to display 3 digits on lcd screen
034A            145   
034A            146   SendToLCD:
034A 75F064     147            mov b, #100
034D 84         148            div ab
034E 4430       149            orl a, #0x30
0350 120075     150            lcall ?WriteData
0353 E5F0       151            mov a,b
0355 75F00A     152            mov b,#10
0358 84         153            div ab
0359 4430       154            orl a, #0x30
035B 120075     155            lcall ?WriteData
035E E5F0       156            mov a, b
0360 4430       157            orl a, #0x30
0362 120075     158            lcall ?WriteData
0365 22         159            ret
0366            160   
0366            161   
0366            162   ; Formatting to display thermocouple temperature
0366            163   ; Display: 0000.00
0366            164   Display_formated_BCD_To:
0366 C000       165            push ar0
0368 A83F       165            mov r0, bcd+3
036A 1200C4     165            lcall ?Display_BCD
036D D000       165            pop ar0
036F C000       166            push ar0
0371 A83E       166            mov r0, bcd+2
0373 1200C4     166            lcall ?Display_BCD
0376 D000       166            pop ar0
0378 C0E0       167            push acc
037A 742E       167            mov a, #'.'
037C 120075     167            lcall ?WriteData
037F D0E0       167            pop acc
0381 C000       168            push ar0
0383 A83D       168            mov r0, bcd+1
0385 1200C4     168            lcall ?Display_BCD
0388 D000       168            pop ar0
038A            169   
038A            170   
038A 22         171            ret
038B            172            
038B            173   ; Formatting to display ambient temperature
038B            174   ; Display: 00.00
038B            175   Display_formated_BCD_Tj:
038B C000       176            push ar0
038D A83E       176            mov r0, bcd+2
038F 1200C4     176            lcall ?Display_BCD
0392 D000       176            pop ar0
0394 C0E0       177            push acc
0396 742E       177            mov a, #'.'
0398 120075     177            lcall ?WriteData
039B D0E0       177            pop acc
039D C000       178            push ar0
039F A83D       178            mov r0, bcd+1
03A1 1200C4     178            lcall ?Display_BCD
03A4 D000       178            pop ar0
03A6 22         179            ret
03A7            180   
03A7            181   
03A7            182   ; INITIALIZATION SUBROUTINES
03A7            183   Init_All:
03A7            184            ; Configure all the pins for biderectional I/O
03A7 75AC00     185            mov     P3M1, #0x00
03AA 75AD00     186            mov     P3M2, #0x00
03AD 75B300     187            mov     P1M1, #0x00
03B0 75B400     188            mov     P1M2, #0x00
03B3 75B100     189            mov     P0M1, #0x00
03B6 75B200     190            mov     P0M2, #0x00
03B9            191   
03B9 438E10     192            orl     CKCON, #0x10 ; CLK is the input for timer 1
03BC 438780     193            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03BF 759852     194            mov     SCON, #0x52
03C2 53C4DF     195            anl     T3CON, #0b11011111
03C5 53890F     196            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03C8 438920     197            orl     TMOD, #0x20 ; Timer 1 Mode 2
03CB 758DF7     198            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03CE D28E       199            setb TR1
03D0            200            
03D0            201            ; Using timer 0 for delay functions.  Initialize here:
03D0 C28C       202            clr     TR0 ; Stop timer 0
03D2 438E08     203            orl     CKCON,#0x08 ; CLK is the input for timer 0
03D5 5389F0     204            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03D8 438901     205            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03DB            206            
03DB            207            ; Initialize the pin used by the ADC (P1.1) as input.
03DB 43B302     208            orl     P1M1, #0b00000010
03DE 53B4FD     209            anl     P1M2, #0b11111101
03E1            210   
03E1            211            ; Initialize the pin used by the ADC (P3.0) as input.
03E1 43AC01     212            orl     P3M1, #0b00000001
03E4 53ADFE     213            anl     P3M2, #0b11111110
03E7            214            
03E7            215            ; Initialize and start the ADC:
03E7 53E8F0     216            anl ADCCON0, #0xF0
03EA 43E807     217            orl ADCCON0, #0x07 ; Select channel 7
03ED            218   
03ED 53E2F0     219            anl ADCCON2, #0xF0
03F0 43E201     220            orl ADCCON2, #0x01 ; Select channel 1
03F3            221   
03F3            222            ; AINDIDS select if some pins are analog inputs or digital I/O:
03F3 75F600     223            mov AINDIDS, #0x00 ; Disable all analog inputs
03F6 43F680     224            orl AINDIDS, #0b10000000 ; P1.1 is analog input
03F9 43F601     225            orl AINDIDS, #0b00000001 ; P3.0 is analog input
03FC 43E101     226            orl ADCCON1, #0x01 ; Enable ADC
03FF            227            
03FF 22         228            ret
0400            229   
0400            230   ; Flash Memory Subroutines
0400            231   ;******************************************************************************
0400            232   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0400            233   ; Data Flash when user code is executed in APROM.
0400            234   ; (The base of this code is listed in the N76E003 user manual)
0400            235   ;******************************************************************************
0400            236   
0400            237   Save_Variables:
0400 C2AF       238            CLR EA  ; MUST disable interrupts for this to work!
0402            239            
0402 75C7AA     240            MOV TA, #0aah ; CHPCON is TA protected
0405 75C755     241            MOV TA, #55h
0408 439F01     242            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
040B            243            
040B 75C7AA     244            MOV TA, #0aah ; IAPUEN is TA protected
040E 75C755     245            MOV TA, #55h
0411 43A501     246            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
0414            247            
0414 75AF22     248            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
0417 75A73F     249            MOV IAPAH, #3fh ; Address high byte
041A 75A680     250            MOV IAPAL, #80h ; Address low byte
041D 75AEFF     251            MOV IAPFD, #0FFh ; Data to load into the address byte
0420 75C7AA     252            MOV TA, #0aah ; IAPTRG is TA protected
0423 75C755     253            MOV TA, #55h
0426 43A401     254            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0429            255            
0429 75AF21     256            MOV IAPCN, #BYTE_PROGRAM_AP
042C 75A73F     257            MOV IAPAH, #3fh
042F            258            
042F            259            ;Load 3f81h with temp_soak
042F 75A683     260            MOV IAPAL, #83h
0432 8543AE     261            MOV IAPFD, Temp_soak
0435 75C7AA     262            MOV TA, #0aah
0438 75C755     263            MOV TA, #55h
043B 43A401     264            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
043E            265            
043E            266            ;Load 3f81h with Time_soak
043E 75A684     267            MOV IAPAL, #84h
0441 8544AE     268            MOV IAPFD, Time_soak
0444 75C7AA     269            MOV TA, #0aah
0447 75C755     270            MOV TA, #55h
044A 43A401     271            ORL IAPTRG,#00000001b
044D            272            
044D            273            ;Load 3f82h with Temp_refl
044D 75A685     274            MOV IAPAL, #85h
0450 8545AE     275            MOV IAPFD, Temp_refl
0453 75C7AA     276            MOV TA, #0aah
0456 75C755     277            MOV TA, #55h
0459 43A401     278            ORL IAPTRG,#00000001b
045C            279            
045C            280            ;Load 3f83h with Time_refl
045C 75A686     281            MOV IAPAL, #86h
045F 8546AE     282            MOV IAPFD, Time_refl
0462 75C7AA     283            MOV TA, #0aah
0465 75C755     284            MOV TA, #55h
0468 43A401     285            ORL IAPTRG,#00000001b
046B            286   
046B            287            ;Load 3f84h with 55h
046B 75A687     288            MOV IAPAL,#87h
046E 75AE55     289            MOV IAPFD, #55h
0471 75C7AA     290            MOV TA, #0aah
0474 75C755     291            MOV TA, #55h
0477 43A401     292            ORL IAPTRG, #00000001b
047A            293   
047A            294            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
047A 75A688     295            MOV IAPAL, #88h
047D 75AEAA     296            MOV IAPFD, #0aah
0480 75C7AA     297            MOV TA, #0aah
0483 75C755     298            MOV TA, #55h
0486 43A401     299            ORL IAPTRG, #00000001b
0489            300   
0489 75C7AA     301            MOV TA, #0aah
048C 75C755     302            MOV TA, #55h
048F 53A5FE     303            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
0492 75C7AA     304            MOV TA, #0aah
0495 75C755     305            MOV TA, #55h
0498 539FFE     306            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
049B            307            
049B D2AF       308            setb EA  ; Re-enable interrupts
049D            309   
049D 22         310            ret
049E            311   
049E            312   Load_Variables:
049E 903F87     313            mov dptr, #0x3f87  ; First key value location.  Must be 0x55
04A1 E4         314            clr a
04A2 93         315            movc a, @a+dptr
04A3 B4551D     316            cjne a, #0x55, Load_Defaults
04A6 A3         317            inc dptr      ; Second key value location.  Must be 0xaa
04A7 E4         318            clr a
04A8 93         319            movc a, @a+dptr
04A9 B4AA17     320            cjne a, #0xaa, Load_Defaults
04AC            321            
04AC 903F83     322            mov dptr, #0x3f83
04AF E4         323            clr a
04B0 93         324            movc a, @a+dptr
04B1 F543       325            mov Temp_soak, a
04B3            326            
04B3 A3         327            inc dptr
04B4 E4         328            clr a
04B5 93         329            movc a, @a+dptr
04B6 F544       330            mov Time_soak, a
04B8            331            
04B8 A3         332            inc dptr
04B9 E4         333            clr a
04BA 93         334            movc a, @a+dptr
04BB F545       335            mov Temp_refl, a
04BD            336            
04BD A3         337            inc dptr
04BE E4         338            clr a
04BF 93         339            movc a, @a+dptr
04C0 F546       340            mov Time_refl, a
04C2 22         341            ret
04C3            342   
04C3            343   Load_Defaults:
04C3 7543C8     344            mov Temp_soak, #0xC8
04C6 754460     345            mov Time_soak, #0x60
04C9 7545C8     346            mov Temp_refl, #0xC8
04CC 754645     347            mov Time_refl, #0x45
04CF 22         348            ret
04D0            349   
04D0            350   wait_1ms:
04D0 C28C       351            clr     TR0 ; Stop timer 0
04D2 C28D       352            clr     TF0 ; Clear overflow flag
04D4 758CBF     353            mov     TH0, #high(TIMER0_RELOAD_1MS)
04D7 758A28     354            mov     TL0,#low(TIMER0_RELOAD_1MS)
04DA D28C       355            setb TR0
04DC 308DFD     356            jnb     TF0, $ ; Wait for overflow
04DF 22         357            ret
04E0            358   
04E0            359   ; Wait the number of miliseconds in R2
04E0            360   waitms:
04E0 1204D0     361            lcall wait_1ms
04E3 DAFB       362            djnz R2, waitms
04E5 22         363            ret
04E6            364   
04E6            365   ADC_to_PB:
04E6 53E8F0     366            anl ADCCON0, #0xF0
04E9 43E800     367            orl ADCCON0, #0x00 ; Select AIN0
04EC            368            
04EC C2EF       369            clr ADCF
04EE D2EE       370            setb ADCS   ; ADC start trigger signal
04F0 30EFFD     371       jnb ADCF, $ ; Wait for conversion complete
04F3            372   
04F3 D20A       373            setb PB7
04F5 D209       374            setb PB6
04F7 D208       375            setb PB5
04F9 D207       376            setb PB4
04FB D206       377            setb PB3
04FD D205       378            setb PB2
04FF D204       379            setb PB1
0501 D203       380            setb PB0
0503            381            
0503            382            ; Check PB7
0503            383   ADC_to_PB_L7:
0503 C3         384            clr c
0504 E5C3       385            mov a, ADCRH
0506 94F0       386            subb a, #0xf0
0508 4003       387            jc ADC_to_PB_L6
050A C20A       388            clr PB7
050C 22         389            ret
050D            390   
050D            391            ; Check PB6
050D            392   ADC_to_PB_L6:
050D C3         393            clr c
050E E5C3       394            mov a, ADCRH
0510 94D0       395            subb a, #0xd0
0512 4003       396            jc ADC_to_PB_L5
0514 C209       397            clr PB6
0516 22         398            ret
0517            399   
0517            400            ; Check PB5
0517            401   ADC_to_PB_L5:
0517 C3         402            clr c
0518 E5C3       403            mov a, ADCRH
051A 94B0       404            subb a, #0xb0
051C 4003       405            jc ADC_to_PB_L4
051E C208       406            clr PB5
0520 22         407            ret
0521            408   
0521            409            ; Check PB4
0521            410   ADC_to_PB_L4:
0521 C3         411            clr c
0522 E5C3       412            mov a, ADCRH
0524 9490       413            subb a, #0x90
0526 4003       414            jc ADC_to_PB_L3
0528 C207       415            clr PB4
052A 22         416            ret
052B            417   
052B            418            ; Check PB3
052B            419   ADC_to_PB_L3:
052B C3         420            clr c
052C E5C3       421            mov a, ADCRH
052E 9470       422            subb a, #0x70
0530 4003       423            jc ADC_to_PB_L2
0532 C206       424            clr PB3
0534 22         425            ret
0535            426   
0535            427            ; Check PB2
0535            428   ADC_to_PB_L2:
0535 C3         429            clr c
0536 E5C3       430            mov a, ADCRH
0538 9450       431            subb a, #0x50
053A 4003       432            jc ADC_to_PB_L1
053C C205       433            clr PB2
053E 22         434            ret
053F            435   
053F            436            ; Check PB1
053F            437   ADC_to_PB_L1:
053F C3         438            clr c
0540 E5C3       439            mov a, ADCRH
0542 9430       440            subb a, #0x30
0544 4003       441            jc ADC_to_PB_L0
0546 C204       442            clr PB1
0548 22         443            ret
0549            444   
0549            445            ; Check PB0
0549            446   ADC_to_PB_L0:
0549 C3         447            clr c
054A E5C3       448            mov a, ADCRH
054C 9410       449            subb a, #0x10
054E 4003       450            jc ADC_to_PB_Done
0550 C203       451            clr PB0
0552 22         452            ret
0553            453            
0553            454   ADC_to_PB_Done:
0553            455            ; No puhsbutton pressed         
0553 22         456            ret
0554            457   
0554            458   ; MAIN 
0554            459   main:
0554 75817F     460            mov sp, #0x7f
0557 1203A7     461       lcall Init_All
055A 12007F     462       lcall LCD_4BIT
055D            463       ; initial messages in LCD
055D C0E0       464            push acc
055F 7401       464            mov a, #1
0561 14         464            dec a
0562 1200BF     464            lcall ?Set_Cursor_1 ; Select column and row
0565 D0E0       464            pop acc
0567 C083       465            push dph
0569 C082       465            push dpl
056B C0E0       465            push acc
056D 900003     465            mov dptr, #temperature_message
0570 1200B2     465            lcall ?Send_Constant_String
0573 D0E0       465            pop acc
0575 D082       465            pop dpl
0577 D083       465            pop dph
0579 C0E0       466            push acc
057B 7401       466            mov a, #1
057D 14         466            dec a
057E 1200BD     466            lcall ?Set_Cursor_2 ; Select column and row
0581 D0E0       466            pop acc
0583 C083       467            push dph
0585 C082       467            push dpl
0587 C0E0       467            push acc
0589 900016     467            mov dptr, #soak_message
058C 1200B2     467            lcall ?Send_Constant_String
058F D0E0       467            pop acc
0591 D082       467            pop dpl
0593 D083       467            pop dph
0595 C0E0       468            push acc
0597 7405       468            mov a, #5
0599 14         468            dec a
059A 1200BD     468            lcall ?Set_Cursor_2 ; Select column and row
059D D0E0       468            pop acc
059F C083       469            push dph
05A1 C082       469            push dpl
05A3 C0E0       469            push acc
05A5 900014     469            mov dptr, #comma
05A8 1200B2     469            lcall ?Send_Constant_String
05AB D0E0       469            pop acc
05AD D082       469            pop dpl
05AF D083       469            pop dph
05B1 C0E0       470            push acc
05B3 7408       470            mov a, #8
05B5 14         470            dec a
05B6 1200BD     470            lcall ?Set_Cursor_2 ; Select column and row
05B9 D0E0       470            pop acc
05BB C083       471            push dph
05BD C082       471            push dpl
05BF C0E0       471            push acc
05C1 900018     471            mov dptr, #reflow_message
05C4 1200B2     471            lcall ?Send_Constant_String
05C7 D0E0       471            pop acc
05C9 D082       471            pop dpl
05CB D083       471            pop dph
05CD C0E0       472            push acc
05CF 740C       472            mov a, #12
05D1 14         472            dec a
05D2 1200BD     472            lcall ?Set_Cursor_2 ; Select column and row
05D5 D0E0       472            pop acc
05D7 C083       473            push dph
05D9 C082       473            push dpl
05DB C0E0       473            push acc
05DD 900014     473            mov dptr, #comma
05E0 1200B2     473            lcall ?Send_Constant_String
05E3 D0E0       473            pop acc
05E5 D082       473            pop dpl
05E7 D083       473            pop dph
05E9            474   
05E9 754A00     475            mov FSM1_state, #0
05EC 12049E     476            lcall Load_Variables
05EF 754700     477            mov sec, #0
05F2            478   
05F2 C200       479            clr reflow_flag ; start on temp
05F4 C201       480            clr soak_flag ; start on temp
05F6            481   
05F6            482   Forever:
05F6            483   
05F6            484   
05F6            485   ; Example branch for decreasing any given value 
05F6            486   ; This set of code will increase the ones columnn of any given 
05F6            487   ; variable. ie. reflow_temp_ones, reflow_time_ones
05F6            488   ; the 10s and 100s column will update in response to increasing 
05F6            489   ; the ones column beyond 9.
05F6            490   
05F6            491   ; REFLOW ;
05F6            492   reflow_toggle:
05F6 200A02     493            jb PB7, check_reflow_toggle
05F9 B200       494            cpl reflow_flag ; if button is pressed, change flag
05FB            495   
05FB            496   check_reflow_toggle: 
05FB 200010     497            jb reflow_flag, turn_reflow_to_time
05FE            498   
05FE            499   turn_reflow_to_temp:
05FE            500            ; will use the same logic for the other pushbuttons
05FE            501   ; This example will use temp_soak for this example
05FE            502   
05FE            503            decrease_reflow_temp:
05FE 200905     504            jb PB6, increase_reflow_temp
0601 1545       505       dec Temp_refl
0603 020628     506            ljmp soak_toggle
0606            507            
0606            508            increase_reflow_temp:
0606 20081F     509            jb PB5, soak_toggle 
0609 0545       510            inc Temp_refl
060B 020628     511            ljmp soak_toggle
060E            512   
060E            513   
060E            514   turn_reflow_to_time:
060E            515            
060E            516            decrease_reflow_time:
060E 20090A     517            jb PB6, increase_reflow_time
0611 E546       518            mov a, Time_refl
0613 2499       519       add a, #0x99
0615 D4         520            da a
0616 F546       521       mov Time_refl, a
0618 020628     522            ljmp soak_toggle
061B            523            
061B            524            increase_reflow_time:
061B 20080A     525            jb PB5, soak_toggle 
061E E546       526            mov a, Time_refl
0620 2401       527            add a, #1
0622 D4         528            da a 
0623 F546       529            mov Time_refl, a
0625 020628     530            ljmp soak_toggle
0628            531   
0628            532   ; SOAK ;
0628            533   soak_toggle:
0628 200702     534            jb PB4, check_soak_toggle
062B B201       535            cpl soak_flag ; if button is pressed, change flag
062D            536   
062D            537   check_soak_toggle: 
062D 200110     538            jb soak_flag, turn_soak_to_time
0630            539   
0630            540   turn_soak_to_temp:
0630            541            ; will use the same logic for the other pushbuttons
0630            542   ; This example will use temp_soak for this example
0630            543   
0630            544            decrease_soak_temp:
0630 200605     545            jb PB3, increase_soak_temp
0633 1543       546       dec Temp_soak
0635 02065A     547            ljmp start_stop
0638            548            
0638            549            increase_soak_temp:
0638 20051F     550            jb PB2, start_stop 
063B 0543       551            inc Temp_soak
063D 02065A     552            ljmp start_stop
0640            553   
0640            554   turn_soak_to_time:
0640            555            
0640            556            decrease_soak_time:
0640 20060A     557            jb PB3, increase_soak_time
0643 E544       558            mov a, Time_soak
0645 2499       559       add a, #0x99
0647 D4         560            da a
0648 F544       561       mov Time_soak, a
064A 02065A     562            ljmp start_stop
064D            563            
064D            564            increase_soak_time:
064D 2005D8     565            jb PB2, soak_toggle 
0650 E544       566            mov a, Time_soak
0652 2401       567            add a, #1
0654 D4         568            da a 
0655 F544       569            mov Time_soak, a
0657 02065A     570            ljmp start_stop
065A            571   
065A            572   start_stop:
065A E545       573            mov a, Temp_refl
065C C0E0       574            push acc
065E 7402       574            mov a, #2
0660 14         574            dec a
0661 1200BD     574            lcall ?Set_Cursor_2 ; Select column and row
0664 D0E0       574            pop acc
0666 12034A     575            lcall SendToLCD
0669 E4         576            clr a
066A E543       577            mov a, Temp_soak
066C C0E0       578            push acc
066E 7409       578            mov a, #9
0670 14         578            dec a
0671 1200BD     578            lcall ?Set_Cursor_2 ; Select column and row
0674 D0E0       578            pop acc
0676 12034A     579            lcall SendToLCD
0679 E4         580            clr a
067A C0E0       581            push acc
067C 7406       581            mov a, #6
067E 14         581            dec a
067F 1200BD     581            lcall ?Set_Cursor_2 ; Select column and row
0682 D0E0       581            pop acc
0684 C000       582            push ar0
0686 A846       582            mov r0, Time_refl
0688 1200C4     582            lcall ?Display_BCD
068B D000       582            pop ar0
068D C0E0       583            push acc
068F 740D       583            mov a, #13
0691 14         583            dec a
0692 1200BD     583            lcall ?Set_Cursor_2 ; Select column and row
0695 D0E0       583            pop acc
0697 C000       584            push ar0
0699 A844       584            mov r0, Time_soak
069B 1200C4     584            lcall ?Display_BCD
069E D000       584            pop ar0
06A0 120400     585            lcall Save_Variables ; Save variables in flash memory
06A3            586            
06A3 20030F     587            jb PB0, continue
06A6            588   
06A6            589   turn_on:
06A6 E54A       590            mov a, FSM1_state
06A8 B40005     591            cjne a, #0, turn_off
06AB 754A01     592            mov FSM1_state, #1
06AE 8005       593            sjmp continue
06B0            594   
06B0            595   turn_off:
06B0 754A00     596            mov FSM1_state, #0
06B3 8000       597            sjmp continue
06B5            598   
06B5            599   
06B5            600   continue:
06B5 1204E6     601            lcall ADC_to_PB
06B8            602            ;lcall Display_PushButtons_ADC
06B8            603            
06B8 75E807     604            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
06BB C2EF       605            clr ADCF
06BD D2EE       606            setb ADCS ;  ADC start trigger signal
06BF 30EFFD     607       jnb ADCF, $ ; Wait for conversion complete
06C2            608       
06C2            609       ; Read the ADC result and store in [R1, R0]
06C2 E5C3       610       mov a, ADCRH   
06C4 C4         611       swap a
06C5 C0E0       612       push acc
06C7 540F       613       anl a, #0x0f
06C9 F9         614       mov R1, a
06CA D0E0       615       pop acc
06CC 54F0       616       anl a, #0xf0
06CE 45C2       617       orl a, ADCRL
06D0 F8         618       mov R0, A
06D1            619       
06D1 75E801     620       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
06D4 C2EF       621            clr ADCF
06D6 D2EE       622            setb ADCS ;  ADC start trigger signal
06D8 30EFFD     623       jnb ADCF, $ ; Wait for conversion complete
06DB            624       
06DB            625       ; Read the ADC result and store in [R4, R3]
06DB E5C3       626       mov a, ADCRH   
06DD C4         627       swap a
06DE C0E0       628       push acc
06E0 540F       629       anl a, #0x0f
06E2 FC         630       mov R4, a
06E3 D0E0       631       pop acc
06E5 54F0       632       anl a, #0xf0
06E7 45C2       633       orl a, ADCRL
06E9 FB         634       mov R3, A
06EA            635       
06EA            636            ; Convert to LM335 temperature to voltage
06EA 8B30       637            mov x+0, R3
06EC 8C31       638            mov x+1, R4
06EE 753200     639            mov x+2, #0
06F1 753300     640            mov x+3, #0
06F4 75347C     641            mov y+0, #low (50300 % 0x10000) 
06F7 7535C4     641            mov y+1, #high(50300 % 0x10000) 
06FA 753600     641            mov y+2, #low (50300 / 0x10000) 
06FD 753700     641            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0700 120254     642            lcall mul32
0703 7534FF     643            mov y+0, #low (4095 % 0x10000) 
0706 75350F     643            mov y+1, #high(4095 % 0x10000) 
0709 753600     643            mov y+2, #low (4095 / 0x10000) 
070C 753700     643            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
070F 1202E1     644            lcall div32
0712 7534D0     645            mov y+0, #low (27600 % 0x10000) 
0715 75356B     645            mov y+1, #high(27600 % 0x10000) 
0718 753600     645            mov y+2, #low (27600 / 0x10000) 
071B 753700     645            mov y+3, #high(27600 / 0x10000) 
071E 1201C0     646            lcall sub32
0721 753464     647            mov y+0, #low (100 % 0x10000) 
0724 753500     647            mov y+1, #high(100 % 0x10000) 
0727 753600     647            mov y+2, #low (100 / 0x10000) 
072A 753700     647            mov y+3, #high(100 / 0x10000) 
072D 120254     648            lcall mul32
0730            649            
0730            650            ; Convert to BCD and display
0730 1200DA     651            lcall hex2bcd
0733 C0E0       652            push acc
0735 740C       652            mov a, #12
0737 14         652            dec a
0738 1200BF     652            lcall ?Set_Cursor_1 ; Select column and row
073B D0E0       652            pop acc
073D 12038B     653            lcall Display_formated_BCD_Tj
0740            654   
0740            655            ; Convert value back to hex to use for calculations
0740 120163     656            lcall bcd2hex
0743            657   
0743            658            ; Storing the ambient temperature
0743 853038     659            mov amb_temp+0, x+0
0746 853139     660            mov amb_temp+1, x+1
0749 85323A     661            mov amb_temp+2, x+2
074C 85333B     662            mov amb_temp+3, x+3
074F            663   
074F            664            ; Convert to thermocouple voltage to temperature
074F 8830       665            mov x+0, R0
0751 8931       666            mov x+1, R1
0753 753200     667            mov x+2, #0
0756 753300     668            mov x+3, #0
0759 75347C     669            mov y+0, #low (50300 % 0x10000) 
075C 7535C4     669            mov y+1, #high(50300 % 0x10000) 
075F 753600     669            mov y+2, #low (50300 / 0x10000) 
0762 753700     669            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0765 120254     670            lcall mul32
0768 7534FF     671            mov y+0, #low (4095 % 0x10000) 
076B 75350F     671            mov y+1, #high(4095 % 0x10000) 
076E 753600     671            mov y+2, #low (4095 / 0x10000) 
0771 753700     671            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0774 1202E1     672            lcall div32
0777 753464     673            mov y+0, #low (100 % 0x10000) 
077A 753500     673            mov y+1, #high(100 % 0x10000) 
077D 753600     673            mov y+2, #low (100 / 0x10000) 
0780 753700     673            mov y+3, #high(100 / 0x10000) 
0783 1202E1     674            lcall div32
0786 753445     675            mov y+0, #low (5189 % 0x10000) 
0789 753514     675            mov y+1, #high(5189 % 0x10000) 
078C 753600     675            mov y+2, #low (5189 / 0x10000) 
078F 753700     675            mov y+3, #high(5189 / 0x10000) 
0792 120254     676            lcall mul32
0795            677   
0795            678            ; Adding the ambient temperature to oven temperature
0795 853834     679            mov y+0, amb_temp+0
0798 853935     680            mov y+1, amb_temp+1
079B 853A36     681            mov y+2, amb_temp+2
079E 853B37     682            mov y+3, amb_temp+3
07A1 12019F     683            lcall add32
07A4            684            
07A4            685            ; Convert to BCD and display
07A4 1200DA     686            lcall hex2bcd
07A7 C0E0       687            push acc
07A9 7403       687            mov a, #3
07AB 14         687            dec a
07AC 1200BF     687            lcall ?Set_Cursor_1 ; Select column and row
07AF D0E0       687            pop acc
07B1 120366     688            lcall Display_formated_BCD_To
07B4            689   
07B4            690            ; Storing the thermocouple temperature into var temp 
07B4 753410     691            mov y+0, #low (10000 % 0x10000) 
07B7 753527     691            mov y+1, #high(10000 % 0x10000) 
07BA 753600     691            mov y+2, #low (10000 / 0x10000) 
07BD 753700     691            mov y+3, #high(10000 / 0x10000) 
07C0 1202E1     692            lcall div32
07C3 853048     693            mov temp+0, x+0
07C6 853149     694            mov temp+1, x+1
07C9            695            
07C9            696            ; Wait 100 ms between readings
07C9 7A64       697            mov R2, #100
07CB 1204E0     698            lcall waitms
07CE            699            
07CE            700   ; STATE MACHINE  
07CE            701   FSM1:
07CE E54A       702            mov a, FSM1_state
07D0            703   
07D0            704   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
07D0            705   FSM1_state0:
07D0 120400     706            lcall Save_Variables
07D3 B40022     707            cjne a, #0, FSM1_state1
07D6 C0E0       708            push acc
07D8 7410       708            mov a, #16
07DA 14         708            dec a
07DB 1200BD     708            lcall ?Set_Cursor_2 ; Select column and row
07DE D0E0       708            pop acc
07E0 C083       709            push dph
07E2 C082       709            push dpl
07E4 C0E0       709            push acc
07E6 90001A     709            mov dptr, #state0
07E9 1200B2     709            lcall ?Send_Constant_String
07EC D0E0       709            pop acc
07EE D082       709            pop dpl
07F0 D083       709            pop dph
07F2 754100     710            mov pwm, #0
07F5            711            ;jb PB0, FSM1_state0_done
07F5            712            ;mov FSM1_state, #1
07F5            713   FSM1_state0_done:
07F5 0205F6     714            ljmp Forever
07F8            715   
07F8            716   ; pre-heat state. Should go to state two when temp reaches temp_soak     
07F8            717   FSM1_state1:
07F8 B40134     718            cjne a, #1, FSM1_state2
07FB C0E0       719            push acc
07FD 7410       719            mov a, #16
07FF 14         719            dec a
0800 1200BD     719            lcall ?Set_Cursor_2 ; Select column and row
0803 D0E0       719            pop acc
0805 C083       720            push dph
0807 C082       720            push dpl
0809 C0E0       720            push acc
080B 90001C     720            mov dptr, #state1
080E 1200B2     720            lcall ?Send_Constant_String
0811 D0E0       720            pop acc
0813 D082       720            pop dpl
0815 D083       720            pop dph
0817            721            
0817 C296       722            clr P1.6
0819            723            
0819 754164     724            mov pwm, #100
081C 754700     725            mov sec, #0
081F            726            
081F            727            ; These two lines are temporary. temp should be read from the thermocouple wire
081F 754364     728            mov Temp_soak, #100
0822            729            
0822 E543       730            mov a, Temp_soak
0824 D3         731            setb c
0825 9548       732            subb a, temp
0827 5003       733            jnc FSM1_state1_done
0829 754A02     734            mov FSM1_state, #2
082C            735   FSM1_state1_done:
082C 0205F6     736            ljmp Forever
082F            737   
082F            738   ; State 2
082F            739   FSM1_state2:
082F D296       740            setb P1.6 ;speaker
0831 B4023A     741            cjne a, #2, FSM1_state3
0834 C0E0       742            push acc
0836 7410       742            mov a, #16
0838 14         742            dec a
0839 1200BD     742            lcall ?Set_Cursor_2 ; Select column and row
083C D0E0       742            pop acc
083E C083       743            push dph
0840 C082       743            push dpl
0842 C0E0       743            push acc
0844 90001E     743            mov dptr, #state2
0847 1200B2     743            lcall ?Send_Constant_String
084A D0E0       743            pop acc
084C D082       743            pop dpl
084E D083       743            pop dph
0850 754114     744            mov pwm, #20
0853            745            
0853 E547       746            mov a, sec
0855 2401       747            add a, #1
0857 F547       748            mov sec, a
0859            749   
0859 7A32       750            mov R2, #50
085B 1204E0     751            lcall waitms
085E            752   
085E E544       753            mov a, Time_soak
0860 C3         754            clr c
0861 9547       755            subb a, sec
0863 5003       756            jnc FSM1_state2_done
0865 754A03     757            mov FSM1_state, #3
0868            758   FSM1_state2_done:
0868 0205F6     759            ljmp Forever
086B            760   
086B            761   ;DELETE
086B            762   jump:
086B 0207D0     763   ljmp FSM1_state0         
086E            764   
086E            765   ;State 3
086E            766   FSM1_state3:
086E B4032F     767            cjne a, #3, FSM1_state4
0871 C0E0       768            push acc
0873 7410       768            mov a, #16
0875 14         768            dec a
0876 1200BD     768            lcall ?Set_Cursor_2 ; Select column and row
0879 D0E0       768            pop acc
087B C083       769            push dph
087D C082       769            push dpl
087F C0E0       769            push acc
0881 900020     769            mov dptr, #state3
0884 1200B2     769            lcall ?Send_Constant_String
0887 D0E0       769            pop acc
0889 D082       769            pop dpl
088B D083       769            pop dph
088D 754164     770            mov pwm, #100
0890 754700     771            mov sec, #0
0893            772            
0893            773            
0893 E545       774            mov a, Temp_refl
0895 C3         775            clr c
0896 9548       776            subb a, temp
0898 5003       777            jnc FSM1_state3_done
089A 754A04     778            mov FSM1_state, #4
089D            779   FSM1_state3_done:
089D 0205F6     780            ljmp Forever
08A0            781   
08A0            782   
08A0            783   ;State 4
08A0            784   FSM1_state4:
08A0 B40437     785            cjne a, #4, FSM1_state5
08A3 C0E0       786            push acc
08A5 7410       786            mov a, #16
08A7 14         786            dec a
08A8 1200BD     786            lcall ?Set_Cursor_2 ; Select column and row
08AB D0E0       786            pop acc
08AD C083       787            push dph
08AF C082       787            push dpl
08B1 C0E0       787            push acc
08B3 900022     787            mov dptr, #state4
08B6 1200B2     787            lcall ?Send_Constant_String
08B9 D0E0       787            pop acc
08BB D082       787            pop dpl
08BD D083       787            pop dph
08BF 754114     788            mov pwm, #20
08C2            789            
08C2 E547       790            mov a, sec
08C4 2401       791            add a, #1
08C6 F547       792            mov sec, a
08C8            793   
08C8 7A32       794            mov R2, #50
08CA 1204E0     795            lcall waitms
08CD            796            
08CD E546       797            mov a, Time_refl
08CF C3         798            clr c
08D0 9547       799            subb a,sec
08D2 5003       800            jnc FSM1_state4_done
08D4 754A05     801            mov FSM1_state, #5
08D7            802   FSM1_state4_done:
08D7 0205F6     803            ljmp Forever
08DA            804            
08DA            805   FSM1_state5:
08DA B4058E     806            cjne a, #5, jump
08DD C0E0       807            push acc
08DF 7410       807            mov a, #16
08E1 14         807            dec a
08E2 1200BD     807            lcall ?Set_Cursor_2 ; Select column and row
08E5 D0E0       807            pop acc
08E7 C083       808            push dph
08E9 C082       808            push dpl
08EB C0E0       808            push acc
08ED 900024     808            mov dptr, #state5
08F0 1200B2     808            lcall ?Send_Constant_String
08F3 D0E0       808            pop acc
08F5 D082       808            pop dpl
08F7 D083       808            pop dph
08F9 754100     809            mov pwm, #0
08FC            810            
08FC            811            
08FC 743C       812            mov a, #60
08FE C3         813            clr c
08FF 9548       814            subb a, temp
0901 4003       815            jc FSM1_state5_done
0903 754A00     816            mov FSM1_state,#0
0906            817   FSM1_state5_done:
0906 0205F6     818            ljmp Forever
0909            819            
0909            820   
0909            821   
0909            822   ;Any additions to be checked
0909            823   EN
