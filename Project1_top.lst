                  2   $LIST
0000              4   
0000              5   
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   ;  N76E003 pinout:
0000             22   ;                               ----
0000             23   ;                 (FREE) P0.5 -|1    20|- P0.4 (FREE)
0000             24   ;      Serial to COM TXD/P0.6 -|2    19|- P0.3 LCD.3
0000             25   ;      Serial to COM RXD/P0.7 -|3    18|- P0.2 LCD.2
0000             26   ;                    RST P2.0 -|4    17|- P0.1 LCD.1
0000             27   ;            LM335 INPUT P3.0 -|5    16|- P0.0 LCD.0
0000             28   ;       PUSHBUTTONS AIN0/P1.7 -|6    15|- P1.0 (FREE)
0000             29   ;                         GND -|7    14|- P1.1 THERMOCOUPLE INPUT
0000             30   ;         SPEAKER OUTPUT P1.6 -|8    13|- P1.2 OVEN CONTROL PIN
0000             31   ;                         VDD -|9    12|- P1.3 LCD RS
0000             32   ;                 (FREE) P1.5 -|10   11|- P1.4 LCD E
0000             33   ;                               -------
0000             34   ;
0000             35   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             36   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             37   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             38   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             39   
0000             40   TIMER2_RATE         EQU 100      ; 100Hz or 10ms
0000             41   TIMER2_RELOAD       EQU (65536-(CLK/(16*TIMER2_RATE))) ; Need to change timer 2 input divide to 16 in T2MOD
0000             42   
0000             43   
0000             44   ;pwn
0000             45   PWM_OUT    EQU P1.2 ; Logic 1=oven on
0000             46   
0000             47   ORG 0x0000
0000 0205C4      48       ljmp main
002B             49   ORG 0x002B
002B 020447      50            ljmp Timer2_ISR
002E             51   ; Initialization Messages
002E 4F3D2020    52   temperature_message:     db 'O=       J=     ', 0
     20202020
     204A3D20
     20202020
     00
003F 2C00        53   comma              :     db ','               , 0
0041 7300        54   soak_message       :     db 's'               , 0
0043 7200        55   reflow_message     :     db 'r'               , 0
0045             56   
0045 3000        57   state0:     db '0', 0
0047 3100        58   state1:     db '1', 0
0049 3200        59   state2:     db '2', 0
004B 3300        60   state3:     db '3', 0
004D 3400        61   state4:     db '4', 0
004F 3500        62   state5:     db '5', 0
0051             63   
0051             64   cseg
0051             65   
0051             66   ; SYMBOLIC CONSTANTS
0051             67   
0051             68   ; INPUTS
0051             69   tempsensor_in equ P3.0
0051             70   thermocouple_in equ P1.1
0051             71   
0051             72   ; OUTPUTS
0051             73   oven_out equ P1.2
0051             74   speaker_out equ P1.6
0051             75   
0051             76   CSEG
0051             77   ; LCD
0051             78   LCD_RS equ P1.3
0051             79   LCD_E equ P1.4
0051             80   LCD_D4 equ P0.0
0051             81   LCD_D5 equ P0.1
0051             82   LCD_D6 equ P0.2
0051             83   LCD_D7 equ P0.3
0051             84   
                 86   	$LIST
0105             88   
0105             89   ; Flash instructions
0105             90   PAGE_ERASE_AP   EQU 00100010b
0105             91   BYTE_PROGRAM_AP EQU 00100001b
0105             92   
0105             93   ; These register definitions needed by 'math32.inc'
0030             94   DSEG at 30H
0030             95   x:   ds 4
0034             96   y:   ds 4
0038             97   amb_temp: ds 4 ; ambient temperature read by LM335
003C             98   bcd: ds 5
0041             99   
0041            100   DSEG
0041            101   pwm: ds 1
0042            102   state: ds 1
0043            103   temp_soak: ds 1
0044            104   Time_soak: ds 1
0045            105   Temp_refl: ds 1
0046            106   Time_refl: ds 1
0047            107   
0047            108   sec: ds 1
0048            109   loop_ten_times: ds 1
0049            110   temp: ds 2
004B            111   
004B            112   
004B            113   FSM1_state: ds 1
004C            114   
004C            115   
004C            116   ;for pwm
004C            117   pwm_counter:  ds 1 ; Free running counter 0, 1, 2, ..., 100, 0
004D            118   
004D            119   seconds:      ds 1 ; a seconds counter attached to Timer 2 ISR
004E            120   
004E            121   
0000            122   BSEG
0000            123   reflow_flag: dbit 1
0001            124   soak_flag: dbit 1
0002            125   mf: dbit 1
0003            126   
0003            127   ; These eight bit variables store the value of the pushbuttons after calling 'ADC_to_PB' below
0003            128   PB0: dbit 1
0004            129   PB1: dbit 1
0005            130   PB2: dbit 1
0006            131   PB3: dbit 1
0007            132   PB4: dbit 1
0008            133   PB5: dbit 1
0009            134   PB6: dbit 1
000A            135   PB7: dbit 1
000B            136   
000B            137   
000B            138   BSEG
000B            139   s_flag: dbit 1 ; set to 1 every time a second has passed
000C            140   
000C            141   
000C            142   ; MATH32
                546   $LIST
                144   $LIST
0375            146   
0375            147   ; Blank Macro
                148   Left_blank mac
                149   	mov a, %0
                150   	anl a, #0xf0
                151   	swap a
                152   	jz Left_blank_%M_a
                153   	ljmp %1
                154   Left_blank_%M_a:
                155   	Display_char(#' ')
                156   	mov a, %0
                157   	anl a, #0x0f
                158   	jz Left_blank_%M_b
                159   	ljmp %1
                160   Left_blank_%M_b:
                161   	Display_char(#' ')
                162   endmac
0375            163   
0375            164   
0375            165   ;binary to display 3 digits on lcd screen
0375            166   
0375            167   SendToLCD:
0375 75F064     168            mov b, #100
0378 84         169            div ab
0379 4430       170            orl a, #0x30
037B 1200A0     171            lcall ?WriteData
037E E5F0       172            mov a,b
0380 75F00A     173            mov b,#10
0383 84         174            div ab
0384 4430       175            orl a, #0x30
0386 1200A0     176            lcall ?WriteData
0389 E5F0       177            mov a, b
038B 4430       178            orl a, #0x30
038D 1200A0     179            lcall ?WriteData
0390 22         180            ret
0391            181   
0391            182   
0391            183   ; Formatting to display thermocouple temperature
0391            184   ; Display: 0000.00
0391            185   Display_formated_BCD_To:
0391 C000       186            push ar0
0393 A83F       186            mov r0, bcd+3
0395 1200EF     186            lcall ?Display_BCD
0398 D000       186            pop ar0
039A C000       187            push ar0
039C A83E       187            mov r0, bcd+2
039E 1200EF     187            lcall ?Display_BCD
03A1 D000       187            pop ar0
03A3 C0E0       188            push acc
03A5 742E       188            mov a, #'.'
03A7 1200A0     188            lcall ?WriteData
03AA D0E0       188            pop acc
03AC C000       189            push ar0
03AE A83D       189            mov r0, bcd+1
03B0 1200EF     189            lcall ?Display_BCD
03B3 D000       189            pop ar0
03B5            190   
03B5            191   
03B5 22         192            ret
03B6            193            
03B6            194   ; Formatting to display ambient temperature
03B6            195   ; Display: 00.00
03B6            196   Display_formated_BCD_Tj:
03B6 C000       197            push ar0
03B8 A83E       197            mov r0, bcd+2
03BA 1200EF     197            lcall ?Display_BCD
03BD D000       197            pop ar0
03BF C0E0       198            push acc
03C1 742E       198            mov a, #'.'
03C3 1200A0     198            lcall ?WriteData
03C6 D0E0       198            pop acc
03C8 C000       199            push ar0
03CA A83D       199            mov r0, bcd+1
03CC 1200EF     199            lcall ?Display_BCD
03CF D000       199            pop ar0
03D1 22         200            ret
03D2            201   
03D2            202   
03D2            203   ; INITIALIZATION SUBROUTINES
03D2            204   Init_All:
03D2            205            ; Configure all the pins for biderectional I/O
03D2 75AC00     206            mov     P3M1, #0x00
03D5 75AD00     207            mov     P3M2, #0x00
03D8 75B300     208            mov     P1M1, #0x00
03DB 75B400     209            mov     P1M2, #0x00
03DE 75B100     210            mov     P0M1, #0x00
03E1 75B200     211            mov     P0M2, #0x00
03E4            212   
03E4 438E10     213            orl     CKCON, #0x10 ; CLK is the input for timer 1
03E7 438780     214            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03EA 759852     215            mov     SCON, #0x52
03ED 53C4DF     216            anl     T3CON, #0b11011111
03F0 53890F     217            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03F3 438920     218            orl     TMOD, #0x20 ; Timer 1 Mode 2
03F6 758DF7     219            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03F9 D28E       220            setb TR1
03FB            221            
03FB            222            ; Using timer 0 for delay functions.  Initialize here:
03FB C28C       223            clr     TR0 ; Stop timer 0
03FD 438E08     224            orl     CKCON,#0x08 ; CLK is the input for timer 0
0400 5389F0     225            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0403 438901     226            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0406            227            
0406            228            
0406            229            ;Timer 2 for pulse
0406            230            ; Initialize timer 2 for periodic interrupts
0406 75C800     231            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0409 75CDD7     232            mov TH2, #high(TIMER2_RELOAD)
040C 75CC79     233            mov TL2, #low(TIMER2_RELOAD)
040F            234            ; Set the reload value
040F 75C9A0     235            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
0412 75CBD7     236            mov RCMP2H, #high(TIMER2_RELOAD)
0415 75CA79     237            mov RCMP2L, #low(TIMER2_RELOAD)
0418            238            ; Init the free running 10 ms counter to zero
0418 754C00     239            mov pwm_counter, #0
041B            240            ; Enable the timer and interrupts
041B 439B80     241            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
041E D2CA       242       setb TR2  ; Enable timer 2
0420            243   
0420 D2AF       244            setb EA ; Enable global interrupts
0422            245            
0422            246            
0422            247            
0422            248            ; Initialize the pin used by the ADC (P1.1) as input.
0422 43B302     249            orl     P1M1, #0b00000010
0425 53B4FD     250            anl     P1M2, #0b11111101
0428            251   
0428            252            ; Initialize the pin used by the ADC (P3.0) as input.
0428 43AC01     253            orl     P3M1, #0b00000001
042B 53ADFE     254            anl     P3M2, #0b11111110
042E            255            
042E            256            ; Initialize and start the ADC:
042E 53E8F0     257            anl ADCCON0, #0xF0
0431 43E807     258            orl ADCCON0, #0x07 ; Select channel 7
0434            259   
0434 53E2F0     260            anl ADCCON2, #0xF0
0437 43E201     261            orl ADCCON2, #0x01 ; Select channel 1
043A            262   
043A            263            ; AINDIDS select if some pins are analog inputs or digital I/O:
043A 75F600     264            mov AINDIDS, #0x00 ; Disable all analog inputs
043D 43F680     265            orl AINDIDS, #0b10000000 ; P1.1 is analog input
0440 43F601     266            orl AINDIDS, #0b00000001 ; P3.0 is analog input
0443 43E101     267            orl ADCCON1, #0x01 ; Enable ADC
0446            268            
0446 22         269            ret
0447            270            
0447            271            
0447            272   ;---------------------------------;
0447            273   ; ISR for timer 2                 ;
0447            274   ;---------------------------------;
0447            275   Timer2_ISR:
0447 C2CF       276            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0449 C0D0       277            push psw
044B C0E0       278            push acc
044D            279            
044D 054C       280            inc pwm_counter
044F C3         281            clr c
0450 E541       282            mov a, pwm
0452 954C       283            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0454 B3         284            cpl c
0455 9292       285            mov PWM_OUT, c
0457            286            
0457 E54C       287            mov a, pwm_counter
0459 B46407     288            cjne a, #100, Timer2_ISR_done
045C 754C00     289            mov pwm_counter, #0
045F 054D       290            inc seconds ; It is super easy to keep a seconds count here
0461 D20B       291            setb s_flag
0463            292   
0463            293   Timer2_ISR_done:
0463 D0E0       294            pop acc
0465 D0D0       295            pop psw
0467 32         296            reti
0468            297   
0468            298   ; Flash Memory Subroutines
0468            299   ;******************************************************************************
0468            300   ; This code illustrates how to use IAP to make APROM 3f80h as a byte of
0468            301   ; Data Flash when user code is executed in APROM.
0468            302   ; (The base of this code is listed in the N76E003 user manual)
0468            303   ;******************************************************************************
0468            304   
0468            305   Save_Variables:
0468 C2AF       306            CLR EA  ; MUST disable interrupts for this to work!
046A            307            
046A 75C7AA     308            MOV TA, #0aah ; CHPCON is TA protected
046D 75C755     309            MOV TA, #55h
0470 439F01     310            ORL CHPCON, #00000001b ; IAPEN = 1, enable IAP mode
0473            311            
0473 75C7AA     312            MOV TA, #0aah ; IAPUEN is TA protected
0476 75C755     313            MOV TA, #55h
0479 43A501     314            ORL IAPUEN, #00000001b ; APUEN = 1, enable APROM update
047C            315            
047C 75AF22     316            MOV IAPCN, #PAGE_ERASE_AP ; Erase page 3f80h~3f7Fh
047F 75A73F     317            MOV IAPAH, #3fh ; Address high byte
0482 75A680     318            MOV IAPAL, #80h ; Address low byte
0485 75AEFF     319            MOV IAPFD, #0FFh ; Data to load into the address byte
0488 75C7AA     320            MOV TA, #0aah ; IAPTRG is TA protected
048B 75C755     321            MOV TA, #55h
048E 43A401     322            ORL IAPTRG, #00000001b ; write ?1? to IAPGO to trigger IAP process
0491            323            
0491 75AF21     324            MOV IAPCN, #BYTE_PROGRAM_AP
0494 75A73F     325            MOV IAPAH, #3fh
0497            326            
0497            327            ;Load 3f80h with temp_soak
0497 75A680     328            MOV IAPAL, #80h
049A 8543AE     329            MOV IAPFD, temp_soak
049D 75C7AA     330            MOV TA, #0aah
04A0 75C755     331            MOV TA, #55h
04A3 43A401     332            ORL IAPTRG,#00000001b ; Basically, this executes the write to flash memory
04A6            333            
04A6            334            ;Load 3f81h with Time_soak
04A6 75A681     335            MOV IAPAL, #81h
04A9 8544AE     336            MOV IAPFD, Time_soak
04AC 75C7AA     337            MOV TA, #0aah
04AF 75C755     338            MOV TA, #55h
04B2 43A401     339            ORL IAPTRG,#00000001b
04B5            340            
04B5            341            ;Load 3f82h with Temp_refl
04B5 75A682     342            MOV IAPAL, #82h
04B8 8545AE     343            MOV IAPFD, Temp_refl
04BB 75C7AA     344            MOV TA, #0aah
04BE 75C755     345            MOV TA, #55h
04C1 43A401     346            ORL IAPTRG,#00000001b
04C4            347            
04C4            348            ;Load 3f83h with Time_refl
04C4 75A683     349            MOV IAPAL, #83h
04C7 8546AE     350            MOV IAPFD, Time_refl
04CA 75C7AA     351            MOV TA, #0aah
04CD 75C755     352            MOV TA, #55h
04D0 43A401     353            ORL IAPTRG,#00000001b
04D3            354   
04D3            355            ;Load 3f84h with 55h
04D3 75A684     356            MOV IAPAL,#84h
04D6 75AE55     357            MOV IAPFD, #55h
04D9 75C7AA     358            MOV TA, #0aah
04DC 75C755     359            MOV TA, #55h
04DF 43A401     360            ORL IAPTRG, #00000001b
04E2            361   
04E2            362            ;Load 3f85h with aah (spacer value indicating EOF, will load if something funny happens)
04E2 75A685     363            MOV IAPAL, #85h
04E5 75AEAA     364            MOV IAPFD, #0aah
04E8 75C7AA     365            MOV TA, #0aah
04EB 75C755     366            MOV TA, #55h
04EE 43A401     367            ORL IAPTRG, #00000001b
04F1            368   
04F1 75C7AA     369            MOV TA, #0aah
04F4 75C755     370            MOV TA, #55h
04F7 53A5FE     371            ANL IAPUEN, #11111110b ; APUEN = 0, disable APROM update
04FA 75C7AA     372            MOV TA, #0aah
04FD 75C755     373            MOV TA, #55h
0500 539FFE     374            ANL CHPCON, #11111110b ; IAPEN = 0, disable IAP mode
0503            375            
0503 D2AF       376            setb EA  ; Re-enable interrupts
0505            377   
0505 22         378            ret
0506            379   
0506            380   Load_Variables:
0506 903F84     381            mov dptr, #0x3f84  ; First key value location.  Must be 0x55
0509 E4         382            clr a
050A 93         383            movc a, @a+dptr
050B B4551D     384            cjne a, #0x55, Load_Defaults
050E A3         385            inc dptr      ; Second key value location.  Must be 0xaa
050F E4         386            clr a
0510 93         387            movc a, @a+dptr
0511 B4AA17     388            cjne a, #0xaa, Load_Defaults
0514            389            
0514 903F80     390            mov dptr, #0x3f80
0517 E4         391            clr a
0518 93         392            movc a, @a+dptr
0519 F543       393            mov temp_soak, a
051B            394            
051B A3         395            inc dptr
051C E4         396            clr a
051D 93         397            movc a, @a+dptr
051E F544       398            mov Time_soak, a
0520            399            
0520 A3         400            inc dptr
0521 E4         401            clr a
0522 93         402            movc a, @a+dptr
0523 F545       403            mov Temp_refl, a
0525            404            
0525 A3         405            inc dptr
0526 E4         406            clr a
0527 93         407            movc a, @a+dptr
0528 F546       408            mov Time_refl, a
052A 22         409            ret
052B            410   
052B            411   Load_Defaults:
052B 754301     412            mov temp_soak, #1
052E 754402     413            mov Time_soak, #2
0531 754503     414            mov Temp_refl, #3
0534 754604     415            mov Time_refl, #4
0537 22         416            ret
0538            417   
0538            418   putchar:
0538 3099FD     419       jnb TI, putchar
053B C299       420       clr TI
053D F599       421       mov SBUF, a
053F 22         422       ret
0540            423            
0540            424   
0540            425   wait_1ms:
0540 C28C       426            clr     TR0 ; Stop timer 0
0542 C28D       427            clr     TF0 ; Clear overflow flag
0544 758CBF     428            mov     TH0, #high(TIMER0_RELOAD_1MS)
0547 758A28     429            mov     TL0,#low(TIMER0_RELOAD_1MS)
054A D28C       430            setb TR0
054C 308DFD     431            jnb     TF0, $ ; Wait for overflow
054F 22         432            ret
0550            433   
0550            434   ; Wait the number of miliseconds in R2
0550            435   waitms:
0550 120540     436            lcall wait_1ms
0553 DAFB       437            djnz R2, waitms
0555 22         438            ret
0556            439   
0556            440   ADC_to_PB:
0556 53E8F0     441            anl ADCCON0, #0xF0
0559 43E800     442            orl ADCCON0, #0x00 ; Select AIN0
055C            443            
055C C2EF       444            clr ADCF
055E D2EE       445            setb ADCS   ; ADC start trigger signal
0560 30EFFD     446       jnb ADCF, $ ; Wait for conversion complete
0563            447   
0563 D20A       448            setb PB7
0565 D209       449            setb PB6
0567 D208       450            setb PB5
0569 D207       451            setb PB4
056B D206       452            setb PB3
056D D205       453            setb PB2
056F D204       454            setb PB1
0571 D203       455            setb PB0
0573            456            
0573            457            ; Check PB7
0573            458   ADC_to_PB_L7:
0573 C3         459            clr c
0574 E5C3       460            mov a, ADCRH
0576 94F0       461            subb a, #0xf0
0578 4003       462            jc ADC_to_PB_L6
057A C20A       463            clr PB7
057C 22         464            ret
057D            465   
057D            466            ; Check PB6
057D            467   ADC_to_PB_L6:
057D C3         468            clr c
057E E5C3       469            mov a, ADCRH
0580 94D0       470            subb a, #0xd0
0582 4003       471            jc ADC_to_PB_L5
0584 C209       472            clr PB6
0586 22         473            ret
0587            474   
0587            475            ; Check PB5
0587            476   ADC_to_PB_L5:
0587 C3         477            clr c
0588 E5C3       478            mov a, ADCRH
058A 94B0       479            subb a, #0xb0
058C 4003       480            jc ADC_to_PB_L4
058E C208       481            clr PB5
0590 22         482            ret
0591            483   
0591            484            ; Check PB4
0591            485   ADC_to_PB_L4:
0591 C3         486            clr c
0592 E5C3       487            mov a, ADCRH
0594 9490       488            subb a, #0x90
0596 4003       489            jc ADC_to_PB_L3
0598 C207       490            clr PB4
059A 22         491            ret
059B            492   
059B            493            ; Check PB3
059B            494   ADC_to_PB_L3:
059B C3         495            clr c
059C E5C3       496            mov a, ADCRH
059E 9470       497            subb a, #0x70
05A0 4003       498            jc ADC_to_PB_L2
05A2 C206       499            clr PB3
05A4 22         500            ret
05A5            501   
05A5            502            ; Check PB2
05A5            503   ADC_to_PB_L2:
05A5 C3         504            clr c
05A6 E5C3       505            mov a, ADCRH
05A8 9450       506            subb a, #0x50
05AA 4003       507            jc ADC_to_PB_L1
05AC C205       508            clr PB2
05AE 22         509            ret
05AF            510   
05AF            511            ; Check PB1
05AF            512   ADC_to_PB_L1:
05AF C3         513            clr c
05B0 E5C3       514            mov a, ADCRH
05B2 9430       515            subb a, #0x30
05B4 4003       516            jc ADC_to_PB_L0
05B6 C204       517            clr PB1
05B8 22         518            ret
05B9            519   
05B9            520            ; Check PB0
05B9            521   ADC_to_PB_L0:
05B9 C3         522            clr c
05BA E5C3       523            mov a, ADCRH
05BC 9410       524            subb a, #0x10
05BE 4003       525            jc ADC_to_PB_Done
05C0 C203       526            clr PB0
05C2 22         527            ret
05C3            528            
05C3            529   ADC_to_PB_Done:
05C3            530            ; No puhsbutton pressed         
05C3 22         531            ret
05C4            532   
05C4            533   ; MAIN 
05C4            534   main:
05C4 75817F     535            mov sp, #0x7f
05C7 1203D2     536       lcall Init_All
05CA 1200AA     537       lcall LCD_4BIT
05CD            538       ; initial messages in LCD
05CD C0E0       539            push acc
05CF 7401       539            mov a, #1
05D1 14         539            dec a
05D2 1200EA     539            lcall ?Set_Cursor_1 ; Select column and row
05D5 D0E0       539            pop acc
05D7 C083       540            push dph
05D9 C082       540            push dpl
05DB C0E0       540            push acc
05DD 90002E     540            mov dptr, #temperature_message
05E0 1200DD     540            lcall ?Send_Constant_String
05E3 D0E0       540            pop acc
05E5 D082       540            pop dpl
05E7 D083       540            pop dph
05E9 C0E0       541            push acc
05EB 7401       541            mov a, #1
05ED 14         541            dec a
05EE 1200E8     541            lcall ?Set_Cursor_2 ; Select column and row
05F1 D0E0       541            pop acc
05F3 C083       542            push dph
05F5 C082       542            push dpl
05F7 C0E0       542            push acc
05F9 900043     542            mov dptr, #reflow_message
05FC 1200DD     542            lcall ?Send_Constant_String
05FF D0E0       542            pop acc
0601 D082       542            pop dpl
0603 D083       542            pop dph
0605 C0E0       543            push acc
0607 7405       543            mov a, #5
0609 14         543            dec a
060A 1200E8     543            lcall ?Set_Cursor_2 ; Select column and row
060D D0E0       543            pop acc
060F C083       544            push dph
0611 C082       544            push dpl
0613 C0E0       544            push acc
0615 90003F     544            mov dptr, #comma
0618 1200DD     544            lcall ?Send_Constant_String
061B D0E0       544            pop acc
061D D082       544            pop dpl
061F D083       544            pop dph
0621 C0E0       545            push acc
0623 7408       545            mov a, #8
0625 14         545            dec a
0626 1200E8     545            lcall ?Set_Cursor_2 ; Select column and row
0629 D0E0       545            pop acc
062B C083       546            push dph
062D C082       546            push dpl
062F C0E0       546            push acc
0631 900041     546            mov dptr, #soak_message
0634 1200DD     546            lcall ?Send_Constant_String
0637 D0E0       546            pop acc
0639 D082       546            pop dpl
063B D083       546            pop dph
063D C0E0       547            push acc
063F 740C       547            mov a, #12
0641 14         547            dec a
0642 1200E8     547            lcall ?Set_Cursor_2 ; Select column and row
0645 D0E0       547            pop acc
0647            547   
0647 C083       548            push dph
0649 C082       548            push dpl
064B C0E0       548            push acc
064D 90003F     548            mov dptr, #comma
0650 1200DD     548            lcall ?Send_Constant_String
0653 D0E0       548            pop acc
0655 D082       548            pop dpl
0657 D083       548            pop dph
0659            549   
0659 754B00     550            mov FSM1_state, #0
065C 754314     551       mov Temp_soak, #20
065F 754410     552            mov Time_soak, #0x10
0662 754514     553            mov Temp_refl, #20
0665 754610     554            mov Time_refl, #0x10
0668 754700     555            mov sec, #0
066B 754800     556            mov loop_ten_times, #0
066E            557   
066E C200       558            clr reflow_flag ; start on temp
0670 C201       559            clr soak_flag ; start on temp
0672            560   
0672            561   Forever:
0672            562   
0672            563   
0672            564   ; Example branch for decreasing any given value 
0672            565   ; This set of code will increase the ones columnn of any given 
0672            566   ; variable. ie. reflow_temp_ones, reflow_time_ones
0672            567   ; the 10s and 100s column will update in response to increasing 
0672            568   ; the ones column beyond 9.
0672            569   
0672            570   ; SOAK ;
0672            571   soak_toggle:
0672 200702     572            jb PB4, check_soak_toggle
0675 B201       573            cpl soak_flag ; if button is pressed, change flag
0677            574   
0677            575   check_soak_toggle: 
0677 200110     576            jb soak_flag, turn_soak_to_time
067A            577   
067A            578   turn_soak_to_temp:
067A            579            ; will use the same logic for the other pushbuttons
067A            580   ; This example will use temp_soak for this example
067A            581            decrease_soak_temp:
067A 200405     582            jb PB1, increase_soak_temp
067D 1543       583       dec Temp_soak
067F 0206A4     584            ljmp reflow_toggle
0682            585            
0682            586            increase_soak_temp:
0682 20051F     587            jb PB2, reflow_toggle 
0685 0543       588            inc Temp_soak
0687 0206A4     589            ljmp reflow_toggle
068A            590   
068A            591   turn_soak_to_time:
068A            592            decrease_soak_time:
068A 20040A     593            jb PB1, increase_soak_time
068D E544       594            mov a, Time_soak
068F 2499       595       add a, #0x99
0691 D4         596            da a
0692 F544       597       mov Time_soak, a
0694 0206A4     598            ljmp reflow_toggle
0697            599            
0697            600            increase_soak_time:
0697 20050A     601            jb PB2, reflow_toggle
069A E544       602            mov a, Time_soak
069C 2401       603            add a, #1
069E D4         604            da a 
069F F544       605            mov Time_soak, a
06A1 0206A4     606            ljmp reflow_toggle
06A4            607   
06A4            608   ; REFLOW ;
06A4            609   reflow_toggle:
06A4 200A02     610            jb PB7, check_reflow_toggle
06A7 B200       611            cpl reflow_flag ; if button is pressed, change flag
06A9            612   
06A9            613   check_reflow_toggle: 
06A9 200010     614            jb reflow_flag, turn_reflow_to_time
06AC            615   
06AC            616   turn_reflow_to_temp:
06AC            617            ; will use the same logic for the other pushbuttons
06AC            618   ; This example will use temp_soak for this example
06AC            619   
06AC            620            decrease_reflow_temp:
06AC 200905     621            jb PB6, increase_reflow_temp
06AF 1545       622       dec Temp_refl
06B1 0206D6     623            ljmp start_stop
06B4            624            
06B4            625            increase_reflow_temp:
06B4 20081F     626            jb PB5, start_stop
06B7 0545       627            inc Temp_refl
06B9 0206D6     628            ljmp start_stop
06BC            629   
06BC            630   
06BC            631   turn_reflow_to_time:
06BC            632            
06BC            633            decrease_reflow_time:
06BC 20090A     634            jb PB6, increase_reflow_time
06BF E546       635            mov a, Time_refl
06C1 2499       636       add a, #0x99
06C3 D4         637            da a
06C4 F546       638       mov Time_refl, a
06C6 0206D6     639            ljmp start_stop
06C9            640            
06C9            641            increase_reflow_time:
06C9 20080A     642            jb PB5, start_stop 
06CC E546       643            mov a, Time_refl
06CE 2401       644            add a, #1
06D0 D4         645            da a 
06D1 F546       646            mov Time_refl, a
06D3 0206D6     647            ljmp start_stop
06D6            648   
06D6            649   
06D6            650   start_stop:
06D6 E545       651            mov a, Temp_refl
06D8 C0E0       652            push acc
06DA 7402       652            mov a, #2
06DC 14         652            dec a
06DD 1200E8     652            lcall ?Set_Cursor_2 ; Select column and row
06E0 D0E0       652            pop acc
06E2 120375     653            lcall SendToLCD
06E5 E4         654            clr a
06E6 E543       655            mov a, Temp_soak
06E8 C0E0       656            push acc
06EA 7409       656            mov a, #9
06EC 14         656            dec a
06ED 1200E8     656            lcall ?Set_Cursor_2 ; Select column and row
06F0 D0E0       656            pop acc
06F2 120375     657            lcall SendToLCD
06F5 E4         658            clr a
06F6 C0E0       659            push acc
06F8 7406       659            mov a, #6
06FA 14         659            dec a
06FB 1200E8     659            lcall ?Set_Cursor_2 ; Select column and row
06FE D0E0       659            pop acc
0700 C000       660            push ar0
0702 A846       660            mov r0, Time_refl
0704 1200EF     660            lcall ?Display_BCD
0707 D000       660            pop ar0
0709 C0E0       661            push acc
070B 740D       661            mov a, #13
070D 14         661            dec a
070E 1200E8     661            lcall ?Set_Cursor_2 ; Select column and row
0711 D0E0       661            pop acc
0713 C000       662            push ar0
0715 A844       662            mov r0, Time_soak
0717 1200EF     662            lcall ?Display_BCD
071A D000       662            pop ar0
071C 20030F     663            jb PB0, continue
071F            664   
071F            665   turn_on:
071F E54B       666            mov a, FSM1_state
0721 B40005     667            cjne a, #0, turn_off
0724 754B01     668            mov FSM1_state, #1
0727 8005       669            sjmp continue
0729            670   
0729            671   turn_off:
0729 754B00     672            mov FSM1_state, #0
072C 8000       673            sjmp continue
072E            674   
072E            675   
072E            676   continue:
072E 120556     677            lcall ADC_to_PB
0731            678            ;lcall Display_PushButtons_ADC
0731            679            
0731 75E807     680            mov ADCCON0, #0x07 ; Select channel 7 (P1.1)
0734 C2EF       681            clr ADCF
0736 D2EE       682            setb ADCS ;  ADC start trigger signal
0738 30EFFD     683       jnb ADCF, $ ; Wait for conversion complete
073B            684       
073B            685       ; Read the ADC result and store in [R1, R0]
073B E5C3       686       mov a, ADCRH   
073D C4         687       swap a
073E C0E0       688       push acc
0740 540F       689       anl a, #0x0f
0742 F9         690       mov R1, a
0743 D0E0       691       pop acc
0745 54F0       692       anl a, #0xf0
0747 45C2       693       orl a, ADCRL
0749 F8         694       mov R0, A
074A            695       
074A 75E801     696       mov ADCCON0, #0x01 ; Select channel 1 (P3.0)
074D C2EF       697            clr ADCF
074F D2EE       698            setb ADCS ;  ADC start trigger signal
0751 30EFFD     699       jnb ADCF, $ ; Wait for conversion complete
0754            700       
0754            701       ; Read the ADC result and store in [R4, R3]
0754 E5C3       702       mov a, ADCRH   
0756 C4         703       swap a
0757 C0E0       704       push acc
0759 540F       705       anl a, #0x0f
075B FC         706       mov R4, a
075C D0E0       707       pop acc
075E 54F0       708       anl a, #0xf0
0760 45C2       709       orl a, ADCRL
0762 FB         710       mov R3, A
0763            711       
0763            712            ; Convert to LM335 temperature to voltage
0763 8B30       713            mov x+0, R3
0765 8C31       714            mov x+1, R4
0767 753200     715            mov x+2, #0
076A 753300     716            mov x+3, #0
076D 75347C     717            mov y+0, #low (50300 % 0x10000) 
0770 7535C4     717            mov y+1, #high(50300 % 0x10000) 
0773 753600     717            mov y+2, #low (50300 / 0x10000) 
0776 753700     717            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0779 12027F     718            lcall mul32
077C 7534FF     719            mov y+0, #low (4095 % 0x10000) 
077F 75350F     719            mov y+1, #high(4095 % 0x10000) 
0782 753600     719            mov y+2, #low (4095 / 0x10000) 
0785 753700     719            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0788 12030C     720            lcall div32
078B 7534D0     721            mov y+0, #low (27600 % 0x10000) 
078E 75356B     721            mov y+1, #high(27600 % 0x10000) 
0791 753600     721            mov y+2, #low (27600 / 0x10000) 
0794 753700     721            mov y+3, #high(27600 / 0x10000) 
0797 1201EB     722            lcall sub32
079A 753464     723            mov y+0, #low (100 % 0x10000) 
079D 753500     723            mov y+1, #high(100 % 0x10000) 
07A0 753600     723            mov y+2, #low (100 / 0x10000) 
07A3 753700     723            mov y+3, #high(100 / 0x10000) 
07A6 12027F     724            lcall mul32
07A9            725            
07A9            726            ; Convert to BCD and display
07A9 120105     727            lcall hex2bcd
07AC C0E0       728            push acc
07AE 740C       728            mov a, #12
07B0 14         728            dec a
07B1 1200EA     728            lcall ?Set_Cursor_1 ; Select column and row
07B4 D0E0       728            pop acc
07B6 1203B6     729            lcall Display_formated_BCD_Tj
07B9            730   
07B9            731            ; Convert value back to hex to use for calculations
07B9 12018E     732            lcall bcd2hex
07BC            733   
07BC            734            ; Storing the ambient temperature
07BC 853038     735            mov amb_temp+0, x+0
07BF 853139     736            mov amb_temp+1, x+1
07C2 85323A     737            mov amb_temp+2, x+2
07C5 85333B     738            mov amb_temp+3, x+3
07C8            739   
07C8            740            ; Convert to thermocouple voltage to temperature
07C8 8830       741            mov x+0, R0
07CA 8931       742            mov x+1, R1
07CC 753200     743            mov x+2, #0
07CF 753300     744            mov x+3, #0
07D2 75347C     745            mov y+0, #low (50300 % 0x10000) 
07D5 7535C4     745            mov y+1, #high(50300 % 0x10000) 
07D8 753600     745            mov y+2, #low (50300 / 0x10000) 
07DB 753700     745            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
07DE 12027F     746            lcall mul32
07E1 7534FF     747            mov y+0, #low (4095 % 0x10000) 
07E4 75350F     747            mov y+1, #high(4095 % 0x10000) 
07E7 753600     747            mov y+2, #low (4095 / 0x10000) 
07EA 753700     747            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07ED 12030C     748            lcall div32
07F0 753464     749            mov y+0, #low (100 % 0x10000) 
07F3 753500     749            mov y+1, #high(100 % 0x10000) 
07F6 753600     749            mov y+2, #low (100 / 0x10000) 
07F9 753700     749            mov y+3, #high(100 / 0x10000) 
07FC 12030C     750            lcall div32
07FF 753445     751            mov y+0, #low (5189 % 0x10000) 
0802 753514     751            mov y+1, #high(5189 % 0x10000) 
0805 753600     751            mov y+2, #low (5189 / 0x10000) 
0808 753700     751            mov y+3, #high(5189 / 0x10000) 
080B 12027F     752            lcall mul32
080E            753   
080E            754            ; Adding the ambient temperature to oven temperature
080E 853834     755            mov y+0, amb_temp+0
0811 853935     756            mov y+1, amb_temp+1
0814 853A36     757            mov y+2, amb_temp+2
0817 853B37     758            mov y+3, amb_temp+3
081A 1201CA     759            lcall add32
081D            760            
081D            761            ; Convert to BCD and display
081D 120105     762            lcall hex2bcd
0820 C0E0       763            push acc
0822 7403       763            mov a, #3
0824 14         763            dec a
0825 1200EA     763            lcall ?Set_Cursor_1 ; Select column and row
0828 D0E0       763            pop acc
082A 120391     764            lcall Display_formated_BCD_To
082D            765            ;---------------------------------;
082D            766            ; Send a BCD number to PuTTY      ;
082D            767            ;---------------------------------
                768   	Send_BCD mac
                769   		push ar0
                770   		mov r0, %0
                771   		lcall ?Send_BCD
                772   		pop ar0
                773   	endmac
082D            774            
082D            775            ?Send_BCD:
082D C0E0       776                    push acc
082F            777                    ; Write most significant digit
082F E53F       778                    mov a, bcd+3
0831 C4         779                    swap a
0832 540F       780                    anl a, #0fh
0834 4430       781                    orl a, #30h
0836 120538     782                    lcall putchar
0839            783                    ; write least significant digit
0839 E53F       784                    mov a, bcd+3
083B 540F       785                    anl a, #0fh
083D 4430       786                    orl a, #30h
083F 120538     787                    lcall putchar
0842            788                    
0842            789                    ; Write most significant digit
0842 E53E       790                    mov a, bcd+2
0844 C4         791                    swap a
0845 540F       792                    anl a, #0fh
0847 4430       793                    orl a, #30h
0849 120538     794                    lcall putchar
084C            795                    ; write least significant digit
084C E53E       796                    mov a, bcd+2
084E 540F       797                    anl a, #0fh
0850 4430       798                    orl a, #30h
0852 120538     799                    lcall putchar
0855 D0E0       800                    pop acc
0857            801            ; Write most significant digit
0857 E53D       802                    mov a, bcd+1
0859 C4         803                    swap a
085A 540F       804                    anl a, #0fh
085C 4430       805                    orl a, #30h
085E 120538     806                    lcall putchar
0861            807   
0861            808                    ; Write most significant digit
0861            809   
0861            810            
0861            811            ; Storing the thermocouple temperature into var temp 
0861 753410     812            mov y+0, #low (10000 % 0x10000) 
0864 753527     812            mov y+1, #high(10000 % 0x10000) 
0867 753600     812            mov y+2, #low (10000 / 0x10000) 
086A 753700     812            mov y+3, #high(10000 / 0x10000) 
086D 12030C     813            lcall div32
0870 853049     814            mov temp+0, x+0
0873 85314A     815            mov temp+1, x+1
0876            816            
0876            817   
0876            818   
0876            819            ; Wait 100 ms between readings
0876 7A64       820            mov R2, #100
0878 120550     821            lcall waitms
087B            822            
087B            823   ; STATE MACHINE  
087B            824   FSM1:
087B E54B       825            mov a, FSM1_state
087D            826   
087D            827   ; off state. Should go to state 1 when start button is pressed (Button 8 right now)
087D            828   FSM1_state0:
087D B40028     829            cjne a, #0, FSM1_state1
0880 C0E0       830            push acc
0882 7410       830            mov a, #16
0884 14         830            dec a
0885 1200E8     830            lcall ?Set_Cursor_2 ; Select column and row
0888 D0E0       830            pop acc
088A C083       831            push dph
088C C082       831            push dpl
088E C0E0       831            push acc
0890 900045     831            mov dptr, #state0
0893 1200DD     831            lcall ?Send_Constant_String
0896 D0E0       831            pop acc
0898 D082       831            pop dpl
089A D083       831            pop dph
089C 754100     832            mov pwm, #0
089F 754700     833            mov sec, #0
08A2 754800     834            mov loop_ten_times, #0
08A5            835            ;jb PB0, FSM1_state0_done
08A5            836            ;mov FSM1_state, #1
08A5            837   FSM1_state0_done:
08A5 020672     838            ljmp Forever
08A8            839   
08A8            840   ; pre-heat state. Should go to state two when temp reaches temp_soak     
08A8            841   FSM1_state1:
08A8 B40154     842            cjne a, #1, FSM1_state2
08AB C0E0       843            push acc
08AD 7410       843            mov a, #16
08AF 14         843            dec a
08B0 1200E8     843            lcall ?Set_Cursor_2 ; Select column and row
08B3 D0E0       843            pop acc
08B5 C083       844            push dph
08B7 C082       844            push dpl
08B9 C0E0       844            push acc
08BB 900047     844            mov dptr, #state1
08BE 1200DD     844            lcall ?Send_Constant_String
08C1 D0E0       844            pop acc
08C3 D082       844            pop dpl
08C5 D083       844            pop dph
08C7            845            
08C7 C296       846            clr P1.6
08C9            847            
08C9 754164     848            mov pwm, #100
08CC            849            
08CC            850            ;Failsafe. Returns to state 0 if temperature is not reached in 6 seconds (should be 60 idk how to do it)
08CC E547       851            mov a, sec
08CE 2401       852            add a, #1
08D0 F547       853            mov sec, a
08D2            854   
08D2 743C       855            mov a, #60
08D4 C3         856            clr c
08D5 9547       857            subb a, sec
08D7 5016       858            jnc FSM1_state1_continue
08D9            859   
08D9 E548       860            mov a, loop_ten_times
08DB 2401       861            add a, #1
08DD F548       862            mov loop_ten_times, a 
08DF 754700     863            mov sec, #0
08E2 7408       864            mov a, #8
08E4 C3         865            clr c 
08E5 9548       866            subb a, loop_ten_times
08E7 5006       867            jnc FSM1_state1_continue
08E9            868   
08E9 754B00     869            mov FSM1_state, #0
08EC 020672     870            ljmp Forever
08EF            871   
08EF            872   FSM1_state1_continue:
08EF            873            ; These two lines are temporary. temp should be read from the thermocouple wire
08EF            874            ;mov temp_soak, #100
08EF            875            
08EF E543       876            mov a, Temp_soak
08F1 D3         877            setb c
08F2 9549       878            subb a, temp
08F4 5006       879            jnc FSM1_state1_done
08F6 754800     880            mov loop_ten_times, #0
08F9 754B02     881            mov FSM1_state, #2
08FC            882   FSM1_state1_done:
08FC 020672     883            ljmp Forever
08FF            884   
08FF            885   ; State 2
08FF            886   FSM1_state2:
08FF D296       887            setb P1.6 ;speaker
0901 B40245     888            cjne a, #2, FSM1_state3
0904 C0E0       889            push acc
0906 7410       889            mov a, #16
0908 14         889            dec a
0909 1200E8     889            lcall ?Set_Cursor_2 ; Select column and row
090C D0E0       889            pop acc
090E C083       890            push dph
0910 C082       890            push dpl
0912 C0E0       890            push acc
0914 900049     890            mov dptr, #state2
0917 1200DD     890            lcall ?Send_Constant_String
091A D0E0       890            pop acc
091C D082       890            pop dpl
091E D083       890            pop dph
0920 754114     891            mov pwm, #20
0923            892            
0923 E547       893            mov a, sec
0925 2401       894            add a, #1
0927 F547       895            mov sec, a
0929            896   
0929 E544       897            mov a, Time_soak
092B C3         898            clr c
092C 9547       899            subb a, sec
092E 5013       900            jnc FSM1_state2_done
0930            901   
0930 E548       902            mov a, loop_ten_times
0932 2401       903            add a, #1
0934 F548       904            mov loop_ten_times, a 
0936 754700     905            mov sec, #0
0939 7405       906            mov a, #5
093B C3         907            clr c 
093C 9548       908            subb a, loop_ten_times
093E 5003       909            jnc FSM1_state2_done
0940            910   
0940 754B03     911            mov FSM1_state, #3
0943            912   FSM1_state2_done:
0943 020672     913            ljmp Forever
0946            914   
0946            915   ;DELETE
0946            916   jump:
0946 02087D     917   ljmp FSM1_state0         
0949            918   
0949            919   ;State 3
0949            920   FSM1_state3:
0949 B40332     921            cjne a, #3, FSM1_state4
094C C0E0       922            push acc
094E 7410       922            mov a, #16
0950 14         922            dec a
0951 1200E8     922            lcall ?Set_Cursor_2 ; Select column and row
0954 D0E0       922            pop acc
0956 C083       923            push dph
0958 C082       923            push dpl
095A C0E0       923            push acc
095C 90004B     923            mov dptr, #state3
095F 1200DD     923            lcall ?Send_Constant_String
0962 D0E0       923            pop acc
0964 D082       923            pop dpl
0966 D083       923            pop dph
0968 754164     924            mov pwm, #100
096B 754700     925            mov sec, #0
096E 754800     926            mov loop_ten_times, #0
0971            927            
0971            928            
0971 E545       929            mov a, Temp_refl
0973 C3         930            clr c
0974 9549       931            subb a, temp
0976 5003       932            jnc FSM1_state3_done
0978 754B04     933            mov FSM1_state, #4
097B            934   FSM1_state3_done:
097B 020672     935            ljmp Forever
097E            936   
097E            937   
097E            938   ;State 4
097E            939   FSM1_state4:
097E B40442     940            cjne a, #4, FSM1_state5
0981 C0E0       941            push acc
0983 7410       941            mov a, #16
0985 14         941            dec a
0986 1200E8     941            lcall ?Set_Cursor_2 ; Select column and row
0989 D0E0       941            pop acc
098B C083       942            push dph
098D C082       942            push dpl
098F C0E0       942            push acc
0991 90004D     942            mov dptr, #state4
0994 1200DD     942            lcall ?Send_Constant_String
0997 D0E0       942            pop acc
0999 D082       942            pop dpl
099B D083       942            pop dph
099D 754114     943            mov pwm, #20
09A0            944            
09A0 E547       945            mov a, sec
09A2 2401       946            add a, #1
09A4 F547       947            mov sec, a
09A6            948            
09A6 E546       949            mov a, Time_refl
09A8 C3         950            clr c
09A9 9547       951            subb a,sec
09AB 5013       952            jnc FSM1_state4_done
09AD            953   
09AD E548       954            mov a, loop_ten_times
09AF 2401       955            add a, #1
09B1 F548       956            mov loop_ten_times, a 
09B3 754700     957            mov sec, #0
09B6 7405       958            mov a, #5
09B8 C3         959            clr c 
09B9 9548       960            subb a, loop_ten_times
09BB 5003       961            jnc FSM1_state4_done
09BD            962   
09BD 754B05     963            mov FSM1_state, #5
09C0            964   FSM1_state4_done:
09C0 020672     965            ljmp Forever
09C3            966            
09C3            967   FSM1_state5:
09C3 B40580     968            cjne a, #5, jump
09C6 C0E0       969            push acc
09C8 7410       969            mov a, #16
09CA 14         969            dec a
09CB 1200E8     969            lcall ?Set_Cursor_2 ; Select column and row
09CE D0E0       969            pop acc
09D0 C083       970            push dph
09D2 C082       970            push dpl
09D4 C0E0       970            push acc
09D6 90004F     970            mov dptr, #state5
09D9 1200DD     970            lcall ?Send_Constant_String
09DC D0E0       970            pop acc
09DE D082       970            pop dpl
09E0 D083       970            pop dph
09E2 754100     971            mov pwm, #0
09E5            972            
09E5            973            
09E5 743C       974            mov a, #60
09E7 C3         975            clr c
09E8 9549       976            subb a, temp
09EA 4003       977            jc FSM1_state5_done
09EC 754B00     978            mov FSM1_state,#0
09EF            979   FSM1_state5_done:
09EF 120468     980            lcall Save_Variables ; Save variables in flash memory
09F2 020672     981            ljmp Forever
09F5            982            
09F5            983   
09F5            984   
09F5            985   ;Any additions to be checked
09F5            986   EN
